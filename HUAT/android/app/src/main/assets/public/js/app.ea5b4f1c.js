(()=>{var e={1993:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=1993,e.exports=t},4671:(e,t,n)=>{"use strict";n(6992),n(8674),n(7727);var o=n(9963),a=n(6252),l=n(2262),i=n(41);const s=(0,a.aZ)({__name:"App",setup(e){return(e,t)=>((0,a.wg)(),(0,a.j4)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.dr),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.jP))])),_:1})])),_:1}))}}),r=s,u=r;n(3948);var d=n(1089),m=n(8903);const p=(0,a.aZ)({__name:"BottomTabs",setup(e){return(e,t)=>((0,a.wg)(),(0,a.j4)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.UN),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.jP)),(0,a.Wm)((0,l.SU)(i.yq),{slot:"bottom"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.ZU),{tab:"home",href:"/tabs/home"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.LEH)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Home")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"wallet",href:"/tabs/wallet"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.In3)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Wallet")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"plans",href:"/tabs/plans"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.R_F)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Plans")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"map",href:"/tabs/map"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.UID)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Map")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"profile",href:"/tabs/profile"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.lBs)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Profile")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1}))}}),c=p,f=c;var w=n(3577);const g=e=>((0,a.dD)("data-v-7834dab8"),e=e(),(0,a.Cn)(),e),h=["src"],_={class:"myLine ion-justify-content-start"},k=g((()=>(0,a._)("a",{"float-right":"",class:"myLine2",href:"/forgotPassword"},"Forgot password?",-1))),b=g((()=>(0,a._)("div",{class:"ion-text-center"},[(0,a._)("a",{href:"/register"}," Do not have an account? Sign up now! ")],-1))),W={key:0},U={key:1},y=g((()=>(0,a._)("ul",{id:"hi"},null,-1)));function v(e,t,o,l,i,s){const r=(0,a.up)("ion-row"),u=(0,a.up)("icon-col"),d=(0,a.up)("ion-input"),m=(0,a.up)("ion-item"),p=(0,a.up)("ion-checkbox"),c=(0,a.up)("ion-label"),f=(0,a.up)("ion-col"),g=(0,a.up)("ion-button"),v=(0,a.up)("ion-note"),I=(0,a.up)("ion-grid"),S=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(S,null,{default:(0,a.w5)((()=>[(0,a.Wm)(I,{"scroll-y":"false"},{default:(0,a.w5)((()=>[(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a._)("img",{src:n(6319)},null,8,h)])),_:1}),(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{size:"9",class:"pageHeader"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Login ")])),_:1})])),_:1}),(0,a.Wm)(m,{fill:"solid",ref:"item"},{default:(0,a.w5)((()=>[(0,a.Wm)(d,{clearInput:!0,placeholder:"Username",modelValue:e.username,"onUpdate:modelValue":t[0]||(t[0]=t=>e.username=t)},null,8,["modelValue"])])),_:1},512),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{clearInput:!0,type:"password",placeholder:"Password",modelValue:e.password,"onUpdate:modelValue":t[1]||(t[1]=t=>e.password=t)},null,8,["modelValue"])])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a._)("div",_,[(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Remember me")])),_:1})])),_:1}),k])])),_:1})])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[b])),_:1})])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(g,{shape:"round",onClick:t[2]||(t[2]=t=>e.validateLogin())},{default:(0,a.w5)((()=>[(0,a.Uk)("Login")])),_:1})])),_:1}),(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{color:"danger"},{default:(0,a.w5)((()=>[(0,a._)("ul",null,[""!=e.usernameError?((0,a.wg)(),(0,a.iD)("li",W,(0,w.zw)(e.usernameError),1)):(0,a.kq)("",!0),""!=e.passwordError?((0,a.wg)(),(0,a.iD)("li",U,(0,w.zw)(e.passwordError),1)):(0,a.kq)("",!0)])])),_:1})])),_:1}),(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{color:"danger"},{default:(0,a.w5)((()=>[y])),_:1})])),_:1})])),_:1})])),_:1})}n(8862),n(7658);var I=n(8945);const S=(0,a.aZ)({components:{IonRow:i.Nd,IonGrid:i.jY,IonCol:i.wI,IonNote:i.uN,IonInput:i.pK,IonItem:i.Ie,IonButton:i.YG,IonCheckbox:i.nz,IonLabel:i.Q$},data(){return{username:"",password:"",passwordError:"",usernameError:"",loginError:""}},methods:{init(){localStorage.setItem("userData","")},validateLogin(){let e="",t={};if(""!=this.username&&""!=this.password){e=JSON.stringify({username:this.username,password:this.password}),t={method:"post",mode:"cors",url:"http://localhost:5002/userlogin",headers:{"Content-Type":"application/json"},data:e};const n=this.$router,o=(0,I.Z)(t).then((function(e){return localStorage.setItem("userData",JSON.stringify(e.data.data)),n.push("tabs"),e.data})).catch((function(e){e="Incorrect login details. Please try again",document.getElementById("hi").innerText=e,console.log(e)}));return o}""==this.username&&(this.usernameError="Username cannot be empty"),""==this.password&&(this.passwordError="Password cannot be empty")}},mounted(){this.init()}});var B=n(3744);const P=(0,B.Z)(S,[["render",v],["__scopeId","data-v-7834dab8"]]),C=P,E=e=>((0,a.dD)("data-v-3abf7be5"),e=e(),(0,a.Cn)(),e),V=E((()=>(0,a._)("img",{src:"/assets/images/ion.jpg"},null,-1))),j=E((()=>(0,a._)("br",null,null,-1))),N=E((()=>(0,a._)("br",null,null,-1)));function T(e,t,n,o,l,i){const s=(0,a.up)("ion-searchbar"),r=(0,a.up)("ion-card-subtitle"),u=(0,a.up)("ion-button"),d=(0,a.up)("ion-row"),m=(0,a.up)("ion-col"),p=(0,a.up)("ion-badge"),c=(0,a.up)("ion-item"),f=(0,a.up)("ion-card-title"),g=(0,a.up)("ion-card-header"),h=(0,a.up)("ion-grid"),_=(0,a.up)("ion-card"),k=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(k,{pageTitle:"My Bookings",needBackButton:"y",pageToGoBack:"/tabs/profile",needToolBar:"y"},{default:(0,a.w5)((()=>[(0,a.Wm)(s),((0,a.wg)(!0),(0,a.iD)(a.HY,null,(0,a.Ko)(e.bookingDetails,(n=>((0,a.wg)(),(0,a.j4)(_,{key:n},{default:(0,a.w5)((()=>[V,(0,a.Wm)(h,null,{default:(0,a.w5)((()=>[(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Booking Ref:"),(0,a._)("u",null,(0,w.zw)(n.bookingRef),1)])),_:2},1024),(0,a.Wm)(d,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{shape:"round",onClick:t[0]||(t[0]=t=>e.editBooking())},{default:(0,a.w5)((()=>[(0,a.Uk)("Edit")])),_:1})])),_:1}),(0,a.Wm)(d,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{shape:"round",onClick:t=>e.deleteBooking(n.bookingID),color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Delete")])),_:2},1032,["onClick"])])),_:2},1024)])),_:2},1024)])),_:2},1024),(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Start Date: "+(0,w.zw)(n.startDate),1)])),_:2},1024),j,(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("End Date: "+(0,w.zw)(n.endDate),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Start Time: "+(0,w.zw)(n.startTime),1)])),_:2},1024),N,(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("End Time:"+(0,w.zw)(n.endTime),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(c,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"success",slot:"end"},{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(n.status),1)])),_:2},1024)])),_:2},1024)])),_:2},1024)])),_:2},1024),(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(n.bookingLocation),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(c,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{fill:"outline",slot:"end"},{default:(0,a.w5)((()=>[(0,a.Uk)("Directions")])),_:1})])),_:1})])),_:1})])),_:2},1024)])),_:2},1024)])),_:2},1024)])),_:2},1024)))),128))])),_:1})}const D=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardSubtitle:i.tO,IonCardTitle:i.Dq,IonSearchbar:i.VI,IonBadge:i.yp},data(){return{bookingDetails:[]}},methods:{deleteBooking(e){const t="http://127.0.0.1:5001/bookings/"+e;console.log(t),I.Z["delete"](t).then((e=>{console.log(e),location.reload()})).catch((e=>{console.log(e.message)}))},getAllBookings(){const e="http://127.0.0.1:5001/bookings";I.Z.get(e).then((e=>{const t=e.data.data.bookings;console.log(t);for(const n of t){const e=new Date(n.startTime),t=e.getDate()+"/"+e.getMonth()+"1/"+e.getFullYear(),o=e.getHours()+":"+e.getMinutes(),a=new Date(n.endTime),l=a.getDate()+"/"+a.getMonth()+"1/"+a.getFullYear(),i=a.getHours()+":"+a.getMinutes();this.bookingDetails.push({bookingDate:n.bookingDate,bookingID:n.bookingID,bookingLocation:n.bookingLocation,locationName:n.locationName,startDate:t,startTime:o,endDate:l,endTime:i,status:n.status,bookingRef:n.bookingRef,image:n.image,maxCapacity:n.maxCapacity,currentCapacity:n.currentCapacity,userID:n.userID})}})).catch((e=>{console.log(e.message)}))}},mounted(){this.getAllBookings()}}),Z=(0,B.Z)(D,[["render",T],["__scopeId","data-v-3abf7be5"]]),O=Z,x=e=>((0,a.dD)("data-v-2cbf7f50"),e=e(),(0,a.Cn)(),e),L=x((()=>(0,a._)("br",null,null,-1))),R=x((()=>(0,a._)("br",null,null,-1))),A=x((()=>(0,a._)("br",null,null,-1))),q=x((()=>(0,a._)("h3",{class:"ion-padding-top",style:{color:"red","font-weight":"bold"}},"*No refund after buying",-1)));function z(e,t,n,o,l,i){const s=(0,a.up)("ion-card-title"),r=(0,a.up)("ion-card-header"),u=(0,a.up)("ion-card-content"),d=(0,a.up)("ion-button"),m=(0,a.up)("ion-card"),p=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(p,{pageTitle:"Buy Subscription",pageToGoBack:"/tabs/",needBackButton:"y",needToolBar:"y"},{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Premium Plan")])),_:1})])),_:1}),(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Free 2 hour parking"),L,(0,a.Uk)(" Free parking once a month"),R,(0,a.Uk)(" Pay parking fees at the end of the month"),A,q])),_:1}),(0,a.Wm)(d,{expand:"full",shape:"round"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Buy")])),_:1})])),_:1})])),_:1})}function H(e,t,n,o,l,i){const s=(0,a.up)("ion-back-button"),r=(0,a.up)("ion-buttons"),u=(0,a.up)("ion-title"),d=(0,a.up)("ion-toolbar"),m=(0,a.up)("ion-header"),p=(0,a.up)("ion-content"),c=(0,a.up)("ion-page");return(0,a.wg)(),(0,a.j4)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[e.needToolBar?((0,a.wg)(),(0,a.j4)(d,{key:0},{default:(0,a.w5)((()=>[e.needBackButton?((0,a.wg)(),(0,a.j4)(r,{key:0,slot:"start"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,{"default-href":e.pageToGoBack},null,8,["default-href"])])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(u,{class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(e.pageTitle),1)])),_:1})])),_:1})):(0,a.kq)("",!0)])),_:1}),(0,a.Wm)(p,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.WI)(e.$slots,"default")])),_:3})])),_:3})}const M=(0,a.aZ)({props:{pageTitle:String,needBackButton:String,pageToGoBack:String,needToolBar:String},components:{IonPage:i._i,IonHeader:i.Gu,IonTitle:i.wd,IonContent:i.W2,IonToolbar:i.sr,IonButtons:i.Sm,IonBackButton:i.oU}}),$=(0,B.Z)(M,[["render",H]]),F=$,G=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardTitle:i.Dq,BaseLayout:F}}),Y=(0,B.Z)(G,[["render",z],["__scopeId","data-v-2cbf7f50"]]),Q=Y;function K(e,t,n,o,l,i){const s=(0,a.up)("ion-title"),r=(0,a.up)("ion-toolbar"),u=(0,a.up)("ion-header"),d=(0,a.up)("ion-searchbar"),m=(0,a.up)("ion-img"),p=(0,a.up)("ion-card-title"),c=(0,a.up)("ion-card-subtitle"),f=(0,a.up)("ion-card-header"),w=(0,a.up)("ion-card"),g=(0,a.up)("ion-content"),h=(0,a.up)("ion-page");return(0,a.wg)(),(0,a.j4)(h,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(s,{size:"large",class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)("Nearby Me")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(d),(0,a.Wm)(w,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,{src:"assets/images/ion.jpg"}),(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Ion Orchard")])),_:1}),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Uk)("400 lots Left")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(w,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,{src:"assets/images/wisma.jpeg"}),(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Wisma atria")])),_:1}),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Uk)("230 lots Left")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})}const J=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardSubtitle:i.tO,IonCardTitle:i.Dq,IonSearchbar:i.VI}}),X=(0,B.Z)(J,[["render",K],["__scopeId","data-v-37abe552"]]),ee=X,te=["src"];function ne(e,t,o,l,i,s){const r=(0,a.up)("ion-row"),u=(0,a.up)("icon-col"),d=(0,a.up)("ion-label"),m=(0,a.up)("ion-input"),p=(0,a.up)("ion-item"),c=(0,a.up)("ion-note"),f=(0,a.up)("ion-button"),g=(0,a.up)("ion-list"),h=(0,a.up)("ion-grid"),_=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(_,null,{default:(0,a.w5)((()=>[(0,a.Wm)(h,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a._)("img",{src:n(6319)},null,8,te)])),_:1}),(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{size:"9",class:"pageHeader"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Registration ")])),_:1})])),_:1}),(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Username:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,modelValue:e.userName,"onUpdate:modelValue":t[0]||(t[0]=t=>e.userName=t),onChange:t[1]||(t[1]=t=>e.validateUsername(e.userName))},null,8,["modelValue"])])),_:1}),2==e.isUsernameValid?((0,a.wg)(),(0,a.j4)(p,{key:0,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your username is too long!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Name:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,modelValue:e.name,"onUpdate:modelValue":t[2]||(t[2]=t=>e.name=t),onChange:t[3]||(t[3]=t=>e.validateName(e.name))},null,8,["modelValue"])])),_:1}),2==e.isNameValid?((0,a.wg)(),(0,a.j4)(p,{key:1,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your name is too long!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Email:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"email",modelValue:e.email,"onUpdate:modelValue":t[4]||(t[4]=t=>e.email=t),onChange:t[5]||(t[5]=t=>e.validateEmail(e.email))},null,8,["modelValue"])])),_:1}),2==e.isEmailValid?((0,a.wg)(),(0,a.j4)(p,{key:2,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid email!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Password:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"password",modelValue:e.password,"onUpdate:modelValue":t[6]||(t[6]=t=>e.password=t),onChange:t[7]||(t[7]=t=>e.validatePassword(e.password))},null,8,["modelValue"])])),_:1}),0!=e.passwordErrors.length?((0,a.wg)(),(0,a.j4)(p,{key:3,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[((0,a.wg)(!0),(0,a.iD)(a.HY,null,(0,a.Ko)(e.passwordErrors,(e=>((0,a.wg)(),(0,a.iD)("ul",{key:e},[(0,a._)("li",null,(0,w.zw)(e),1)])))),128))])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Reconfirm password:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"password",modelValue:e.reconfirmPassword,"onUpdate:modelValue":t[8]||(t[8]=t=>e.reconfirmPassword=t),onChange:t[9]||(t[9]=t=>e.validateReconfirmPassword(e.reconfirmPassword))},null,8,["modelValue"])])),_:1}),2==e.isReconfirmPasswordValid?((0,a.wg)(),(0,a.j4)(p,{key:4,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your password do not match!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Phone number:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"tel",modelValue:e.phoneNumber,"onUpdate:modelValue":t[10]||(t[10]=t=>e.phoneNumber=t),onChange:t[11]||(t[11]=t=>e.validatePhone(e.phoneNumber))},null,8,["modelValue"])])),_:1}),2==e.isPhoneValid?((0,a.wg)(),(0,a.j4)(p,{key:5,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid phone number!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(r,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,{shape:"round",disabled:1==e.disabledRegisterButton,onClick:e.registerUser},{default:(0,a.w5)((()=>[(0,a.Uk)("Register")])),_:1},8,["disabled","onClick"])])),_:1})])),_:1})])),_:1})])),_:1})}n(4916);const oe=(0,a.aZ)({components:{IonRow:i.Nd,IonInput:i.pK,IonItem:i.Ie,IonButton:i.YG,IonLabel:i.Q$,IonNote:i.uN},data(){return{userName:"",name:"",email:"",password:"",reconfirmPassword:"",phoneNumber:"",isUsernameValid:0,isNameValid:0,isEmailValid:0,isReconfirmPasswordValid:0,isPhoneValid:0,passwordErrors:Array(),disabledRegisterButton:1}},methods:{validateEmail(e){e.match("@")?(this.isEmailValid=1,this.registerButton()):this.isEmailValid=2},validateUsername(e){e.length<128?(this.isUsernameValid=1,this.registerButton()):this.isUsernameValid=2},validateName(e){e.length<128?(this.isNameValid=1,this.registerButton()):this.isNameValid=2},validatePassword(e){this.passwordErrors=Array(),e.length<8&&this.passwordErrors.push("Password length must be more than 8 characters");const t=e.toUpperCase();e==t&&this.passwordErrors.push("Password must have at least a lower letter");const n=e.toLowerCase();e==n&&this.passwordErrors.push("Password must have at least an upper letter"),this.registerButton()},validateReconfirmPassword(e){e==this.password?(this.isReconfirmPasswordValid=1,this.registerButton()):this.isReconfirmPasswordValid=2},validatePhone(e){8==e.length?(this.isPhoneValid=1,this.registerButton()):this.isPhoneValid=2},registerButton(){1==this.isPhoneValid&&1==this.isReconfirmPasswordValid&&1==this.isNameValid&&1==this.isEmailValid&&(this.disabledRegisterButton=0)},registerUser(){const e="http://127.0.0.1:5002/users";I.Z.post(e,{email:this.email,name:this.name,phoneNum:this.phoneNumber,username:this.userName,password:this.password}).then((e=>{console.log(e),this.$router.push({path:"/"})}))}}}),ae=(0,B.Z)(oe,[["render",ne],["__scopeId","data-v-532a6880"]]),le=ae,ie={class:"ion-text-center ion-padding-top"},se=(0,a.aZ)({__name:"viewProfile",setup(e){return(e,t)=>{const n=(0,a.up)("ion-label"),o=(0,a.up)("ion-input"),s=(0,a.up)("ion-item"),r=(0,a.up)("ion-list"),u=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(u,null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.Gu),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.sr),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.wd),{class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)("Edit Profile")])),_:1})])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.W2),{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(r,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Email")])),_:1}),(0,a.Wm)(o,{"clear-input":!0,placeholder:"Enter new email"})])),_:1}),(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Phone Number")])),_:1}),(0,a.Wm)(o,{"clear-on-edit":!0,placeholder:"Enter new phone number"})])),_:1}),(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Password")])),_:1}),(0,a.Wm)(o,{type:"password",placeholder:"Enter new password"})])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.W2),{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a._)("div",ie,[(0,a.Wm)((0,l.SU)(i.YG),{shape:"round",expand:"block"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Save ")])),_:1})])])),_:1})])),_:1})])),_:1})])),_:1})}}}),re=se,ue=re,de=(0,a._)("h2",null,"Business Analytics - Number of bookings per location",-1),me=[de];function pe(e,t,n,o,l,i){return(0,a.wg)(),(0,a.iD)("div",null,me)}const ce={name:"BarChart",components:{},data(){return{data:[["Carpark Name","No. of Bookings"]],options:{width:1e3,height:500}}},mounted(){this.getBookings()},methods:{getBookings(){let e=[];const t="http://127.0.0.1:5001/bookings";I.Z.get(t).then((t=>{e=t.data.data.bookings,console.log(e);for(let n=0;n<e.length;n++)console.log(e[n]["bookingLocation"]),this.data.push([e[n]["bookingLocation"],e[n]["currentCapacity"]]);return e})).catch((e=>{console.log(e.message)}))}}},fe=(0,B.Z)(ce,[["render",pe]]),we=fe,ge=(0,a._)("br",null,null,-1);function he(e,t,n,o,l,i){const s=(0,a.up)("ion-input"),r=(0,a.up)("ion-item"),u=(0,a.up)("ion-note"),d=(0,a.up)("ion-button"),m=(0,a.up)("ion-row"),p=(0,a.up)("ion-grid"),c=(0,a.up)("ion-content"),f=(0,a.up)("ion-modal"),w=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(w,{pageTitle:"Forgot Password",needToolBar:"y",needBackButton:"y",pageToGoBack:"/"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Enter the email associated with your account and we will send you a link to reset your account: "),(0,a.Wm)(r,{fill:"solid",ref:"item",class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,{clearInput:!0,placeholder:"Email",modelValue:e.email,"onUpdate:modelValue":t[0]||(t[0]=t=>e.email=t)},null,8,["modelValue"])])),_:1},512),(0,a.Wm)(r,{lines:"none"},{default:(0,a.w5)((()=>[2==e.isEmailValid?((0,a.wg)(),(0,a.j4)(u,{key:0,color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid email!")])),_:1})):(0,a.kq)("",!0),1==e.emailNoExist?((0,a.wg)(),(0,a.j4)(u,{key:1,color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your email does not exist in our database")])),_:1})):(0,a.kq)("",!0)])),_:1}),(0,a.Wm)(m,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(d,{shape:"round",onClick:t[1]||(t[1]=t=>e.forgotPassword(e.email))},{default:(0,a.w5)((()=>[(0,a.Uk)("Continue")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(f,{"is-open":e.successOpen,class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{class:"ion-padding-top ion-padding"},{default:(0,a.w5)((()=>[(0,a.Uk)(" An email to reset your password has been sent to the email. Do follow the instructions on the email. "),ge,(0,a.Uk)(" Bringing you back to Login page..... "),(0,a.Wm)(d,{shape:"round",onClick:t[2]||(t[2]=t=>{e.routeToLoginPage()}),expand:"block",size:"large"},{default:(0,a.w5)((()=>[(0,a.Uk)("Login")])),_:1})])),_:1})])),_:1},8,["is-open"])])),_:1})}const _e=(0,a.aZ)({components:{IonInput:i.pK,IonItem:i.Ie,IonModal:i.ki,IonContent:i.W2},data(){return{email:"",isEmailValid:0,successOpen:!1,emailNoExist:!1}},methods:{routeToLoginPage(){this.$router.push({path:"/"}).then((()=>{this.$router.go(0)})),location.reload()},setSuccessOpen(e){this.successOpen=e,this.$router.push({path:"/"}).then((()=>{this.$router.go(0)})),location.reload()},forgotPassword(e){if(e.match("@")){this.isEmailValid=1;const e=this.email.split("@")[0],t=this.email.split("@")[1],n="http://127.0.0.1:5002/checkUserExist?email="+e+"&account="+t;I.Z.get(n).then((e=>{const t=e.data.message;if("User exists"==t){this.successOpen=!0;setTimeout((()=>this.setSuccessOpen(!1)),2e3)}"User not found"==t&&(this.emailNoExist=!0)}))}else this.isEmailValid=2}}}),ke=(0,B.Z)(_e,[["render",he]]),be=ke,We=[{path:"/",component:C},{path:"/tabs/",component:f,children:[{path:"",redirect:"/tabs/home"},{path:"home",component:()=>n.e(422).then(n.bind(n,2422))},{path:"wallet",component:()=>n.e(753).then(n.bind(n,753))},{path:"plans",component:()=>n.e(162).then(n.bind(n,1162))},{path:"map",component:()=>n.e(860).then(n.bind(n,5860))},{path:"profile",component:()=>n.e(204).then(n.bind(n,7204))}]},{path:"/viewBooking",component:O},{path:"/nearbyme",component:ee},{path:"/buySubscription",component:Q},{path:"/register",component:le},{path:"/viewProfile",component:ue},{path:"/BarChart",component:we},{path:"/forgotPassword",component:be}],Ue=(0,d.p7)({history:(0,d.PO)("/"),routes:We}),ye=Ue;n(8851),n(1292),n(1633),n(1045),n(6187),n(2299),n(3423),n(4687),n(9147),n(6250);var ve=n(2903);const Ie=(0,o.ri)(u).use(i.oX).use(ye).use(ve.ZP,{load:{key:"AIzaSyAJXGx7T2ypt5Ew5-9SbDTWF9gqloQUJwI"}});Ie.component("base-layout",F),ye.isReady().then((()=>{Ie.mount("#app")}))},6319:(e,t,n)=>{"use strict";e.exports=n.p+"img/nets.28cc9b1e.png"}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,n),l.exports}n.m=e,(()=>{var e=[];n.O=(t,o,a,l)=>{if(!o){var i=1/0;for(d=0;d<e.length;d++){for(var[o,a,l]=e[d],s=!0,r=0;r<o.length;r++)(!1&l||i>=l)&&Object.keys(n.O).every((e=>n.O[e](o[r])))?o.splice(r--,1):(s=!1,l<i&&(i=l));if(s){e.splice(d--,1);var u=a();void 0!==u&&(t=u)}}return t}l=l||0;for(var d=e.length;d>0&&e[d-1][2]>l;d--)e[d]=e[d-1];e[d]=[o,a,l]}})(),(()=>{n.n=e=>{var t=e&&e.__esModule?()=>e["default"]:()=>e;return n.d(t,{a:t}),t}})(),(()=>{n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}})(),(()=>{n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,o)=>(n.f[o](e,t),t)),[]))})(),(()=>{n.u=e=>"js/"+e+"."+{78:"04bed2f4",162:"fff3fb9c",204:"1b8edfce",311:"ea995d76",338:"47a310ee",422:"51334035",576:"7593a8dd",753:"74027a13",775:"29f69a73",777:"668e7351",814:"7b70ed48",823:"b2cf86b7",860:"0f9f4fe7",990:"7c8b4718"}[e]+".js"})(),(()=>{n.miniCssF=e=>"css/"+e+"."+{162:"438b8af8",204:"f4a75965",753:"998fe919",860:"b296b77a"}[e]+".css"})(),(()=>{n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})(),(()=>{var e={},t="HUAT:";n.l=(o,a,l,i)=>{if(e[o])e[o].push(a);else{var s,r;if(void 0!==l)for(var u=document.getElementsByTagName("script"),d=0;d<u.length;d++){var m=u[d];if(m.getAttribute("src")==o||m.getAttribute("data-webpack")==t+l){s=m;break}}s||(r=!0,s=document.createElement("script"),s.charset="utf-8",s.timeout=120,n.nc&&s.setAttribute("nonce",n.nc),s.setAttribute("data-webpack",t+l),s.src=o),e[o]=[a];var p=(t,n)=>{s.onerror=s.onload=null,clearTimeout(c);var a=e[o];if(delete e[o],s.parentNode&&s.parentNode.removeChild(s),a&&a.forEach((e=>e(n))),t)return t(n)},c=setTimeout(p.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=p.bind(null,s.onerror),s.onload=p.bind(null,s.onload),r&&document.head.appendChild(s)}}})(),(()=>{n.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}})(),(()=>{n.p="/"})(),(()=>{if("undefined"!==typeof document){var e=(e,t,n,o,a)=>{var l=document.createElement("link");l.rel="stylesheet",l.type="text/css";var i=n=>{if(l.onerror=l.onload=null,"load"===n.type)o();else{var i=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.href||t,r=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");r.code="CSS_CHUNK_LOAD_FAILED",r.type=i,r.request=s,l.parentNode.removeChild(l),a(r)}};return l.onerror=l.onload=i,l.href=t,n?n.parentNode.insertBefore(l,n.nextSibling):document.head.appendChild(l),l},t=(e,t)=>{for(var n=document.getElementsByTagName("link"),o=0;o<n.length;o++){var a=n[o],l=a.getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(l===e||l===t))return a}var i=document.getElementsByTagName("style");for(o=0;o<i.length;o++){a=i[o],l=a.getAttribute("data-href");if(l===e||l===t)return a}},o=o=>new Promise(((a,l)=>{var i=n.miniCssF(o),s=n.p+i;if(t(i,s))return a();e(o,s,null,a,l)})),a={143:0};n.f.miniCss=(e,t)=>{var n={162:1,204:1,753:1,860:1};a[e]?t.push(a[e]):0!==a[e]&&n[e]&&t.push(a[e]=o(e).then((()=>{a[e]=0}),(t=>{throw delete a[e],t})))}}})(),(()=>{var e={143:0};n.f.j=(t,o)=>{var a=n.o(e,t)?e[t]:void 0;if(0!==a)if(a)o.push(a[2]);else{var l=new Promise(((n,o)=>a=e[t]=[n,o]));o.push(a[2]=l);var i=n.p+n.u(t),s=new Error,r=o=>{if(n.o(e,t)&&(a=e[t],0!==a&&(e[t]=void 0),a)){var l=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;s.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",s.name="ChunkLoadError",s.type=l,s.request=i,a[1](s)}};n.l(i,r,"chunk-"+t,t)}},n.O.j=t=>0===e[t];var t=(t,o)=>{var a,l,[i,s,r]=o,u=0;if(i.some((t=>0!==e[t]))){for(a in s)n.o(s,a)&&(n.m[a]=s[a]);if(r)var d=r(n)}for(t&&t(o);u<i.length;u++)l=i[u],n.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return n.O(d)},o=self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var o=n.O(void 0,[998],(()=>n(4671)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,