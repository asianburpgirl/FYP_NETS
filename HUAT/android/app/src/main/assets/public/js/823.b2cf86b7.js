"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[823],{6823:(e,t,o)=>{o.r(t),o.d(t,{startTapClick:()=>s});var n=o(6587);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */const s=e=>{let t,o,s,v=10*-u,f=0;const p=e.getBoolean("animated",!0)&&e.getBoolean("rippleEffect",!0),h=new WeakMap,m=e=>{v=(0,n.u)(e),b(e)},L=e=>{v=(0,n.u)(e),k(e)},w=e=>{if(2===e.button)return;const t=(0,n.u)(e)-u;v<t&&b(e)},E=e=>{const t=(0,n.u)(e)-u;v<t&&k(e)},T=()=>{s&&clearTimeout(s),s=void 0,t&&(y(!1),t=void 0)},b=e=>{t||g(i(e),e)},k=e=>{g(void 0,e)},g=(e,o)=>{if(e&&e===t)return;s&&clearTimeout(s),s=void 0;const{x:i,y:r}=(0,n.p)(o);if(t){if(h.has(t))throw new Error("internal error");t.classList.contains(c)||C(t,i,r),y(!0)}if(e){const t=h.get(e);t&&(clearTimeout(t),h.delete(e));const o=a(e)?0:d;e.classList.remove(c),s=setTimeout((()=>{C(e,i,r),s=void 0}),o)}t=e},C=(e,t,n)=>{if(f=Date.now(),e.classList.add(c),!p)return;const s=r(e);null!==s&&(R(),o=s.addRipple(t,n))},R=()=>{void 0!==o&&(o.then((e=>e())),o=void 0)},y=e=>{R();const o=t;if(!o)return;const n=l-Date.now()+f;if(e&&n>0&&!a(o)){const e=setTimeout((()=>{o.classList.remove(c),h.delete(o)}),l);h.set(o,e)}else o.classList.remove(c)},S=document;S.addEventListener("ionGestureCaptured",T),S.addEventListener("touchstart",m,!0),S.addEventListener("touchcancel",L,!0),S.addEventListener("touchend",L,!0),S.addEventListener("pointercancel",T,!0),S.addEventListener("mousedown",w,!0),S.addEventListener("mouseup",E,!0)},i=e=>{if(void 0===e.composedPath)return e.target.closest(".ion-activatable");{const t=e.composedPath();for(let e=0;e<t.length-2;e++){const o=t[e];if(!(o instanceof ShadowRoot)&&o.classList.contains("ion-activatable"))return o}}},a=e=>e.classList.contains("ion-activatable-instant"),r=e=>{if(e.shadowRoot){const t=e.shadowRoot.querySelector("ion-ripple-effect");if(t)return t}return e.querySelector("ion-ripple-effect")},c="ion-activated",d=200,l=200,u=2500}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxHQUFZLEdBQ2hEMkMsRUFBSUUsaUJBQWlCLFdBQVk3QyxHQUFZLEdBYTdDMkMsRUFBSUUsaUJBQWlCLGdCQUFpQnZDLEdBQWMsR0FDcERxQyxFQUFJRSxpQkFBaUIsWUFBYTNDLEdBQWEsR0FDL0N5QyxFQUFJRSxpQkFBaUIsVUFBV3hDLEdBQVcsRUFBSyxFQUc1Q00sRUFBd0JiLElBQzVCLFFBQXdCVSxJQUFwQlYsRUFBR2dELGFBa0JMLE9BQU9oRCxFQUFHaUQsT0FBT0MsUUFBUSxvQkFsQlEsQ0FTakMsTUFBTUMsRUFBT25ELEVBQUdnRCxlQUNoQixJQUFLLElBQUlJLEVBQUksRUFBR0EsRUFBSUQsRUFBS0UsT0FBUyxFQUFHRCxJQUFLLENBQ3hDLE1BQU10QyxFQUFLcUMsRUFBS0MsR0FDaEIsS0FBTXRDLGFBQWN3QyxhQUFleEMsRUFBR00sVUFBVUMsU0FBUyxtQkFDdkQsT0FBT1AsQ0FFWCxDQUNGLENBR0EsRUFFSWMsRUFBYWQsR0FDVkEsRUFBR00sVUFBVUMsU0FBUywyQkFFekJlLEVBQW1CdEIsSUFDdkIsR0FBSUEsRUFBR3lDLFdBQVksQ0FDakIsTUFBTUMsRUFBUzFDLEVBQUd5QyxXQUFXRSxjQUFjLHFCQUMzQyxHQUFJRCxFQUNGLE9BQU9BLENBRVgsQ0FDQSxPQUFPMUMsRUFBRzJDLGNBQWMsb0JBQW9CLEVBRXhDbkMsRUFBWSxnQkFDWk8sRUFBdUIsSUFDdkJjLEVBQXFCLElBQ3JCbEQsRUFBYSxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vSFVBVC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9jb21wb25lbnRzL2luZGV4MTAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHUgYXMgbm93LCBwIGFzIHBvaW50ZXJDb29yZCB9IGZyb20gJy4vaGVscGVycy5qcyc7XG5cbmNvbnN0IHN0YXJ0VGFwQ2xpY2sgPSAoY29uZmlnKSA9PiB7XG4gIGxldCBsYXN0VG91Y2ggPSAtTU9VU0VfV0FJVCAqIDEwO1xuICBsZXQgbGFzdEFjdGl2YXRlZCA9IDA7XG4gIGxldCBhY3RpdmF0YWJsZUVsZTtcbiAgbGV0IGFjdGl2ZVJpcHBsZTtcbiAgbGV0IGFjdGl2ZURlZmVyO1xuICBjb25zdCB1c2VSaXBwbGVFZmZlY3QgPSBjb25maWcuZ2V0Qm9vbGVhbignYW5pbWF0ZWQnLCB0cnVlKSAmJiBjb25maWcuZ2V0Qm9vbGVhbigncmlwcGxlRWZmZWN0JywgdHJ1ZSk7XG4gIGNvbnN0IGNsZWFyRGVmZXJzID0gbmV3IFdlYWtNYXAoKTtcbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGNvbnN0IG9uVG91Y2hTdGFydCA9IChldikgPT4ge1xuICAgIGxhc3RUb3VjaCA9IG5vdyhldik7XG4gICAgcG9pbnRlckRvd24oZXYpO1xuICB9O1xuICBjb25zdCBvblRvdWNoRW5kID0gKGV2KSA9PiB7XG4gICAgbGFzdFRvdWNoID0gbm93KGV2KTtcbiAgICBwb2ludGVyVXAoZXYpO1xuICB9O1xuICBjb25zdCBvbk1vdXNlRG93biA9IChldikgPT4ge1xuICAgIC8vIElnbm9yZSByaWdodCBjbGlja3NcbiAgICBpZiAoZXYuYnV0dG9uID09PSAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHQgPSBub3coZXYpIC0gTU9VU0VfV0FJVDtcbiAgICBpZiAobGFzdFRvdWNoIDwgdCkge1xuICAgICAgcG9pbnRlckRvd24oZXYpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Nb3VzZVVwID0gKGV2KSA9PiB7XG4gICAgY29uc3QgdCA9IG5vdyhldikgLSBNT1VTRV9XQUlUO1xuICAgIGlmIChsYXN0VG91Y2ggPCB0KSB7XG4gICAgICBwb2ludGVyVXAoZXYpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY2FuY2VsQWN0aXZlID0gKCkgPT4ge1xuICAgIGlmIChhY3RpdmVEZWZlcilcbiAgICAgIGNsZWFyVGltZW91dChhY3RpdmVEZWZlcik7XG4gICAgYWN0aXZlRGVmZXIgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGFjdGl2YXRhYmxlRWxlKSB7XG4gICAgICByZW1vdmVBY3RpdmF0ZWQoZmFsc2UpO1xuICAgICAgYWN0aXZhdGFibGVFbGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuICBjb25zdCBwb2ludGVyRG93biA9IChldikgPT4ge1xuICAgIGlmIChhY3RpdmF0YWJsZUVsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRBY3RpdmF0ZWRFbGVtZW50KGdldEFjdGl2YXRhYmxlVGFyZ2V0KGV2KSwgZXYpO1xuICB9O1xuICBjb25zdCBwb2ludGVyVXAgPSAoZXYpID0+IHtcbiAgICBzZXRBY3RpdmF0ZWRFbGVtZW50KHVuZGVmaW5lZCwgZXYpO1xuICB9O1xuICBjb25zdCBzZXRBY3RpdmF0ZWRFbGVtZW50ID0gKGVsLCBldikgPT4ge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgICBpZiAoZWwgJiYgZWwgPT09IGFjdGl2YXRhYmxlRWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhY3RpdmVEZWZlcilcbiAgICAgIGNsZWFyVGltZW91dChhY3RpdmVEZWZlcik7XG4gICAgYWN0aXZlRGVmZXIgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBwb2ludGVyQ29vcmQoZXYpO1xuICAgIC8vIGRlYWN0aXZhdGUgc2VsZWN0ZWRcbiAgICBpZiAoYWN0aXZhdGFibGVFbGUpIHtcbiAgICAgIGlmIChjbGVhckRlZmVycy5oYXMoYWN0aXZhdGFibGVFbGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW50ZXJuYWwgZXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZhdGFibGVFbGUuY2xhc3NMaXN0LmNvbnRhaW5zKEFDVElWQVRFRCkpIHtcbiAgICAgICAgYWRkQWN0aXZhdGVkKGFjdGl2YXRhYmxlRWxlLCB4LCB5KTtcbiAgICAgIH1cbiAgICAgIHJlbW92ZUFjdGl2YXRlZCh0cnVlKTtcbiAgICB9XG4gICAgLy8gYWN0aXZhdGVcbiAgICBpZiAoZWwpIHtcbiAgICAgIGNvbnN0IGRlZmVySWQgPSBjbGVhckRlZmVycy5nZXQoZWwpO1xuICAgICAgaWYgKGRlZmVySWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xuICAgICAgICBjbGVhckRlZmVycy5kZWxldGUoZWwpO1xuICAgICAgfVxuICAgICAgY29uc3QgZGVsYXkgPSBpc0luc3RhbnQoZWwpID8gMCA6IEFERF9BQ1RJVkFURURfREVGRVJTO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkFURUQpO1xuICAgICAgYWN0aXZlRGVmZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgYWRkQWN0aXZhdGVkKGVsLCB4LCB5KTtcbiAgICAgICAgYWN0aXZlRGVmZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfVxuICAgIGFjdGl2YXRhYmxlRWxlID0gZWw7XG4gIH07XG4gIGNvbnN0IGFkZEFjdGl2YXRlZCA9IChlbCwgeCwgeSkgPT4ge1xuICAgIGxhc3RBY3RpdmF0ZWQgPSBEYXRlLm5vdygpO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoQUNUSVZBVEVEKTtcbiAgICBpZiAoIXVzZVJpcHBsZUVmZmVjdClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByaXBwbGVFZmZlY3QgPSBnZXRSaXBwbGVFZmZlY3QoZWwpO1xuICAgIGlmIChyaXBwbGVFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZVJpcHBsZSgpO1xuICAgICAgYWN0aXZlUmlwcGxlID0gcmlwcGxlRWZmZWN0LmFkZFJpcHBsZSh4LCB5KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZVJpcHBsZSA9ICgpID0+IHtcbiAgICBpZiAoYWN0aXZlUmlwcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjdGl2ZVJpcHBsZS50aGVuKChyZW1vdmUpID0+IHJlbW92ZSgpKTtcbiAgICAgIGFjdGl2ZVJpcHBsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZUFjdGl2YXRlZCA9IChzbW9vdGgpID0+IHtcbiAgICByZW1vdmVSaXBwbGUoKTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmF0YWJsZUVsZTtcbiAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aW1lID0gQ0xFQVJfU1RBVEVfREVGRVJTIC0gRGF0ZS5ub3coKSArIGxhc3RBY3RpdmF0ZWQ7XG4gICAgaWYgKHNtb290aCAmJiB0aW1lID4gMCAmJiAhaXNJbnN0YW50KGFjdGl2ZSkpIHtcbiAgICAgIGNvbnN0IGRlZmVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZBVEVEKTtcbiAgICAgICAgY2xlYXJEZWZlcnMuZGVsZXRlKGFjdGl2ZSk7XG4gICAgICB9LCBDTEVBUl9TVEFURV9ERUZFUlMpO1xuICAgICAgY2xlYXJEZWZlcnMuc2V0KGFjdGl2ZSwgZGVmZXJJZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZBVEVEKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50O1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignaW9uR2VzdHVyZUNhcHR1cmVkJywgY2FuY2VsQWN0aXZlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBvblRvdWNoRW5kLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgdHJ1ZSk7XG4gIC8qKlxuICAgKiBUYXAgY2xpY2sgZWZmZWN0cyBzdWNoIGFzIHRoZSByaXBwbGUgZWZmZWN0IHNob3VsZFxuICAgKiBub3QgaGFwcGVuIHdoZW4gc2Nyb2xsaW5nLiBGb3IgZXhhbXBsZSwgaWYgYSB1c2VyIHNjcm9sbHNcbiAgICogdGhlIHBhZ2UgYnV0IGFsc28gaGFwcGVucyB0byBkbyBhIHRvdWNoc3RhcnQgb24gYSBidXR0b25cbiAgICogYXMgcGFydCBvZiB0aGUgc2Nyb2xsLCB0aGUgcmlwcGxlIGVmZmVjdCBzaG91bGQgbm90XG4gICAqIGJlIGRpc3BhdGNoZWQuIFRoZSByaXBwbGUgZWZmZWN0IHNob3VsZCBvbmx5IGhhcHBlblxuICAgKiBpZiB0aGUgYnV0dG9uIGlzIGFjdGl2YXRlZCBhbmQgdGhlIHBhZ2UgaXMgbm90IHNjcm9sbGluZy5cbiAgICpcbiAgICogcG9pbnRlcmNhbmNlbCBpcyBkaXNwYXRjaGVkIG9uIGEgZ2VzdHVyZSB3aGVuIHNjcm9sbGluZ1xuICAgKiBzdGFydHMsIHNvIHRoaXMgbGV0cyB1cyBhdm9pZCBoYXZpbmcgdG8gbGlzdGVuIGZvclxuICAgKiBpb24tY29udGVudCdzIHNjcm9sbCBldmVudHMuXG4gICAqL1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmNhbmNlbCcsIGNhbmNlbEFjdGl2ZSwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZVVwLCB0cnVlKTtcbn07XG4vLyBUT0RPKEZXLTI4MzIpOiB0eXBlXG5jb25zdCBnZXRBY3RpdmF0YWJsZVRhcmdldCA9IChldikgPT4ge1xuICBpZiAoZXYuY29tcG9zZWRQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAvKipcbiAgICAgKiBjb21wb3NlZFBhdGggcmV0dXJucyBFdmVudFRhcmdldFtdLiBIb3dldmVyLFxuICAgICAqIG9iamVjdHMgb3RoZXIgdGhhbiBFbGVtZW50IGNhbiBiZSB0YXJnZXRzIHRvby5cbiAgICAgKiBGb3IgZXhhbXBsZSwgQXVkaW9Db250ZXh0IGNhbiBiZSBhIHRhcmdldC4gSW4gdGhpc1xuICAgICAqIGNhc2UsIHdlIGtub3cgdGhhdCB0aGUgZXZlbnQgaXMgYSBVSUV2ZW50IHNvIHdlXG4gICAgICogY2FuIGFzc3VtZSB0aGF0IHRoZSBwYXRoIHdpbGwgY29udGFpbiBlaXRoZXIgRWxlbWVudFxuICAgICAqIG9yIFNoYWRvd1Jvb3QuXG4gICAgICovXG4gICAgY29uc3QgcGF0aCA9IGV2LmNvbXBvc2VkUGF0aCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsID0gcGF0aFtpXTtcbiAgICAgIGlmICghKGVsIGluc3RhbmNlb2YgU2hhZG93Um9vdCkgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpb24tYWN0aXZhdGFibGUnKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBldi50YXJnZXQuY2xvc2VzdCgnLmlvbi1hY3RpdmF0YWJsZScpO1xuICB9XG59O1xuY29uc3QgaXNJbnN0YW50ID0gKGVsKSA9PiB7XG4gIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2lvbi1hY3RpdmF0YWJsZS1pbnN0YW50Jyk7XG59O1xuY29uc3QgZ2V0UmlwcGxlRWZmZWN0ID0gKGVsKSA9PiB7XG4gIGlmIChlbC5zaGFkb3dSb290KSB7XG4gICAgY29uc3QgcmlwcGxlID0gZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdpb24tcmlwcGxlLWVmZmVjdCcpO1xuICAgIGlmIChyaXBwbGUpIHtcbiAgICAgIHJldHVybiByaXBwbGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbC5xdWVyeVNlbGVjdG9yKCdpb24tcmlwcGxlLWVmZmVjdCcpO1xufTtcbmNvbnN0IEFDVElWQVRFRCA9ICdpb24tYWN0aXZhdGVkJztcbmNvbnN0IEFERF9BQ1RJVkFURURfREVGRVJTID0gMjAwO1xuY29uc3QgQ0xFQVJfU1RBVEVfREVGRVJTID0gMjAwO1xuY29uc3QgTU9VU0VfV0FJVCA9IDI1MDA7XG5cbmV4cG9ydCB7IHN0YXJ0VGFwQ2xpY2sgfTtcbiJdLCJuYW1lcyI6WyJzdGFydFRhcENsaWNrIiwiY29uZmlnIiwiYWN0aXZhdGFibGVFbGUiLCJhY3RpdmVSaXBwbGUiLCJhY3RpdmVEZWZlciIsImxhc3RUb3VjaCIsIk1PVVNFX1dBSVQiLCJsYXN0QWN0aXZhdGVkIiwidXNlUmlwcGxlRWZmZWN0IiwiZ2V0Qm9vbGVhbiIsImNsZWFyRGVmZXJzIiwiV2Vha01hcCIsIm9uVG91Y2hTdGFydCIsImV2IiwicG9pbnRlckRvd24iLCJvblRvdWNoRW5kIiwicG9pbnRlclVwIiwib25Nb3VzZURvd24iLCJidXR0b24iLCJ0Iiwib25Nb3VzZVVwIiwiY2FuY2VsQWN0aXZlIiwiY2xlYXJUaW1lb3V0IiwidW5kZWZpbmVkIiwicmVtb3ZlQWN0aXZhdGVkIiwic2V0QWN0aXZhdGVkRWxlbWVudCIsImdldEFjdGl2YXRhYmxlVGFyZ2V0IiwiZWwiLCJ4IiwieSIsInAiLCJoYXMiLCJFcnJvciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiQUNUSVZBVEVEIiwiYWRkQWN0aXZhdGVkIiwiZGVmZXJJZCIsImdldCIsImRlbGV0ZSIsImRlbGF5IiwiaXNJbnN0YW50IiwiQUREX0FDVElWQVRFRF9ERUZFUlMiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwiRGF0ZSIsIm5vdyIsImFkZCIsInJpcHBsZUVmZmVjdCIsImdldFJpcHBsZUVmZmVjdCIsInJlbW92ZVJpcHBsZSIsImFkZFJpcHBsZSIsInRoZW4iLCJzbW9vdGgiLCJhY3RpdmUiLCJ0aW1lIiwiQ0xFQVJfU1RBVEVfREVGRVJTIiwic2V0IiwiZG9jIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY29tcG9zZWRQYXRoIiwidGFyZ2V0IiwiY2xvc2VzdCIsInBhdGgiLCJpIiwibGVuZ3RoIiwiU2hhZG93Um9vdCIsInNoYWRvd1Jvb3QiLCJyaXBwbGUiLCJxdWVyeVNlbGVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==