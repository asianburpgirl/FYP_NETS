"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[860],{9895:(e,t,n)=>{n.d(t,{Uw:()=>h,dV:()=>u,fo:()=>m});
/*! Capacitor: https://capacitorjs.com/ - MIT License */
const i=e=>{const t=new Map;t.set("web",{name:"web"});const n=e.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:t},i=(e,t)=>{n.platforms.set(e,t)},o=e=>{n.platforms.has(e)&&(n.currentPlatform=n.platforms.get(e))};return n.addPlatform=i,n.setPlatform=o,n},o=e=>e.CapacitorPlatforms=i(e),a=o("undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof n.g?n.g:{});a.addPlatform,a.setPlatform;var s;(function(e){e["Unimplemented"]="UNIMPLEMENTED",e["Unavailable"]="UNAVAILABLE"})(s||(s={}));class r extends Error{constructor(e,t,n){super(e),this.message=e,this.code=t,this.data=n}}const l=e=>{var t,n;return(null===e||void 0===e?void 0:e.androidBridge)?"android":(null===(n=null===(t=null===e||void 0===e?void 0:e.webkit)||void 0===t?void 0:t.messageHandlers)||void 0===n?void 0:n.bridge)?"ios":"web"},d=e=>{var t,n,i,o,a;const d=e.CapacitorCustomPlatform||null,c=e.Capacitor||{},u=c.Plugins=c.Plugins||{},m=e.CapacitorPlatforms,h=()=>null!==d?d.name:l(e),p=(null===(t=null===m||void 0===m?void 0:m.currentPlatform)||void 0===t?void 0:t.getPlatform)||h,w=()=>"web"!==p(),g=(null===(n=null===m||void 0===m?void 0:m.currentPlatform)||void 0===n?void 0:n.isNativePlatform)||w,k=e=>{const t=b.get(e);return!!(null===t||void 0===t?void 0:t.platforms.has(p()))||!!L(e)},f=(null===(i=null===m||void 0===m?void 0:m.currentPlatform)||void 0===i?void 0:i.isPluginAvailable)||k,v=e=>{var t;return null===(t=c.PluginHeaders)||void 0===t?void 0:t.find((t=>t.name===e))},L=(null===(o=null===m||void 0===m?void 0:m.currentPlatform)||void 0===o?void 0:o.getPluginHeader)||v,C=t=>e.console.error(t),y=(e,t,n)=>Promise.reject(`${n} does not have an implementation of "${t}".`),b=new Map,M=(e,t={})=>{const n=b.get(e);if(n)return console.warn(`Capacitor plugin "${e}" already registered. Cannot register plugins twice.`),n.proxy;const i=p(),o=L(e);let a;const l=async()=>(!a&&i in t?a=a="function"===typeof t[i]?await t[i]():t[i]:null!==d&&!a&&"web"in t&&(a=a="function"===typeof t["web"]?await t["web"]():t["web"]),a),m=(t,n)=>{var a,l;if(!o){if(t)return null===(l=t[n])||void 0===l?void 0:l.bind(t);throw new r(`"${e}" plugin is not implemented on ${i}`,s.Unimplemented)}{const i=null===o||void 0===o?void 0:o.methods.find((e=>n===e.name));if(i)return"promise"===i.rtype?t=>c.nativePromise(e,n.toString(),t):(t,i)=>c.nativeCallback(e,n.toString(),t,i);if(t)return null===(a=t[n])||void 0===a?void 0:a.bind(t)}},h=t=>{let n;const o=(...o)=>{const a=l().then((a=>{const l=m(a,t);if(l){const e=l(...o);return n=null===e||void 0===e?void 0:e.remove,e}throw new r(`"${e}.${t}()" is not implemented on ${i}`,s.Unimplemented)}));return"addListener"===t&&(a.remove=async()=>n()),a};return o.toString=()=>`${t.toString()}() { [capacitor code] }`,Object.defineProperty(o,"name",{value:t,writable:!1,configurable:!1}),o},w=h("addListener"),g=h("removeListener"),k=(e,t)=>{const n=w({eventName:e},t),i=async()=>{const i=await n;g({eventName:e,callbackId:i},t)},o=new Promise((e=>n.then((()=>e({remove:i})))));return o.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await i()},o},f=new Proxy({},{get(e,t){switch(t){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return o?k:w;case"removeListener":return g;default:return h(t)}}});return u[e]=f,b.set(e,{name:e,proxy:f,platforms:new Set([...Object.keys(t),...o?[i]:[]])}),f},W=(null===(a=null===m||void 0===m?void 0:m.currentPlatform)||void 0===a?void 0:a.registerPlugin)||M;return c.convertFileSrc||(c.convertFileSrc=e=>e),c.getPlatform=p,c.handleError=C,c.isNativePlatform=g,c.isPluginAvailable=f,c.pluginMethodNoop=y,c.registerPlugin=W,c.Exception=r,c.DEBUG=!!c.DEBUG,c.isLoggingEnabled=!!c.isLoggingEnabled,c.platform=c.getPlatform(),c.isNative=c.isNativePlatform(),c},c=e=>e.Capacitor=d(e),u=c("undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof n.g?n.g:{}),m=u.registerPlugin;u.Plugins;class h{constructor(e){this.listeners={},this.windowListeners={},e&&(console.warn(`Capacitor WebPlugin "${e.name}" config object was deprecated in v3 and will be removed in v4.`),this.config=e)}addListener(e,t){const n=this.listeners[e];n||(this.listeners[e]=[]),this.listeners[e].push(t);const i=this.windowListeners[e];i&&!i.registered&&this.addWindowListener(i);const o=async()=>this.removeListener(e,t),a=Promise.resolve({remove:o});return Object.defineProperty(a,"remove",{value:async()=>{console.warn("Using addListener() without 'await' is deprecated."),await o()}}),a}async removeAllListeners(){this.listeners={};for(const e in this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}}notifyListeners(e,t){const n=this.listeners[e];n&&n.forEach((e=>e(t)))}hasListeners(e){return!!this.listeners[e].length}registerWindowListener(e,t){this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:e=>{this.notifyListeners(t,e)}}}unimplemented(e="not implemented"){return new u.Exception(e,s.Unimplemented)}unavailable(e="not available"){return new u.Exception(e,s.Unavailable)}async removeListener(e,t){const n=this.listeners[e];if(!n)return;const i=n.indexOf(t);this.listeners[e].splice(i,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}addWindowListener(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0}removeWindowListener(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)}}const p=e=>encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),w=e=>e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent);class g extends h{async getCookies(){const e=document.cookie,t={};return e.split(";").forEach((e=>{if(e.length<=0)return;let[n,i]=e.replace(/=/,"CAP_COOKIE").split("CAP_COOKIE");n=w(n).trim(),i=w(i).trim(),t[n]=i})),t}async setCookie(e){try{const t=p(e.key),n=p(e.value),i=`; expires=${(e.expires||"").replace("expires=","")}`,o=(e.path||"/").replace("path=",""),a=null!=e.url&&e.url.length>0?`domain=${e.url}`:"";document.cookie=`${t}=${n||""}${i}; path=${o}; ${a};`}catch(t){return Promise.reject(t)}}async deleteCookie(e){try{document.cookie=`${e.key}=; Max-Age=0`}catch(t){return Promise.reject(t)}}async clearCookies(){try{const e=document.cookie.split(";")||[];for(const t of e)document.cookie=t.replace(/^ +/,"").replace(/=.*/,`=;expires=${(new Date).toUTCString()};path=/`)}catch(e){return Promise.reject(e)}}async clearAllCookies(){try{await this.clearCookies()}catch(e){return Promise.reject(e)}}}m("CapacitorCookies",{web:()=>new g});const k=async e=>new Promise(((t,n)=>{const i=new FileReader;i.onload=()=>{const e=i.result;t(e.indexOf(",")>=0?e.split(",")[1]:e)},i.onerror=e=>n(e),i.readAsDataURL(e)})),f=(e={})=>{const t=Object.keys(e),n=Object.keys(e).map((e=>e.toLocaleLowerCase())),i=n.reduce(((n,i,o)=>(n[i]=e[t[o]],n)),{});return i},v=(e,t=!0)=>{if(!e)return null;const n=Object.entries(e).reduce(((e,n)=>{const[i,o]=n;let a,s;return Array.isArray(o)?(s="",o.forEach((e=>{a=t?encodeURIComponent(e):e,s+=`${i}=${a}&`})),s.slice(0,-1)):(a=t?encodeURIComponent(o):o,s=`${i}=${a}`),`${e}&${s}`}),"");return n.substr(1)},L=(e,t={})=>{const n=Object.assign({method:e.method||"GET",headers:e.headers},t),i=f(e.headers),o=i["content-type"]||"";if("string"===typeof e.data)n.body=e.data;else if(o.includes("application/x-www-form-urlencoded")){const t=new URLSearchParams;for(const[n,i]of Object.entries(e.data||{}))t.set(n,i);n.body=t.toString()}else if(o.includes("multipart/form-data")){const t=new FormData;if(e.data instanceof FormData)e.data.forEach(((e,n)=>{t.append(n,e)}));else for(const n of Object.keys(e.data))t.append(n,e.data[n]);n.body=t;const i=new Headers(n.headers);i.delete("content-type"),n.headers=i}else(o.includes("application/json")||"object"===typeof e.data)&&(n.body=JSON.stringify(e.data));return n};class C extends h{async request(e){const t=L(e,e.webFetchExtra),n=v(e.params,e.shouldEncodeUrlParams),i=n?`${e.url}?${n}`:e.url,o=await fetch(i,t),a=o.headers.get("content-type")||"";let s,r,{responseType:l="text"}=o.ok?e:{};switch(a.includes("application/json")&&(l="json"),l){case"arraybuffer":case"blob":r=await o.blob(),s=await k(r);break;case"json":s=await o.json();break;case"document":case"text":default:s=await o.text()}const d={};return o.headers.forEach(((e,t)=>{d[t]=e})),{data:s,headers:d,status:o.status,url:o.url}}async get(e){return this.request(Object.assign(Object.assign({},e),{method:"GET"}))}async post(e){return this.request(Object.assign(Object.assign({},e),{method:"POST"}))}async put(e){return this.request(Object.assign(Object.assign({},e),{method:"PUT"}))}async patch(e){return this.request(Object.assign(Object.assign({},e),{method:"PATCH"}))}async delete(e){return this.request(Object.assign(Object.assign({},e),{method:"DELETE"}))}}m("CapacitorHttp",{web:()=>new C})},5860:(e,t,n)=>{n.r(t),n.d(t,{default:()=>C});var i=n(6252),o=n(3577);const a=(0,i._)("br",null,null,-1),s=(0,i._)("br",null,null,-1),r=(0,i._)("br",null,null,-1),l=(0,i._)("br",null,null,-1);function d(e,t,n,d,c,u){const m=(0,i.up)("ion-title"),h=(0,i.up)("ion-toolbar"),p=(0,i.up)("ion-header"),w=(0,i.up)("capacitor-google-map"),g=(0,i.up)("ion-icon"),k=(0,i.up)("ion-button"),f=(0,i.up)("ion-buttons"),v=(0,i.up)("ion-content"),L=(0,i.up)("ion-modal"),C=(0,i.up)("ion-label"),y=(0,i.up)("ion-datetime"),b=(0,i.up)("ion-item"),M=(0,i.up)("ion-row"),W=(0,i.up)("ion-select-option"),I=(0,i.up)("ion-select"),P=(0,i.up)("ion-list"),E=(0,i.up)("ion-page");return(0,i.wg)(),(0,i.j4)(E,{class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i.Wm)(p,null,{default:(0,i.w5)((()=>[(0,i.Wm)(h,null,{default:(0,i.w5)((()=>[(0,i.Wm)(m,null,{default:(0,i.w5)((()=>[(0,i.Uk)("Map")])),_:1})])),_:1})])),_:1}),(0,i.Wm)(v,{fullscreen:!0},{default:(0,i.w5)((()=>[(0,i.Uk)(" Distance from your current location: "+(0,o.zw)(e.distanceToLocation_km)+" ",1),a,(0,i.Uk)(" Time taken from your current location: "+(0,o.zw)(e.timeToLocation_mins)+" ",1),(0,i.Wm)(w,{id:"map"}),(0,i.Wm)(L,{"is-open":e.choiceOpen,class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i.Wm)(p,null,{default:(0,i.w5)((()=>[(0,i.Wm)(h,null,{default:(0,i.w5)((()=>[(0,i.Wm)(m,{class:"ion-text-center"},{default:(0,i.w5)((()=>[(0,i.Uk)((0,o.zw)(e.clickedMarkerName),1)])),_:1}),(0,i.Wm)(f,{slot:"start"},{default:(0,i.w5)((()=>[(0,i.Wm)(k,{onClick:t[0]||(t[0]=t=>e.setChoiceOpen(!1))},{default:(0,i.w5)((()=>[(0,i.Wm)(g,{icon:e.arrowBackOutline},null,8,["icon"])])),_:1})])),_:1})])),_:1})])),_:1}),(0,i.Wm)(v,{class:"ion-padding-top ion-padding"},{default:(0,i.w5)((()=>[(0,i._)("h2",null,[(0,i.Uk)(" Address: "),(0,i._)("u",null,(0,o.zw)(e.clickedMarkerAddress),1)]),(0,i.Wm)(k,{shape:"round",onClick:t[1]||(t[1]=t=>{e.setBookingOpen(!0),e.setChoiceOpen(!1)}),expand:"block",size:"large"},{default:(0,i.w5)((()=>[(0,i.Uk)("Book")])),_:1}),(0,i.Wm)(k,{shape:"round",onClick:t[2]||(t[2]=t=>{e.setSubscriptionOpen(!0),e.setChoiceOpen(!1)}),expand:"block",size:"large"},{default:(0,i.w5)((()=>[(0,i.Uk)("Subscription")])),_:1})])),_:1})])),_:1},8,["is-open"]),(0,i.Wm)(L,{"is-open":e.bookingIsOpen,class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i.Wm)(p,null,{default:(0,i.w5)((()=>[(0,i.Wm)(h,null,{default:(0,i.w5)((()=>[(0,i.Wm)(m,null,{default:(0,i.w5)((()=>[(0,i.Uk)(" Booking at "+(0,o.zw)(e.clickedMarkerName),1)])),_:1}),(0,i.Wm)(f,{slot:"start"},{default:(0,i.w5)((()=>[(0,i.Wm)(k,{onClick:t[3]||(t[3]=t=>{e.setBookingOpen(!1),e.setChoiceOpen(!0)})},{default:(0,i.w5)((()=>[(0,i.Wm)(g,{icon:e.arrowBackOutline},null,8,["icon"])])),_:1})])),_:1}),(0,i.Wm)(g,{name:"arrow-back"})])),_:1})])),_:1}),(0,i.Wm)(v,{class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Wm)(g,{name:"arrow-back"}),(0,i.Uk)(" Distance from your current location: "+(0,o.zw)(e.distanceToLocation_km)+" km ",1),s,r,(0,i.Uk)(" Time taken from your current location: "+(0,o.zw)(e.timeToLocation_mins)+" mins ",1),l,(0,i.Wm)(C,{position:"stacked"},{default:(0,i.w5)((()=>[(0,i.Uk)("Start Time:")])),_:1}),(0,i.Wm)(y,{modelValue:e.startTime,"onUpdate:modelValue":t[4]||(t[4]=t=>e.startTime=t)},null,8,["modelValue"]),(0,i.Wm)(C,{position:"stacked"},{default:(0,i.w5)((()=>[(0,i.Uk)("End Time:")])),_:1}),(0,i.Wm)(y,{modelValue:e.endTime,"onUpdate:modelValue":t[5]||(t[5]=t=>e.endTime=t)},null,8,["modelValue"])])),_:1}),(0,i.Wm)(M,{class:"ion-padding-top ion-justify-content-center ion-padding-bottom addPaddingBottom"},{default:(0,i.w5)((()=>[(0,i.Wm)(k,{shape:"round",onClick:t[6]||(t[6]=t=>e.makeBoooking())},{default:(0,i.w5)((()=>[(0,i.Uk)("Book")])),_:1})])),_:1})])),_:1})])),_:1},8,["is-open"]),(0,i.Wm)(L,{"is-open":e.subscriptionIsOpen,class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i.Wm)(p,null,{default:(0,i.w5)((()=>[(0,i.Wm)(h,null,{default:(0,i.w5)((()=>[(0,i.Wm)(m,null,{default:(0,i.w5)((()=>[(0,i.Uk)("Subsciption plan ")])),_:1}),(0,i.Wm)(f,{slot:"start"},{default:(0,i.w5)((()=>[(0,i.Wm)(k,{onClick:t[7]||(t[7]=t=>{e.setSubscriptionOpen(!1),e.setChoiceOpen(!0)})},{default:(0,i.w5)((()=>[(0,i.Wm)(g,{icon:e.arrowBackOutline},null,8,["icon"])])),_:1})])),_:1})])),_:1})])),_:1}),(0,i.Wm)(v,{class:"ion-padding"},{default:(0,i.w5)((()=>[(0,i._)("h1",null,(0,o.zw)(e.clickedMarkerName),1),(0,i._)("h3",null,[(0,i.Uk)(" Address: "),(0,i._)("u",null,(0,o.zw)(e.clickedMarkerAddress)+" test",1)]),(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Wm)(C,null,{default:(0,i.w5)((()=>[(0,i.Uk)("Subscription Type")])),_:1}),(0,i.Wm)(I,{placeholder:"Type"},{default:(0,i.w5)((()=>[(0,i.Wm)(W,{value:"seasonal"},{default:(0,i.w5)((()=>[(0,i.Uk)("Seasonal")])),_:1}),(0,i.Wm)(W,{value:"complimentary"},{default:(0,i.w5)((()=>[(0,i.Uk)("Complimentary")])),_:1}),(0,i.Wm)(W,{value:"hourly"},{default:(0,i.w5)((()=>[(0,i.Uk)("Hourly")])),_:1})])),_:1})])),_:1}),(0,i.Wm)(P,null,{default:(0,i.w5)((()=>[(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Uk)(" Weekday Peak: $12/month ")])),_:1}),(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Uk)(" Weekday Non-Peak: $10/month ")])),_:1}),(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Uk)(" Weekend Peak: $20/month ")])),_:1}),(0,i.Wm)(b,null,{default:(0,i.w5)((()=>[(0,i.Uk)(" Weekend Non-Peak: $15/month ")])),_:1})])),_:1}),(0,i.Wm)(M,{class:"ion-padding-top ion-justify-content-center ion-padding-bottom addPaddingBottom"},{default:(0,i.w5)((()=>[(0,i.Wm)(k,{shape:"round",onClick:t[8]||(t[8]=t=>e.buySubscription())},{default:(0,i.w5)((()=>[(0,i.Uk)("Buy Subscription")])),_:1})])),_:1})])),_:1})])),_:1},8,["is-open"])])),_:1})])),_:1})}n(7658);var c,u=n(8945),m=n(41);(function(e){e["Normal"]="Normal",e["Hybrid"]="Hybrid",e["Satellite"]="Satellite",e["Terrain"]="Terrain",e["None"]="None"})(c||(c={}));var h=n(9895);const p=(0,h.fo)("CapacitorGoogleMaps",{web:()=>n.e(777).then(n.bind(n,4777)).then((e=>new e.CapacitorGoogleMapsWeb))});p.addListener("isMapInFocus",(e=>{var t;const n=e.x,i=e.y,o=document.elementFromPoint(n,i),a=null===(t=null===o||void 0===o?void 0:o.dataset)||void 0===t?void 0:t.internalId,s=a===e.mapId;p.dispatchMapEvent({id:e.mapId,focus:s})}));class w extends HTMLElement{constructor(){super()}connectedCallback(){if("ios"==h.dV.getPlatform()){this.style.overflow="scroll",this.style["-webkit-overflow-scrolling"]="touch";const e=document.createElement("div");e.style.height="200%",this.appendChild(e)}}}customElements.define("capacitor-google-map",w);class g{constructor(e){this.element=null,this.handleScrollEvent=()=>this.updateMapBounds(),this.id=e}static async create(e,t){const n=new g(e.id);if(!e.element)throw new Error("container element is required");void 0===e.config.androidLiteMode&&(e.config.androidLiteMode=!1),n.element=e.element,n.element.dataset.internalId=e.id;const i=await g.getElementBounds(e.element);if(e.config.width=i.width,e.config.height=i.height,e.config.x=i.x,e.config.y=i.y,e.config.devicePixelRatio=window.devicePixelRatio,"android"==h.dV.getPlatform()&&n.initScrolling(),h.dV.isNativePlatform()&&(e.element={}),await p.create(e),t){const e=await p.addListener("onMapReady",(i=>{i.mapId==n.id&&(t(i),e.remove())}))}return n}static async getElementBounds(e){return new Promise((t=>{let n=e.getBoundingClientRect();if(0==n.width){let i=0;const o=setInterval((function(){0==n.width&&i<30?(n=e.getBoundingClientRect(),i++):(30==i&&console.warn("Map size could not be determined"),clearInterval(o),t(n))}),100)}else t(n)}))}async enableClustering(){return p.enableClustering({id:this.id})}async disableClustering(){return p.disableClustering({id:this.id})}async addMarker(e){const t=await p.addMarker({id:this.id,marker:e});return t.id}async addMarkers(e){const t=await p.addMarkers({id:this.id,markers:e});return t.ids}async removeMarker(e){return p.removeMarker({id:this.id,markerId:e})}async removeMarkers(e){return p.removeMarkers({id:this.id,markerIds:e})}async destroy(){return"android"==h.dV.getPlatform()&&this.disableScrolling(),this.removeAllMapListeners(),p.destroy({id:this.id})}async setCamera(e){return p.setCamera({id:this.id,config:e})}async setMapType(e){return p.setMapType({id:this.id,mapType:e})}async enableIndoorMaps(e){return p.enableIndoorMaps({id:this.id,enabled:e})}async enableTrafficLayer(e){return p.enableTrafficLayer({id:this.id,enabled:e})}async enableAccessibilityElements(e){return p.enableAccessibilityElements({id:this.id,enabled:e})}async enableCurrentLocation(e){return p.enableCurrentLocation({id:this.id,enabled:e})}async setPadding(e){return p.setPadding({id:this.id,padding:e})}async getMapBounds(){return p.getMapBounds({id:this.id})}initScrolling(){const e=document.getElementsByTagName("ion-content");for(let t=0;t<e.length;t++)e[t].scrollEvents=!0;window.addEventListener("ionScroll",this.handleScrollEvent),window.addEventListener("scroll",this.handleScrollEvent),window.addEventListener("resize",this.handleScrollEvent),screen.orientation?screen.orientation.addEventListener("change",(()=>{setTimeout(this.updateMapBounds,500)})):window.addEventListener("orientationchange",(()=>{setTimeout(this.updateMapBounds,500)}))}disableScrolling(){window.removeEventListener("ionScroll",this.handleScrollEvent),window.removeEventListener("scroll",this.handleScrollEvent),window.removeEventListener("resize",this.handleScrollEvent),screen.orientation?screen.orientation.removeEventListener("change",(()=>{setTimeout(this.updateMapBounds,1e3)})):window.removeEventListener("orientationchange",(()=>{setTimeout(this.updateMapBounds,1e3)}))}updateMapBounds(){if(this.element){const e=this.element.getBoundingClientRect();p.onScroll({id:this.id,mapBounds:{x:e.x,y:e.y,width:e.width,height:e.height}})}}async setOnCameraIdleListener(e){this.onCameraIdleListener&&this.onCameraIdleListener.remove(),this.onCameraIdleListener=e?await p.addListener("onCameraIdle",this.generateCallback(e)):void 0}async setOnBoundsChangedListener(e){this.onBoundsChangedListener&&this.onBoundsChangedListener.remove(),this.onBoundsChangedListener=e?await p.addListener("onBoundsChanged",this.generateCallback(e)):void 0}async setOnCameraMoveStartedListener(e){this.onCameraMoveStartedListener&&this.onCameraMoveStartedListener.remove(),this.onCameraMoveStartedListener=e?await p.addListener("onCameraMoveStarted",this.generateCallback(e)):void 0}async setOnClusterClickListener(e){this.onClusterClickListener&&this.onClusterClickListener.remove(),this.onClusterClickListener=e?await p.addListener("onClusterClick",this.generateCallback(e)):void 0}async setOnClusterInfoWindowClickListener(e){this.onClusterInfoWindowClickListener&&this.onClusterInfoWindowClickListener.remove(),this.onClusterInfoWindowClickListener=e?await p.addListener("onClusterInfoWindowClick",this.generateCallback(e)):void 0}async setOnInfoWindowClickListener(e){this.onInfoWindowClickListener&&this.onInfoWindowClickListener.remove(),this.onInfoWindowClickListener=e?await p.addListener("onInfoWindowClick",this.generateCallback(e)):void 0}async setOnMapClickListener(e){this.onMapClickListener&&this.onMapClickListener.remove(),this.onMapClickListener=e?await p.addListener("onMapClick",this.generateCallback(e)):void 0}async setOnMarkerClickListener(e){this.onMarkerClickListener&&this.onMarkerClickListener.remove(),this.onMarkerClickListener=e?await p.addListener("onMarkerClick",this.generateCallback(e)):void 0}async setOnMarkerDragStartListener(e){this.onMarkerDragStartListener&&this.onMarkerDragStartListener.remove(),this.onMarkerDragStartListener=e?await p.addListener("onMarkerDragStart",this.generateCallback(e)):void 0}async setOnMarkerDragListener(e){this.onMarkerDragListener&&this.onMarkerDragListener.remove(),this.onMarkerDragListener=e?await p.addListener("onMarkerDrag",this.generateCallback(e)):void 0}async setOnMarkerDragEndListener(e){this.onMarkerDragEndListener&&this.onMarkerDragEndListener.remove(),this.onMarkerDragEndListener=e?await p.addListener("onMarkerDragEnd",this.generateCallback(e)):void 0}async setOnMyLocationButtonClickListener(e){this.onMyLocationButtonClickListener&&this.onMyLocationButtonClickListener.remove(),this.onMyLocationButtonClickListener=e?await p.addListener("onMyLocationButtonClick",this.generateCallback(e)):void 0}async setOnMyLocationClickListener(e){this.onMyLocationClickListener&&this.onMyLocationClickListener.remove(),this.onMyLocationClickListener=e?await p.addListener("onMyLocationClick",this.generateCallback(e)):void 0}async removeAllMapListeners(){this.onBoundsChangedListener&&(this.onBoundsChangedListener.remove(),this.onBoundsChangedListener=void 0),this.onCameraIdleListener&&(this.onCameraIdleListener.remove(),this.onCameraIdleListener=void 0),this.onCameraMoveStartedListener&&(this.onCameraMoveStartedListener.remove(),this.onCameraMoveStartedListener=void 0),this.onClusterClickListener&&(this.onClusterClickListener.remove(),this.onClusterClickListener=void 0),this.onClusterInfoWindowClickListener&&(this.onClusterInfoWindowClickListener.remove(),this.onClusterInfoWindowClickListener=void 0),this.onInfoWindowClickListener&&(this.onInfoWindowClickListener.remove(),this.onInfoWindowClickListener=void 0),this.onMapClickListener&&(this.onMapClickListener.remove(),this.onMapClickListener=void 0),this.onMarkerClickListener&&(this.onMarkerClickListener.remove(),this.onMarkerClickListener=void 0),this.onMyLocationButtonClickListener&&(this.onMyLocationButtonClickListener.remove(),this.onMyLocationButtonClickListener=void 0),this.onMyLocationClickListener&&(this.onMyLocationClickListener.remove(),this.onMyLocationClickListener=void 0)}generateCallback(e){const t=this.id;return n=>{n.mapId==t&&e(n)}}}var k=n(8903);const f=(0,i.aZ)({components:{IonPage:m._i,IonHeader:m.Gu,IonToolbar:m.sr,IonTitle:m.wd,IonContent:m.W2,IonModal:m.ki,IonButtons:m.Sm,IonButton:m.YG,IonDatetime:m.x4,IonIcon:m.gu,IonItem:m.Ie,IonLabel:m.Q$,IonSelect:m.t9,IonSelectOption:m.n0,IonRow:m.Nd,IonList:m.q_},setup(){return{arrowBackOutline:k.Pjk}},data(){return{bookingIsOpen:!1,subscriptionIsOpen:!1,choiceOpen:!1,clickedMarkerName:"",clickedMarkerAddress:"",distanceToLocation_km:"",timeToLocation_mins:"",startTime:"",endTime:""}},mounted(){this.createMap(),this.calculateDistance()},methods:{buySubscription(){console.log("here")},calculateDistance(){const e="https://maps.googleapis.com/maps/api/distancematrix/json?origins=1.2958419970838684,103.85841587741238&destinations=1.3007033161990564,103.84528924122294&departure_time=now&key=AIzaSyAJXGx7T2ypt5Ew5-9SbDTWF9gqloQUJwI";u.Z.get(e).then((e=>{console.log(e.data);const t=(e.data.rows[0].elements[0].distance.value/1e3).toPrecision(2),n=(e.data.rows[0].elements[0].duration_in_traffic.value/60).toPrecision(2);console.log("distance: ",t),console.log("duration: ",n),this.distanceToLocation_km=t,this.timeToLocation_mins=n})).catch((e=>{console.log(e.message)}))},setChoiceOpen(e){this.choiceOpen=e},setBookingOpen(e){this.bookingIsOpen=e},setSubscriptionOpen(e){this.subscriptionIsOpen=e},makeBoooking(){const e=new Date,t=e.getDate(),n=e.getMonth()+1,i=e.getFullYear(),o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),r=i+"-"+n+"-"+t+" "+o+":"+a+":"+s,l=this.startTime.substring(0,10)+" "+this.startTime.substring(11,19),d=this.endTime.substring(0,10)+" "+this.endTime.substring(11,19),c="http://127.0.0.1:5001/bookings";u.Z.post(c,{bookingDate:r,bookingLocation:this.clickedMarkerName,locationName:this.clickedMarkerAddress,startTime:l,endTime:d,userID:1,status:"Booked"}).then((e=>{console.log(e.data),this.setBookingOpen(!1),this.$router.push({path:"/viewBooking"}).then((()=>{this.$router.go(0)})),location.reload()})).catch((e=>{console.log(e.message)}))},async createMap(){const e=document.getElementById("map"),t=await g.create({id:"my-map",element:e,apiKey:"AIzaSyAJXGx7T2ypt5Ew5-9SbDTWF9gqloQUJwI",config:{center:{lat:1.2962823,lng:103.8500894},zoom:13}});await t.addMarkers([{title:"Plaza Sing",snippet:"68 Orchard Rd, Singapore 238839",coordinate:{lat:1.3007033161990564,lng:103.84528924122294}},{title:"Suntec City",snippet:"3 Temasek Blvd, #1, #327-328, 038983",coordinate:{lat:1.2958419970838684,lng:103.85841587741238}}]),t.setOnMarkerClickListener((e=>{console.log(e),console.log(e.title),console.log(e.snippet),this.clickedMarkerName=e.title,this.clickedMarkerAddress=e.snippet,this.setChoiceOpen(!0)})),t.enableTrafficLayer(!0),t.enableCurrentLocation(!0);return t}}});var v=n(3744);const L=(0,v.Z)(f,[["render",d]]),C=L}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,