"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[260],{1260:(t,o,a)=>{a.r(o),a.d(o,{default:()=>h});var e=a(6252);const n=(0,e._)("div",null,[(0,e._)("h2",null,"Percentage of bookings according to locations")],-1);function s(t,o,a,s,r,i){const l=(0,e.up)("base-layout");return(0,e.wg)(),(0,e.j4)(l,{needToolBar:"y"},{default:(0,e.w5)((()=>[n])),_:1})}a(7658);var r=a(8945);const i=(0,e.aZ)({name:"GoogleCharts",components:{},data(){return{PieChartData:[["Bookings","Percentage of bookings"]],ColumnChartData:[["Year","Season Parking","Hourly Parking"],["2014",1e3,400],["2015",1170,460],["2016",660,1120],["2017",1030,540]],PieChartoptions:{chart:{title:"Percentage of bookings according to locations",pieHole:.4},width:1e3,height:400},ColumnChartOptions:{chart:{title:"Percentage of bookings according to locations",pieHole:.4},width:1e3,height:400},userData:{}}},methods:{loadUserData(){this.userData=JSON.parse(localStorage.getItem("userData")||"{}")},getCharts(){let t=[];const o="http://localhost:5001/bookings";r.Z.get(o).then((o=>{t=o.data.data.bookings;for(let a=0;a<t.length;a++)this.PieChartData.push([t[a]["bookingLocation"],t[a]["bookingID"]]);return t})).catch((t=>{console.log(t.message)}))}},mounted(){this.loadUserData(),this.getCharts()}});var l=a(3744);const c=(0,l.Z)(i,[["render",s]]),h=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvMjYwLjNmNDA2YzE1LmpzIiwibWFwcGluZ3MiOiI2SUFFQSxNQUFNQSxHQUEwQkMsRUFBQUEsRUFBQUEsR0FBb0IsTUFBTyxLQUFNLEVBQ2xEQSxFQUFBQSxFQUFBQSxHQUFvQixLQUFNLEtBQU0sbURBQzNDLEdBRUUsU0FBVUMsRUFBT0MsRUFBVUMsRUFBWUMsRUFBWUMsRUFBWUMsRUFBV0MsR0FDOUUsTUFBTUMsR0FBeUJDLEVBQUFBLEVBQUFBLElBQWtCLGVBRWpELE9BQVFDLEVBQUFBLEVBQUFBLE9BQWNDLEVBQUFBLEVBQUFBLElBQWFILEVBQXdCLENBQUVJLFlBQWEsS0FBTyxDQUMvRUMsU0FBU0MsRUFBQUEsRUFBQUEsS0FBUyxJQUFNLENBQ3RCZixLQUVGZ0IsRUFBRyxHQUVQLEMsc0JDVkEsU0FBZUMsRUFBQUEsRUFBQUEsSUFBZ0IsQ0FDN0JDLEtBQU0sZUFDTkMsV0FBWSxDQUNWLEVBRUZDLE9BQ0UsTUFBTyxDQUNMQyxhQUFjLENBQ1osQ0FBQyxXQUFZLDJCQUVmQyxnQkFBaUIsQ0FDZixDQUFDLE9BQVEsaUJBQWtCLGtCQUMzQixDQUFDLE9BQVEsSUFBTSxLQUNmLENBQUMsT0FBUSxLQUFNLEtBQ2YsQ0FBQyxPQUFRLElBQUssTUFDZCxDQUFDLE9BQVEsS0FBTSxNQUVqQkMsZ0JBQWlCLENBQ2ZDLE1BQU8sQ0FDTEMsTUFBTyxnREFDUEMsUUFBUyxJQUVYQyxNQUFPLElBQ1BDLE9BQVEsS0FFVkMsbUJBQW9CLENBQ2xCTCxNQUFPLENBQ0xDLE1BQU8sZ0RBQ1BDLFFBQVMsSUFFWEMsTUFBTyxJQUNQQyxPQUFRLEtBRVZFLFNBQVUsQ0FBQyxFQUVmLEVBQ0FDLFFBQVMsQ0FDUEMsZUFDRUMsS0FBS0gsU0FBV0ksS0FBS0MsTUFBTUMsYUFBYUMsUUFBUSxhQUFlLEtBQ2pFLEVBQ0FDLFlBQ0UsSUFBSUMsRUFBYyxHQUVsQixNQUFNQyxFQUFNLGlDQUNaQyxFQUFBQSxFQUFBQSxJQUFVRCxHQUNURSxNQUFLQyxJQUNKSixFQUFjSSxFQUFTdkIsS0FBS0EsS0FBS3dCLFNBRWpDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJTixFQUFZTyxPQUFRRCxJQUN0Q1osS0FBS1osYUFBYTBCLEtBQUssQ0FBQ1IsRUFBWU0sR0FBRyxtQkFBbUJOLEVBQVlNLEdBQUcsZUFFM0UsT0FBT04sQ0FBVyxJQUduQlMsT0FBTUMsSUFDTEMsUUFBUUMsSUFBSUYsRUFBTUcsUUFBUSxHQUU5QixHQUdGQyxVQUNFcEIsS0FBS0QsZUFDTEMsS0FBS0ssV0FDUCxJLGNDL0RGLE1BQU1nQixHQUEyQixPQUFnQixFQUFRLENBQUMsQ0FBQyxTQUFTcEQsS0FFcEUsRyIsInNvdXJjZXMiOlsid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvSG9tZVBhZ2UudnVlP2FlYjYiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9Ib21lUGFnZS52dWU/ZDgzYSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0hvbWVQYWdlLnZ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfaG9pc3RlZF8xID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgbnVsbCwgW1xuICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImgyXCIsIG51bGwsIFwiUGVyY2VudGFnZSBvZiBib29raW5ncyBhY2NvcmRpbmcgdG8gbG9jYXRpb25zXCIpXG5dLCAtMSlcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4OiBhbnksX2NhY2hlOiBhbnksJHByb3BzOiBhbnksJHNldHVwOiBhbnksJGRhdGE6IGFueSwkb3B0aW9uczogYW55KSB7XG4gIGNvbnN0IF9jb21wb25lbnRfYmFzZV9sYXlvdXQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImJhc2UtbGF5b3V0XCIpIVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9iYXNlX2xheW91dCwgeyBuZWVkVG9vbEJhcjogXCJ5XCIgfSwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIF9ob2lzdGVkXzFcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0pKVxufSIsIlxyXG4vLyBpbXBvcnQgeyBHQ2hhcnQgfSBmcm9tIFwidnVlLWdvb2dsZS1jaGFydHNcIjtcclxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcclxuICBuYW1lOiBcIkdvb2dsZUNoYXJ0c1wiLFxyXG4gIGNvbXBvbmVudHM6IHtcclxuICAgIC8vIEdDaGFydFxyXG4gIH0sXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFBpZUNoYXJ0RGF0YTogW1xyXG4gICAgICAgIFsnQm9va2luZ3MnLCAnUGVyY2VudGFnZSBvZiBib29raW5ncyddXHJcbiAgICAgIF0sXHJcbiAgICAgIENvbHVtbkNoYXJ0RGF0YTogW1xyXG4gICAgICAgIFsnWWVhcicsICdTZWFzb24gUGFya2luZycsICdIb3VybHkgUGFya2luZyddLFxyXG4gICAgICAgIFsnMjAxNCcsIDEwMDAsIDQwMF0sXHJcbiAgICAgICAgWycyMDE1JywgMTE3MCwgNDYwXSxcclxuICAgICAgICBbJzIwMTYnLCA2NjAsIDExMjBdLFxyXG4gICAgICAgIFsnMjAxNycsIDEwMzAsIDU0MF0sXHJcbiAgICAgIF0sXHJcbiAgICAgIFBpZUNoYXJ0b3B0aW9uczoge1xyXG4gICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICB0aXRsZTogXCJQZXJjZW50YWdlIG9mIGJvb2tpbmdzIGFjY29yZGluZyB0byBsb2NhdGlvbnNcIixcclxuICAgICAgICAgIHBpZUhvbGU6IDAuNCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdpZHRoOiAxMDAwLFxyXG4gICAgICAgIGhlaWdodDogNDAwXHJcbiAgICAgIH0sXHJcbiAgICAgIENvbHVtbkNoYXJ0T3B0aW9uczoge1xyXG4gICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICB0aXRsZTogXCJQZXJjZW50YWdlIG9mIGJvb2tpbmdzIGFjY29yZGluZyB0byBsb2NhdGlvbnNcIixcclxuICAgICAgICAgIHBpZUhvbGU6IDAuNCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdpZHRoOiAxMDAwLFxyXG4gICAgICAgIGhlaWdodDogNDAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHVzZXJEYXRhOiB7fVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgbG9hZFVzZXJEYXRhKCkge1xyXG4gICAgICB0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJEYXRhXCIpIHx8ICd7fScpO1xyXG4gICAgfSxcclxuICAgIGdldENoYXJ0cygpIHtcclxuICAgICAgbGV0IGJvb2tpbmdEYXRhID0gW107XHJcblxyXG4gICAgICBjb25zdCB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMS9ib29raW5nc1wiO1xyXG4gICAgICBheGlvcy5nZXQodXJsKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgYm9va2luZ0RhdGEgPSByZXNwb25zZS5kYXRhLmRhdGEuYm9va2luZ3M7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYm9va2luZ0RhdGEpXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib29raW5nRGF0YS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICAgIHRoaXMuUGllQ2hhcnREYXRhLnB1c2goW2Jvb2tpbmdEYXRhW2ldWydib29raW5nTG9jYXRpb24nXSxib29raW5nRGF0YVtpXVsnYm9va2luZ0lEJ11dKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYm9va2luZ0RhdGFcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhLmRhdGEuYm9va2luZ3MpXHJcbiAgICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSxcclxuICAvLyBDYWxscyBmdW5jdGlvbiBvbiBwYWdlIGxvYWRcclxuICBtb3VudGVkKCl7XHJcbiAgICB0aGlzLmxvYWRVc2VyRGF0YSgpO1xyXG4gICAgdGhpcy5nZXRDaGFydHMoKTtcclxuICB9XHJcbn0pO1xyXG4iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9Ib21lUGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9M2QzOWIxMzgmdHM9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0hvbWVQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9Ib21lUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCJDOlxcXFx3YW1wNjRcXFxcRllQX05FVFNcXFxcSFVBVFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWxvYWRlclxcXFxkaXN0XFxcXGV4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyJdLCJuYW1lcyI6WyJfaG9pc3RlZF8xIiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsInJlbmRlciIsIl9jdHgiLCJfY2FjaGUiLCIkcHJvcHMiLCIkc2V0dXAiLCIkZGF0YSIsIiRvcHRpb25zIiwiX2NvbXBvbmVudF9iYXNlX2xheW91dCIsIl9yZXNvbHZlQ29tcG9uZW50IiwiX29wZW5CbG9jayIsIl9jcmVhdGVCbG9jayIsIm5lZWRUb29sQmFyIiwiZGVmYXVsdCIsIl93aXRoQ3R4IiwiXyIsImRlZmluZUNvbXBvbmVudCIsIm5hbWUiLCJjb21wb25lbnRzIiwiZGF0YSIsIlBpZUNoYXJ0RGF0YSIsIkNvbHVtbkNoYXJ0RGF0YSIsIlBpZUNoYXJ0b3B0aW9ucyIsImNoYXJ0IiwidGl0bGUiLCJwaWVIb2xlIiwid2lkdGgiLCJoZWlnaHQiLCJDb2x1bW5DaGFydE9wdGlvbnMiLCJ1c2VyRGF0YSIsIm1ldGhvZHMiLCJsb2FkVXNlckRhdGEiLCJ0aGlzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImdldENoYXJ0cyIsImJvb2tpbmdEYXRhIiwidXJsIiwiYXhpb3MiLCJ0aGVuIiwicmVzcG9uc2UiLCJib29raW5ncyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwibW91bnRlZCIsIl9fZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==