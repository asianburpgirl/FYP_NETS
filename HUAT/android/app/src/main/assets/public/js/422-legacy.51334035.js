"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[422],{2422:(t,e,a)=>{a.r(e),a.d(e,{default:()=>O});var o=a(6252);const n=(0,o._)("h2",null,"Percentage of bookings per location",-1),r=(0,o._)("h2",null,"Number of bookings per location",-1),l=(0,o._)("h2",null,"Number of bookings per subscription",-1);function i(t,e,a,i,s,u){const c=(0,o.up)("GChart"),p=(0,o.up)("ion-col"),h=(0,o.up)("ion-row"),d=(0,o.up)("ion-grid"),g=(0,o.up)("base-layout");return(0,o.wg)(),(0,o.j4)(g,{needToolBar:"y"},{default:(0,o.w5)((()=>[(0,o._)("div",null,[(0,o.Wm)(d,null,{default:(0,o.w5)((()=>[(0,o.Wm)(h,null,{default:(0,o.w5)((()=>[(0,o.Wm)(p,null,{default:(0,o.w5)((()=>[n,(0,o.Wm)(c,{type:"PieChart",options:t.PieChartoptions,data:t.PieChartData},null,8,["options","data"])])),_:1}),(0,o.Wm)(p,null,{default:(0,o.w5)((()=>[r,(0,o.Wm)(c,{type:"BarChart",data:t.BarChartData,options:t.BarChartOptions},null,8,["data","options"])])),_:1}),(0,o.Wm)(p,null,{default:(0,o.w5)((()=>[l,(0,o.Wm)(c,{type:"ColumnChart",data:t.ColumnChartData,options:t.ColumnChartOptions},null,8,["data","options"])])),_:1})])),_:1})])),_:1})])])),_:1})}a(7658);var s=a(2262),u=a(9963);const c="https://www.gstatic.com/charts/loader.js";let p=null;const h=new Map;function d(){return void 0!==window.google?Promise.resolve(window.google.charts):(null===p&&(p=new Promise((t=>{const e=document.querySelector('script[src="'.concat(c,'"]')),a=e||document.createElement("script");e||(a.src=c,a.type="text/javascript",document.head.append(a)),a.onload=()=>{void 0!==window.google&&t(window.google.charts)}}))),p)}async function g(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"current",{packages:e=["corechart","controls"],language:a="en",mapsApiKey:o}=arguments.length>1?arguments[1]:void 0;const n=await d(),r="".concat(t,"_").concat(e.join("_"),"_").concat(a);if(h.has(r))return h.get(r);const l=new Promise((r=>{n.load(t,{packages:e,language:a,mapsApiKey:o}),n.setOnLoadCallback((()=>r(window.google)))}));return h.set(r,l),l}function f(t,e,a){return null!==t&&e instanceof t.visualization.DataTable||null!==t&&e instanceof t.visualization.DataView?e:null!==t&&Array.isArray(e)?t.visualization.arrayToDataTable(e,a):null!==t&&null!==e&&"object"===typeof e?new t.visualization.DataTable(e):null}function v(t,e,a,o,n,r){const l=(t,e,a)=>{if(void 0===a)throw new Error("please, provide chart type property");return new e.visualization[a](t)};if(null===t)throw new Error("please, provide charts lib property");if(null===a)throw new Error("please, provide chart element property");const i=r||l;return e=i(a,t,o),w(t,e,n),e}function w(t,e,a){if(null!==a)for(const[o,n]of Object.entries(a))null!==t&&null!==e&&t.visualization.events.addListener(e,o,n)}function m(t){let e,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;function o(){return a}const n=function(){for(var a=arguments.length,n=new Array(a),r=0;r<a;r++)n[r]=arguments[r];const l=this,i=function(){e=void 0,t.apply(l,n)};void 0!==e&&clearTimeout(e),e=setTimeout(i,o())};return n}let C=null;const b=(0,o.aZ)({name:"GChart",props:{type:{type:String,required:!0},data:{type:[Array,Object,null],default:()=>[]},isFirstRowLabels:{type:Boolean,default:!1},options:{type:Object,default:()=>({})},version:{type:String,default:"current"},settings:{type:Object,default:()=>({packages:["corechart","table"]})},events:{type:Object,default:null},createChart:{type:Function,default:void 0},resizeDebounce:{type:Number,default:200}},setup(t,e){let{emit:a}=e;const n=(0,s.iH)(null),r=(0,s.iH)(null);function l(){if(null===C||null===n.value)return;const e=f(C,t.data,t.isFirstRowLabels);var a;null!==e&&(null===(a=n.value)||void 0===a||a.draw(e,t.options))}return(0,o.YP)((()=>t.data),(()=>l()),{deep:!0}),(0,o.YP)((()=>t.options),(()=>l()),{deep:!0}),(0,o.YP)((()=>t.type),(()=>{n.value=v(C,n.value,r.value,t.type,t.events,t.createChart),l()})),(0,o.bv)((()=>{g(t.version,t.settings).then((e=>{void 0!==e&&(C=e,n.value=v(C,n.value,r.value,t.type,t.events,t.createChart),a("ready",n.value,e),l())})),t.resizeDebounce>0&&window.addEventListener("resize",m(l,t.resizeDebounce))})),(0,o.Jd)((()=>{null!==n.value&&"function"===typeof n.value.clearChart&&n.value.clearChart(),t.resizeDebounce>0&&window.removeEventListener("resize",m(l,t.resizeDebounce))})),()=>(0,o.h)("div",{ref:r},[])}}),y=(0,u.ri)({});function k(){y.component("GChart",b)}const D={version:"1.1.0",install:k};let P=null;"undefined"!==typeof window&&(P=window.Vue),null!==P&&void 0!==P&&y.use(D);var z=a(8945);const B=(0,o.aZ)({name:"GoogleCharts",components:{GChart:b},data(){return{PieChartData:[["Bookings","Percentage of bookings"]],BarChartData:[["Booking Location","No. of Bookings"]],ColumnChartData:[["Carpark Name","Subscription Plan","No. of Subscribers"]],PieChartoptions:{chart:{title:"Percentage of bookings per location",pieHole:.4}},BarChartOptions:{chart:{title:"Number of bookings per location",pieHole:.4}},ColumnChartOptions:{chart:{title:"Number of bookings per subscription",pieHole:.4}},userData:{}}},methods:{loadUserData(){this.userData=JSON.parse(localStorage.getItem("userData")||"{}")},getPieChart(){let t=[];const e="http://localhost:5001/bookings";z.Z.get(e).then((e=>{t=e.data.data.bookings;for(let a=0;a<t.length;a++)this.PieChartData.push([t[a]["bookingLocation"],t[a]["bookingID"]]);return t})).catch((t=>{console.log(t.message)}))},getBarChart(){let t=[];const e="http://localhost:5003/carparks";z.Z.get(e).then((e=>{t=e.data.data.carparks;for(let a=0;a<t.length;a++)this.BarChartData.push([t[a]["carparkName"],t[a]["currentCapacity"]]);return t})).catch((t=>{console.log(t.message)}))},getColumnChart(){let t=[];const e="http://localhost:5003/carparks";z.Z.get(e).then((e=>{t=e.data.data.carparks;for(let a=0;a<t.length;a++)this.ColumnChartData.push([t[a]["carparkName"],parseInt(t[a]["hourlyweekdaypeak"]),parseInt(t[a]["hourlyweekdaynonpeak"])]);return t})).catch((t=>{console.log(t.message)}))}},mounted(){this.loadUserData(),this.getBarChart(),this.getPieChart(),this.getColumnChart()}});var _=a(3744);const N=(0,_.Z)(B,[["render",i]]),O=N}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,