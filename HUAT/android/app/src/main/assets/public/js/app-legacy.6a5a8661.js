(()=>{var e={1993:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=1993,e.exports=t},4671:(e,t,n)=>{"use strict";n(6992),n(8674),n(7727);var o=n(9963),a=n(6252),l=n(2262),i=n(41);const s=(0,a.aZ)({__name:"App",setup(e){return(e,t)=>((0,a.wg)(),(0,a.j4)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.dr),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.jP))])),_:1})])),_:1}))}}),r=s,u=r;n(3948);var d=n(1089),m=n(8903);const c=(0,a.aZ)({__name:"BottomTabs",setup(e){return(e,t)=>((0,a.wg)(),(0,a.j4)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.UN),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.jP)),(0,a.Wm)((0,l.SU)(i.yq),{slot:"bottom"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.ZU),{tab:"home",href:"/tabs/home"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.LEH)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Home")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"wallet",href:"/tabs/wallet"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.In3)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Wallet")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"plans",href:"/tabs/plans"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.R_F)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Plans")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"map",href:"/tabs/map"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.UID)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Map")])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.ZU),{tab:"profile",href:"/tabs/profile"},{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.gu),{icon:(0,l.SU)(m.lBs)},null,8,["icon"]),(0,a.Wm)((0,l.SU)(i.Q$),null,{default:(0,a.w5)((()=>[(0,a.Uk)("Profile")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1}))}}),p=c,f=p;var w=n(3577);const g=e=>((0,a.dD)("data-v-7834dab8"),e=e(),(0,a.Cn)(),e),h=["src"],_={class:"myLine ion-justify-content-start"},k=g((()=>(0,a._)("a",{"float-right":"",class:"myLine2",href:"/forgotPassword"},"Forgot password?",-1))),b=g((()=>(0,a._)("div",{class:"ion-text-center"},[(0,a._)("a",{href:"/register"}," Do not have an account? Sign up now! ")],-1))),W={key:0},U={key:1},y=g((()=>(0,a._)("ul",{id:"hi"},null,-1)));function v(e,t,o,l,i,s){const r=(0,a.up)("ion-row"),u=(0,a.up)("icon-col"),d=(0,a.up)("ion-input"),m=(0,a.up)("ion-item"),c=(0,a.up)("ion-checkbox"),p=(0,a.up)("ion-label"),f=(0,a.up)("ion-col"),g=(0,a.up)("ion-button"),v=(0,a.up)("ion-note"),I=(0,a.up)("ion-grid"),S=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(S,null,{default:(0,a.w5)((()=>[(0,a.Wm)(I,{"scroll-y":"false"},{default:(0,a.w5)((()=>[(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a._)("img",{src:n(6319)},null,8,h)])),_:1}),(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{size:"9",class:"pageHeader"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Login ")])),_:1})])),_:1}),(0,a.Wm)(m,{fill:"solid",ref:"item"},{default:(0,a.w5)((()=>[(0,a.Wm)(d,{clearInput:!0,placeholder:"Username",modelValue:e.username,"onUpdate:modelValue":t[0]||(t[0]=t=>e.username=t)},null,8,["modelValue"])])),_:1},512),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{clearInput:!0,type:"password",placeholder:"Password",modelValue:e.password,"onUpdate:modelValue":t[1]||(t[1]=t=>e.password=t)},null,8,["modelValue"])])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a._)("div",_,[(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Remember me")])),_:1})])),_:1}),k])])),_:1})])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[b])),_:1})])),_:1}),(0,a.Wm)(r,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(g,{shape:"round",onClick:t[2]||(t[2]=t=>e.validateLogin())},{default:(0,a.w5)((()=>[(0,a.Uk)("Login")])),_:1})])),_:1}),(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{color:"danger"},{default:(0,a.w5)((()=>[(0,a._)("ul",null,[""!=e.usernameError?((0,a.wg)(),(0,a.iD)("li",W,(0,w.zw)(e.usernameError),1)):(0,a.kq)("",!0),""!=e.passwordError?((0,a.wg)(),(0,a.iD)("li",U,(0,w.zw)(e.passwordError),1)):(0,a.kq)("",!0)])])),_:1})])),_:1}),(0,a.Wm)(m,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(v,{color:"danger"},{default:(0,a.w5)((()=>[y])),_:1})])),_:1})])),_:1})])),_:1})}n(8862),n(7658);var I=n(8945);const S=(0,a.aZ)({components:{IonRow:i.Nd,IonGrid:i.jY,IonCol:i.wI,IonNote:i.uN,IonInput:i.pK,IonItem:i.Ie,IonButton:i.YG,IonCheckbox:i.nz,IonLabel:i.Q$},data(){return{username:"",password:"",passwordError:"",usernameError:"",loginError:""}},methods:{init(){localStorage.setItem("userData","")},validateLogin(){let e="",t={};if(""!=this.username&&""!=this.password){e=JSON.stringify({username:this.username,password:this.password}),t={method:"post",mode:"cors",url:"http://localhost:5002/userlogin",headers:{"Content-Type":"application/json"},data:e};const n=this.$router,o=(0,I.Z)(t).then((function(e){return localStorage.setItem("userData",JSON.stringify(e.data.data)),n.push("tabs"),e.data})).catch((function(e){e="Incorrect login details. Please try again",document.getElementById("hi").innerText=e,console.log(e)}));return o}""==this.username&&(this.usernameError="Username cannot be empty"),""==this.password&&(this.passwordError="Password cannot be empty")}},mounted(){this.init()}});var B=n(3744);const P=(0,B.Z)(S,[["render",v],["__scopeId","data-v-7834dab8"]]),C=P,E=e=>((0,a.dD)("data-v-3abf7be5"),e=e(),(0,a.Cn)(),e),V=E((()=>(0,a._)("img",{src:"/assets/images/ion.jpg"},null,-1))),j=E((()=>(0,a._)("br",null,null,-1))),N=E((()=>(0,a._)("br",null,null,-1)));function T(e,t,n,o,l,i){const s=(0,a.up)("ion-searchbar"),r=(0,a.up)("ion-card-subtitle"),u=(0,a.up)("ion-button"),d=(0,a.up)("ion-row"),m=(0,a.up)("ion-col"),c=(0,a.up)("ion-badge"),p=(0,a.up)("ion-item"),f=(0,a.up)("ion-card-title"),g=(0,a.up)("ion-card-header"),h=(0,a.up)("ion-grid"),_=(0,a.up)("ion-card"),k=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(k,{pageTitle:"My Bookings",needBackButton:"y",pageToGoBack:"/tabs/profile",needToolBar:"y"},{default:(0,a.w5)((()=>[(0,a.Wm)(s),((0,a.wg)(!0),(0,a.iD)(a.HY,null,(0,a.Ko)(e.bookingDetails,(n=>((0,a.wg)(),(0,a.j4)(_,{key:n},{default:(0,a.w5)((()=>[V,(0,a.Wm)(h,null,{default:(0,a.w5)((()=>[(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Booking Ref:"),(0,a._)("u",null,(0,w.zw)(n.bookingRef),1)])),_:2},1024),(0,a.Wm)(d,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{shape:"round",onClick:t[0]||(t[0]=t=>e.editBooking())},{default:(0,a.w5)((()=>[(0,a.Uk)("Edit")])),_:1})])),_:1}),(0,a.Wm)(d,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{shape:"round",onClick:t=>e.deleteBooking(n.bookingID),color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Delete")])),_:2},1032,["onClick"])])),_:2},1024)])),_:2},1024)])),_:2},1024),(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Start Date: "+(0,w.zw)(n.startDate),1)])),_:2},1024),j,(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("End Date: "+(0,w.zw)(n.endDate),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Start Time: "+(0,w.zw)(n.startTime),1)])),_:2},1024),N,(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Uk)("End Time:"+(0,w.zw)(n.endTime),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(p,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{color:"success",slot:"end"},{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(n.status),1)])),_:2},1024)])),_:2},1024)])),_:2},1024)])),_:2},1024),(0,a.Wm)(d,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(n.bookingLocation),1)])),_:2},1024)])),_:2},1024),(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(p,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{fill:"outline",slot:"end"},{default:(0,a.w5)((()=>[(0,a.Uk)("Directions")])),_:1})])),_:1})])),_:1})])),_:2},1024)])),_:2},1024)])),_:2},1024)])),_:2},1024)))),128))])),_:1})}const D=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardSubtitle:i.tO,IonCardTitle:i.Dq,IonSearchbar:i.VI,IonBadge:i.yp},data(){return{bookingDetails:[]}},methods:{deleteBooking(e){const t="http://127.0.0.1:5001/bookings/"+e;console.log(t),I.Z["delete"](t).then((e=>{console.log(e),location.reload()})).catch((e=>{console.log(e.message)}))},getAllBookings(){const e="http://127.0.0.1:5001/bookings";I.Z.get(e).then((e=>{const t=e.data.data.bookings;console.log(t);for(const n of t){const e=new Date(n.startTime),t=e.getDate()+"/"+e.getMonth()+"1/"+e.getFullYear(),o=e.getHours()+":"+e.getMinutes(),a=new Date(n.endTime),l=a.getDate()+"/"+a.getMonth()+"1/"+a.getFullYear(),i=a.getHours()+":"+a.getMinutes();this.bookingDetails.push({bookingDate:n.bookingDate,bookingID:n.bookingID,bookingLocation:n.bookingLocation,locationName:n.locationName,startDate:t,startTime:o,endDate:l,endTime:i,status:n.status,bookingRef:n.bookingRef,image:n.image,maxCapacity:n.maxCapacity,currentCapacity:n.currentCapacity,userID:n.userID})}})).catch((e=>{console.log(e.message)}))}},mounted(){this.getAllBookings()}}),Z=(0,B.Z)(D,[["render",T],["__scopeId","data-v-3abf7be5"]]),O=Z,x=e=>((0,a.dD)("data-v-2cbf7f50"),e=e(),(0,a.Cn)(),e),L=x((()=>(0,a._)("br",null,null,-1))),R=x((()=>(0,a._)("br",null,null,-1))),A=x((()=>(0,a._)("br",null,null,-1))),q=x((()=>(0,a._)("h3",{class:"ion-padding-top",style:{color:"red","font-weight":"bold"}},"*No refund after buying",-1)));function z(e,t,n,o,l,i){const s=(0,a.up)("ion-card-title"),r=(0,a.up)("ion-card-header"),u=(0,a.up)("ion-card-content"),d=(0,a.up)("ion-button"),m=(0,a.up)("ion-card"),c=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(c,{pageTitle:"Buy Subscription",pageToGoBack:"/tabs/",needBackButton:"y",needToolBar:"y"},{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Premium Plan")])),_:1})])),_:1}),(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Uk)(" Free 2 hour parking"),L,(0,a.Uk)(" Free parking once a month"),R,(0,a.Uk)(" Pay parking fees at the end of the month"),A,q])),_:1}),(0,a.Wm)(d,{expand:"full",shape:"round"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Buy")])),_:1})])),_:1})])),_:1})}function H(e,t,n,o,l,i){const s=(0,a.up)("ion-back-button"),r=(0,a.up)("ion-buttons"),u=(0,a.up)("ion-title"),d=(0,a.up)("ion-toolbar"),m=(0,a.up)("ion-header"),c=(0,a.up)("ion-content"),p=(0,a.up)("ion-page");return(0,a.wg)(),(0,a.j4)(p,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,null,{default:(0,a.w5)((()=>[e.needToolBar?((0,a.wg)(),(0,a.j4)(d,{key:0},{default:(0,a.w5)((()=>[e.needBackButton?((0,a.wg)(),(0,a.j4)(r,{key:0,slot:"start"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,{"default-href":e.pageToGoBack},null,8,["default-href"])])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(u,{class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)((0,w.zw)(e.pageTitle),1)])),_:1})])),_:1})):(0,a.kq)("",!0)])),_:1}),(0,a.Wm)(c,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.WI)(e.$slots,"default")])),_:3})])),_:3})}const M=(0,a.aZ)({props:{pageTitle:String,needBackButton:String,pageToGoBack:String,needToolBar:String},components:{IonPage:i._i,IonHeader:i.Gu,IonTitle:i.wd,IonContent:i.W2,IonToolbar:i.sr,IonButtons:i.Sm,IonBackButton:i.oU}}),$=(0,B.Z)(M,[["render",H]]),F=$,G=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardTitle:i.Dq,BaseLayout:F}}),Y=(0,B.Z)(G,[["render",z],["__scopeId","data-v-2cbf7f50"]]),Q=Y;function K(e,t,n,o,l,i){const s=(0,a.up)("ion-title"),r=(0,a.up)("ion-toolbar"),u=(0,a.up)("ion-header"),d=(0,a.up)("ion-searchbar"),m=(0,a.up)("ion-img"),c=(0,a.up)("ion-card-title"),p=(0,a.up)("ion-card-subtitle"),f=(0,a.up)("ion-card-header"),w=(0,a.up)("ion-card"),g=(0,a.up)("ion-content"),h=(0,a.up)("ion-page");return(0,a.wg)(),(0,a.j4)(h,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(s,{size:"large",class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)("Nearby Me")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(d),(0,a.Wm)(w,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,{src:"assets/images/ion.jpg"}),(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Ion Orchard")])),_:1}),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Uk)("400 lots Left")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(w,null,{default:(0,a.w5)((()=>[(0,a.Wm)(m,{src:"assets/images/wisma.jpeg"}),(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Wisma atria")])),_:1}),(0,a.Wm)(p,null,{default:(0,a.w5)((()=>[(0,a.Uk)("230 lots Left")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})}const J=(0,a.aZ)({components:{IonCard:i.PM,IonCardHeader:i.Zi,IonCardSubtitle:i.tO,IonCardTitle:i.Dq,IonSearchbar:i.VI}}),X=(0,B.Z)(J,[["render",K],["__scopeId","data-v-37abe552"]]),ee=X,te=["src"];function ne(e,t,o,l,i,s){const r=(0,a.up)("ion-row"),u=(0,a.up)("icon-col"),d=(0,a.up)("ion-label"),m=(0,a.up)("ion-input"),c=(0,a.up)("ion-item"),p=(0,a.up)("ion-note"),f=(0,a.up)("ion-button"),g=(0,a.up)("ion-list"),h=(0,a.up)("ion-grid"),_=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(_,null,{default:(0,a.w5)((()=>[(0,a.Wm)(h,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a._)("img",{src:n(6319)},null,8,te)])),_:1}),(0,a.Wm)(r,{class:"ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(u,{size:"9",class:"pageHeader"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Registration ")])),_:1})])),_:1}),(0,a.Wm)(g,null,{default:(0,a.w5)((()=>[(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Username:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,modelValue:e.userName,"onUpdate:modelValue":t[0]||(t[0]=t=>e.userName=t),onChange:t[1]||(t[1]=t=>e.validateUsername(e.userName))},null,8,["modelValue"])])),_:1}),2==e.isUsernameValid?((0,a.wg)(),(0,a.j4)(c,{key:0,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your username is too long!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Name:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,modelValue:e.name,"onUpdate:modelValue":t[2]||(t[2]=t=>e.name=t),onChange:t[3]||(t[3]=t=>e.validateName(e.name))},null,8,["modelValue"])])),_:1}),2==e.isNameValid?((0,a.wg)(),(0,a.j4)(c,{key:1,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your name is too long!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Email:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"email",modelValue:e.email,"onUpdate:modelValue":t[4]||(t[4]=t=>e.email=t),onChange:t[5]||(t[5]=t=>e.validateEmail(e.email))},null,8,["modelValue"])])),_:1}),2==e.isEmailValid?((0,a.wg)(),(0,a.j4)(c,{key:2,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid email!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Password:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"password",modelValue:e.password,"onUpdate:modelValue":t[6]||(t[6]=t=>e.password=t),onChange:t[7]||(t[7]=t=>e.validatePassword(e.password))},null,8,["modelValue"])])),_:1}),0!=e.passwordErrors.length?((0,a.wg)(),(0,a.j4)(c,{key:3,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[((0,a.wg)(!0),(0,a.iD)(a.HY,null,(0,a.Ko)(e.passwordErrors,(e=>((0,a.wg)(),(0,a.iD)("ul",{key:e},[(0,a._)("li",null,(0,w.zw)(e),1)])))),128))])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Reconfirm password:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"password",modelValue:e.reconfirmPassword,"onUpdate:modelValue":t[8]||(t[8]=t=>e.reconfirmPassword=t),onChange:t[9]||(t[9]=t=>e.validateReconfirmPassword(e.reconfirmPassword))},null,8,["modelValue"])])),_:1}),2==e.isReconfirmPasswordValid?((0,a.wg)(),(0,a.j4)(c,{key:4,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your password do not match!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(c,null,{default:(0,a.w5)((()=>[(0,a.Wm)(d,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Phone number:")])),_:1}),(0,a.Wm)(m,{"clear-input":!0,type:"tel",modelValue:e.phoneNumber,"onUpdate:modelValue":t[10]||(t[10]=t=>e.phoneNumber=t),onChange:t[11]||(t[11]=t=>e.validatePhone(e.phoneNumber))},null,8,["modelValue"])])),_:1}),2==e.isPhoneValid?((0,a.wg)(),(0,a.j4)(c,{key:5,lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid phone number!")])),_:1})])),_:1})):(0,a.kq)("",!0),(0,a.Wm)(r,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(f,{shape:"round",disabled:1==e.disabledRegisterButton,onClick:e.registerUser},{default:(0,a.w5)((()=>[(0,a.Uk)("Register")])),_:1},8,["disabled","onClick"])])),_:1})])),_:1})])),_:1})])),_:1})}n(4916);const oe=(0,a.aZ)({components:{IonRow:i.Nd,IonInput:i.pK,IonItem:i.Ie,IonButton:i.YG,IonLabel:i.Q$,IonNote:i.uN},data(){return{userName:"",name:"",email:"",password:"",reconfirmPassword:"",phoneNumber:"",isUsernameValid:0,isNameValid:0,isEmailValid:0,isReconfirmPasswordValid:0,isPhoneValid:0,passwordErrors:Array(),disabledRegisterButton:1}},methods:{validateEmail(e){e.match("@")?(this.isEmailValid=1,this.registerButton()):this.isEmailValid=2},validateUsername(e){e.length<128?(this.isUsernameValid=1,this.registerButton()):this.isUsernameValid=2},validateName(e){e.length<128?(this.isNameValid=1,this.registerButton()):this.isNameValid=2},validatePassword(e){this.passwordErrors=Array(),e.length<8&&this.passwordErrors.push("Password length must be more than 8 characters");const t=e.toUpperCase();e==t&&this.passwordErrors.push("Password must have at least a lower letter");const n=e.toLowerCase();e==n&&this.passwordErrors.push("Password must have at least an upper letter"),this.registerButton()},validateReconfirmPassword(e){e==this.password?(this.isReconfirmPasswordValid=1,this.registerButton()):this.isReconfirmPasswordValid=2},validatePhone(e){8==e.length?(this.isPhoneValid=1,this.registerButton()):this.isPhoneValid=2},registerButton(){1==this.isPhoneValid&&1==this.isReconfirmPasswordValid&&1==this.isNameValid&&1==this.isEmailValid&&(this.disabledRegisterButton=0)},registerUser(){const e="http://127.0.0.1:5002/users";I.Z.post(e,{email:this.email,name:this.name,phoneNum:this.phoneNumber,username:this.userName,password:this.password}).then((e=>{console.log(e),this.$router.push({path:"/"})}))}}}),ae=(0,B.Z)(oe,[["render",ne],["__scopeId","data-v-532a6880"]]),le=ae,ie={class:"ion-text-center ion-padding-top"},se=(0,a.aZ)({__name:"viewProfile",setup(e){return(e,t)=>{const n=(0,a.up)("ion-label"),o=(0,a.up)("ion-input"),s=(0,a.up)("ion-item"),r=(0,a.up)("ion-list"),u=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(u,null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i._i),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.Gu),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.sr),null,{default:(0,a.w5)((()=>[(0,a.Wm)((0,l.SU)(i.wd),{class:"ion-text-center"},{default:(0,a.w5)((()=>[(0,a.Uk)("Edit Profile")])),_:1})])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.W2),{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(r,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Email")])),_:1}),(0,a.Wm)(o,{"clear-input":!0,placeholder:"Enter new email"})])),_:1}),(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Phone Number")])),_:1}),(0,a.Wm)(o,{"clear-on-edit":!0,placeholder:"Enter new phone number"})])),_:1}),(0,a.Wm)(s,null,{default:(0,a.w5)((()=>[(0,a.Wm)(n,{position:"stacked"},{default:(0,a.w5)((()=>[(0,a.Uk)("Password")])),_:1}),(0,a.Wm)(o,{type:"password",placeholder:"Enter new password"})])),_:1})])),_:1}),(0,a.Wm)((0,l.SU)(i.W2),{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a._)("div",ie,[(0,a.Wm)((0,l.SU)(i.YG),{shape:"round",expand:"block"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Save ")])),_:1})])])),_:1})])),_:1})])),_:1})])),_:1})}}}),re=se,ue=re,de=(0,a._)("h2",null,"Business Analytics - Number of bookings per location",-1),me=[de];function ce(e,t,n,o,l,i){return(0,a.wg)(),(0,a.iD)("div",null,me)}const pe={name:"BarChart",components:{},data(){return{data:[["Carpark Name","No. of Bookings"]],options:{width:1e3,height:500}}},mounted(){this.getBookings()},methods:{getBookings(){let e=[];const t="http://127.0.0.1:5001/bookings";I.Z.get(t).then((t=>{e=t.data.data.bookings,console.log(e);for(let n=0;n<e.length;n++)console.log(e[n]["bookingLocation"]),this.data.push([e[n]["bookingLocation"],e[n]["currentCapacity"]]);return e})).catch((e=>{console.log(e.message)}))}}},fe=(0,B.Z)(pe,[["render",ce]]),we=fe,ge=(0,a._)("br",null,null,-1);function he(e,t,n,o,l,i){const s=(0,a.up)("ion-input"),r=(0,a.up)("ion-item"),u=(0,a.up)("ion-note"),d=(0,a.up)("ion-button"),m=(0,a.up)("ion-row"),c=(0,a.up)("ion-grid"),p=(0,a.up)("ion-content"),f=(0,a.up)("ion-modal"),w=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(w,{pageTitle:"Forgot Password",needToolBar:"y",needBackButton:"y",pageToGoBack:"/"},{default:(0,a.w5)((()=>[(0,a.Wm)(c,{class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Uk)(" Enter the email associated with your account and we will send you a link to reset your account: "),(0,a.Wm)(r,{fill:"solid",ref:"item",class:"ion-padding-top"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,{clearInput:!0,placeholder:"Email",modelValue:e.email,"onUpdate:modelValue":t[0]||(t[0]=t=>e.email=t)},null,8,["modelValue"])])),_:1},512),(0,a.Wm)(r,{lines:"none"},{default:(0,a.w5)((()=>[2==e.isEmailValid?((0,a.wg)(),(0,a.j4)(u,{key:0,color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Invalid email!")])),_:1})):(0,a.kq)("",!0),1==e.emailNoExist?((0,a.wg)(),(0,a.j4)(u,{key:1,color:"danger"},{default:(0,a.w5)((()=>[(0,a.Uk)("Your email does not exist in our database")])),_:1})):(0,a.kq)("",!0)])),_:1}),(0,a.Wm)(m,{class:"ion-padding-top ion-justify-content-center"},{default:(0,a.w5)((()=>[(0,a.Wm)(d,{shape:"round",onClick:t[1]||(t[1]=t=>e.forgotPassword(e.email))},{default:(0,a.w5)((()=>[(0,a.Uk)("Continue")])),_:1})])),_:1})])),_:1}),(0,a.Wm)(f,{"is-open":e.successOpen,class:"ion-padding"},{default:(0,a.w5)((()=>[(0,a.Wm)(p,{class:"ion-padding-top ion-padding"},{default:(0,a.w5)((()=>[(0,a.Uk)(" An email to reset your password has been sent to the email. Do follow the instructions on the email. "),ge,(0,a.Uk)(" Bringing you back to Login page..... "),(0,a.Wm)(d,{shape:"round",onClick:t[2]||(t[2]=t=>{e.routeToLoginPage()}),expand:"block",size:"large"},{default:(0,a.w5)((()=>[(0,a.Uk)("Login")])),_:1})])),_:1})])),_:1},8,["is-open"])])),_:1})}const _e=(0,a.aZ)({components:{IonInput:i.pK,IonItem:i.Ie,IonModal:i.ki,IonContent:i.W2},data(){return{email:"",isEmailValid:0,successOpen:!1,emailNoExist:!1}},methods:{routeToLoginPage(){this.$router.push({path:"/"}).then((()=>{this.$router.go(0)})),location.reload()},setSuccessOpen(e){this.successOpen=e,this.$router.push({path:"/"}).then((()=>{this.$router.go(0)})),location.reload()},forgotPassword(e){if(e.match("@")){this.isEmailValid=1;const e=this.email.split("@")[0],t=this.email.split("@")[1],n="http://127.0.0.1:5002/checkUserExist?email="+e+"&account="+t;I.Z.get(n).then((e=>{const t=e.data.message;if("User exists"==t){this.successOpen=!0;setTimeout((()=>this.setSuccessOpen(!1)),2e3)}"User not found"==t&&(this.emailNoExist=!0)}))}else this.isEmailValid=2}}}),ke=(0,B.Z)(_e,[["render",he]]),be=ke,We=[{path:"/",component:C},{path:"/tabs/",component:f,children:[{path:"",redirect:"/tabs/home"},{path:"home",component:()=>n.e(422).then(n.bind(n,2422))},{path:"wallet",component:()=>n.e(753).then(n.bind(n,753))},{path:"plans",component:()=>n.e(162).then(n.bind(n,1162))},{path:"map",component:()=>n.e(860).then(n.bind(n,5860))},{path:"profile",component:()=>n.e(204).then(n.bind(n,7204))}]},{path:"/viewBooking",component:O},{path:"/nearbyme",component:ee},{path:"/buySubscription",component:Q},{path:"/register",component:le},{path:"/viewProfile",component:ue},{path:"/BarChart",component:we},{path:"/forgotPassword",component:be}],Ue=(0,d.p7)({history:(0,d.PO)("/"),routes:We}),ye=Ue;n(8851),n(1292),n(1633),n(1045),n(6187),n(2299),n(3423),n(4687),n(9147),n(6250);var ve=n(2903);const Ie=(0,o.ri)(u).use(i.oX).use(ye).use(ve.ZP,{load:{key:"AIzaSyAJXGx7T2ypt5Ew5-9SbDTWF9gqloQUJwI"}});Ie.component("base-layout",F),ye.isReady().then((()=>{Ie.mount("#app")}))},6319:(e,t,n)=>{"use strict";e.exports=n.p+"img/nets.28cc9b1e.png"}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,n),l.exports}n.m=e,(()=>{var e=[];n.O=(t,o,a,l)=>{if(!o){var i=1/0;for(d=0;d<e.length;d++){for(var[o,a,l]=e[d],s=!0,r=0;r<o.length;r++)(!1&l||i>=l)&&Object.keys(n.O).every((e=>n.O[e](o[r])))?o.splice(r--,1):(s=!1,l<i&&(i=l));if(s){e.splice(d--,1);var u=a();void 0!==u&&(t=u)}}return t}l=l||0;for(var d=e.length;d>0&&e[d-1][2]>l;d--)e[d]=e[d-1];e[d]=[o,a,l]}})(),(()=>{n.n=e=>{var t=e&&e.__esModule?()=>e["default"]:()=>e;return n.d(t,{a:t}),t}})(),(()=>{n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}})(),(()=>{n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,o)=>(n.f[o](e,t),t)),[]))})(),(()=>{n.u=e=>"js/"+e+"-legacy."+{78:"04bed2f4",162:"fff3fb9c",204:"1b8edfce",311:"ea995d76",338:"47a310ee",422:"51334035",576:"7593a8dd",753:"74027a13",775:"29f69a73",777:"668e7351",814:"7b70ed48",823:"b2cf86b7",860:"0f9f4fe7",990:"7c8b4718"}[e]+".js"})(),(()=>{n.miniCssF=e=>"css/"+e+"."+{162:"438b8af8",204:"f4a75965",753:"998fe919",860:"b296b77a"}[e]+".css"})(),(()=>{n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})(),(()=>{var e={},t="HUAT:";n.l=(o,a,l,i)=>{if(e[o])e[o].push(a);else{var s,r;if(void 0!==l)for(var u=document.getElementsByTagName("script"),d=0;d<u.length;d++){var m=u[d];if(m.getAttribute("src")==o||m.getAttribute("data-webpack")==t+l){s=m;break}}s||(r=!0,s=document.createElement("script"),s.charset="utf-8",s.timeout=120,n.nc&&s.setAttribute("nonce",n.nc),s.setAttribute("data-webpack",t+l),s.src=o),e[o]=[a];var c=(t,n)=>{s.onerror=s.onload=null,clearTimeout(p);var a=e[o];if(delete e[o],s.parentNode&&s.parentNode.removeChild(s),a&&a.forEach((e=>e(n))),t)return t(n)},p=setTimeout(c.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=c.bind(null,s.onerror),s.onload=c.bind(null,s.onload),r&&document.head.appendChild(s)}}})(),(()=>{n.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}})(),(()=>{n.p="/"})(),(()=>{if("undefined"!==typeof document){var e=(e,t,n,o,a)=>{var l=document.createElement("link");l.rel="stylesheet",l.type="text/css";var i=n=>{if(l.onerror=l.onload=null,"load"===n.type)o();else{var i=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.href||t,r=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");r.code="CSS_CHUNK_LOAD_FAILED",r.type=i,r.request=s,l.parentNode.removeChild(l),a(r)}};return l.onerror=l.onload=i,l.href=t,n?n.parentNode.insertBefore(l,n.nextSibling):document.head.appendChild(l),l},t=(e,t)=>{for(var n=document.getElementsByTagName("link"),o=0;o<n.length;o++){var a=n[o],l=a.getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(l===e||l===t))return a}var i=document.getElementsByTagName("style");for(o=0;o<i.length;o++){a=i[o],l=a.getAttribute("data-href");if(l===e||l===t)return a}},o=o=>new Promise(((a,l)=>{var i=n.miniCssF(o),s=n.p+i;if(t(i,s))return a();e(o,s,null,a,l)})),a={143:0};n.f.miniCss=(e,t)=>{var n={162:1,204:1,753:1,860:1};a[e]?t.push(a[e]):0!==a[e]&&n[e]&&t.push(a[e]=o(e).then((()=>{a[e]=0}),(t=>{throw delete a[e],t})))}}})(),(()=>{var e={143:0};n.f.j=(t,o)=>{var a=n.o(e,t)?e[t]:void 0;if(0!==a)if(a)o.push(a[2]);else{var l=new Promise(((n,o)=>a=e[t]=[n,o]));o.push(a[2]=l);var i=n.p+n.u(t),s=new Error,r=o=>{if(n.o(e,t)&&(a=e[t],0!==a&&(e[t]=void 0),a)){var l=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;s.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",s.name="ChunkLoadError",s.type=l,s.request=i,a[1](s)}};n.l(i,r,"chunk-"+t,t)}},n.O.j=t=>0===e[t];var t=(t,o)=>{var a,l,[i,s,r]=o,u=0;if(i.some((t=>0!==e[t]))){for(a in s)n.o(s,a)&&(n.m[a]=s[a]);if(r)var d=r(n)}for(t&&t(o);u<i.length;u++)l=i[u],n.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return n.O(d)},o=self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var o=n.O(void 0,[998],(()=>n(4671)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxFQUFRNUcsRUFDbEMsQ0FFQSxJQURHMEcsR0FBNEJBLEVBQTJCblQsR0FDckRnSyxFQUFJa0QsRUFBUzNFLE9BQVF5QixJQUN6QnVFLEVBQVVyQixFQUFTbEQsR0FDaEJ5QyxFQUFvQnlCLEVBQUUyRSxFQUFpQnRFLElBQVlzRSxFQUFnQnRFLElBQ3JFc0UsRUFBZ0J0RSxHQUFTLEtBRTFCc0UsRUFBZ0J0RSxHQUFXLEVBRTVCLE9BQU85QixFQUFvQk8sRUFBRUMsRUFBTyxFQUdqQ3NHLEVBQXFCQyxLQUFLLG9CQUFzQkEsS0FBSyxxQkFBdUIsR0FDaEZELEVBQW1CekMsUUFBUW9DLEVBQXFCbkMsS0FBSyxLQUFNLElBQzNEd0MsRUFBbUJoUyxLQUFPMlIsRUFBcUJuQyxLQUFLLEtBQU13QyxFQUFtQmhTLEtBQUt3UCxLQUFLd0MsRyxLQ2xGdkYsSUFBSUUsRUFBc0JoSCxFQUFvQk8sT0FBRUosRUFBVyxDQUFDLE1BQU0sSUFBT0gsRUFBb0IsUUFDN0ZnSCxFQUFzQmhILEVBQW9CTyxFQUFFeUcsRSIsInNvdXJjZXMiOlsid2VicGFjazovL0hVQVQvLi9ub2RlX21vZHVsZXMvQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvIGxhenkgXlxcLlxcLy4qXFwuZW50cnlcXC5qcy4qJCBpbmNsdWRlOiBcXC5lbnRyeVxcLmpzJCBleGNsdWRlOiBcXC5zeXN0ZW1cXC5lbnRyeVxcLmpzJCBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0hVQVQvLi9zcmMvQXBwLnZ1ZT8yYTVlIiwid2VicGFjazovL0hVQVQvLi9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0JvdHRvbVRhYnMudnVlPzUzYWEiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9Cb3R0b21UYWJzLnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0xvZ2luUGFnZS52dWUiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9Mb2dpblBhZ2UudnVlP2ZjZTMiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy92aWV3Qm9va2luZy52dWUiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy92aWV3Qm9va2luZy52dWU/NDg1MyIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL2J1eVN1YnNjcmlwdGlvbi52dWU/NjQwYyIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL2NvbXBvbmVudHMvYmFzZUxheW91dC52dWU/OTA4OSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL2NvbXBvbmVudHMvYmFzZUxheW91dC52dWU/OGU4YyIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL2NvbXBvbmVudHMvYmFzZUxheW91dC52dWUiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9idXlTdWJzY3JpcHRpb24udnVlPzY5YWYiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9idXlTdWJzY3JpcHRpb24udnVlIiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvbmVhcmJ5bWVQYWdlLnZ1ZT85NzY1Iiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvbmVhcmJ5bWVQYWdlLnZ1ZT9jNDlkIiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvbmVhcmJ5bWVQYWdlLnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL3JlZ2lzdGVyUGFnZS52dWU/ZTg5MCIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL3JlZ2lzdGVyUGFnZS52dWU/YWU3MyIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL3JlZ2lzdGVyUGFnZS52dWUiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy92aWV3UHJvZmlsZS52dWU/MDJkOCIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL3ZpZXdQcm9maWxlLnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0JhckNoYXJ0LnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0JhckNoYXJ0LnZ1ZT9hMmY4Iiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvZm9yZ290UGFzc3dvcmRQYWdlLnZ1ZT8zOTU1Iiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvZm9yZ290UGFzc3dvcmRQYWdlLnZ1ZT9kYTY2Iiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvZm9yZ290UGFzc3dvcmRQYWdlLnZ1ZSIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL3JvdXRlci9pbmRleC50cyIsIndlYnBhY2s6Ly9IVUFULy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9IVUFUL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9IVUFUL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9IVUFUL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL0hVQVQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9IVUFUL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0hVQVQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vSFVBVC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9IVUFUL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQocmVxKSB7XG5cdC8vIEhlcmUgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigpIGlzIHVzZWQgaW5zdGVhZCBvZiBuZXcgUHJvbWlzZSgpIHRvIHByZXZlbnRcblx0Ly8gdW5jYXVnaHQgZXhjZXB0aW9uIHBvcHBpbmcgdXAgaW4gZGV2dG9vbHNcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fSk7XG59XG53ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQua2V5cyA9ICgpID0+IChbXSk7XG53ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dDtcbndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dC5pZCA9IDE5OTM7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dDsiLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmltcG9ydCB7IElvbkFwcCxJb25UYWJCYXIsIElvblRhYkJ1dHRvbiwgSW9uVGFicywgSW9uTGFiZWwsIElvbkljb24sIElvblBhZ2UsIElvblJvdXRlck91dGxldCB9IGZyb20gJ0Bpb25pYy92dWUnO1xuaW1wb3J0IHsgYWxidW1zLCBjYXJkLCBlbGxpcHNlLCBob21lLCBtYXAsIHBlcnNvbiwgc3F1YXJlLCB0cmlhbmdsZSB9IGZyb20gJ2lvbmljb25zL2ljb25zJztcblxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6ICdBcHAnLFxuICBzZXR1cChfX3Byb3BzKSB7XG5cblxucmV0dXJuIChfY3R4OiBhbnksX2NhY2hlOiBhbnkpID0+IHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfdW5yZWYoSW9uUGFnZSksIG51bGwsIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkFwcCksIG51bGwsIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uUm91dGVyT3V0bGV0KSlcbiAgICAgICAgXSksXG4gICAgICAgIF86IDFcbiAgICAgIH0pXG4gICAgXSksXG4gICAgXzogMVxuICB9KSlcbn1cbn1cblxufSkiLCJpbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuXG5jb25zdCBfX2V4cG9ydHNfXyA9IHNjcmlwdDtcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5pbXBvcnQgeyBJb25UYWJCYXIsIElvblRhYkJ1dHRvbiwgSW9uVGFicywgSW9uTGFiZWwsIElvbkljb24sIElvblBhZ2UsIElvblJvdXRlck91dGxldCB9IGZyb20gJ0Bpb25pYy92dWUnO1xuaW1wb3J0IHsgYWxidW1zLCBjYXJkLCBlbGxpcHNlLCBob21lLCBtYXAsIHBlcnNvbiwgc3F1YXJlLCB0cmlhbmdsZSB9IGZyb20gJ2lvbmljb25zL2ljb25zJztcblxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6ICdCb3R0b21UYWJzJyxcbiAgc2V0dXAoX19wcm9wcykge1xuXG5cbnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX3VucmVmKElvblBhZ2UpLCBudWxsLCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25UYWJzKSwgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25Sb3V0ZXJPdXRsZXQpKSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvblRhYkJhciksIHsgc2xvdDogXCJib3R0b21cIiB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uVGFiQnV0dG9uKSwge1xuICAgICAgICAgICAgICAgIHRhYjogXCJob21lXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogXCIvdGFicy9ob21lXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uSWNvbiksIHsgaWNvbjogX3VucmVmKGhvbWUpIH0sIG51bGwsIDgsIFtcImljb25cIl0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25MYWJlbCksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJIb21lXCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uVGFiQnV0dG9uKSwge1xuICAgICAgICAgICAgICAgIHRhYjogXCJ3YWxsZXRcIixcbiAgICAgICAgICAgICAgICBocmVmOiBcIi90YWJzL3dhbGxldFwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkljb24pLCB7IGljb246IF91bnJlZihjYXJkKSB9LCBudWxsLCA4LCBbXCJpY29uXCJdKSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uTGFiZWwpLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiV2FsbGV0XCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uVGFiQnV0dG9uKSwge1xuICAgICAgICAgICAgICAgIHRhYjogXCJwbGFuc1wiLFxuICAgICAgICAgICAgICAgIGhyZWY6IFwiL3RhYnMvcGxhbnNcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25JY29uKSwgeyBpY29uOiBfdW5yZWYoYWxidW1zKSB9LCBudWxsLCA4LCBbXCJpY29uXCJdKSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uTGFiZWwpLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIFBsYW5zXCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uVGFiQnV0dG9uKSwge1xuICAgICAgICAgICAgICAgIHRhYjogXCJtYXBcIixcbiAgICAgICAgICAgICAgICBocmVmOiBcIi90YWJzL21hcFwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkljb24pLCB7IGljb246IF91bnJlZihtYXApIH0sIG51bGwsIDgsIFtcImljb25cIl0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25MYWJlbCksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJNYXBcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25UYWJCdXR0b24pLCB7XG4gICAgICAgICAgICAgICAgdGFiOiBcInByb2ZpbGVcIixcbiAgICAgICAgICAgICAgICBocmVmOiBcIi90YWJzL3Byb2ZpbGVcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25JY29uKSwgeyBpY29uOiBfdW5yZWYocGVyc29uKSB9LCBudWxsLCA4LCBbXCJpY29uXCJdKSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uTGFiZWwpLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiUHJvZmlsZVwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0pKVxufVxufVxuXG59KSIsImltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQm90dG9tVGFicy52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9Cb3R0b21UYWJzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPXRzXCJcblxuY29uc3QgX19leHBvcnRzX18gPSBzY3JpcHQ7XG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiPHRlbXBsYXRlPlxuICA8YmFzZS1sYXlvdXQgPlxuICAgIDxpb24tZ3JpZCBzY3JvbGwteT1cImZhbHNlXCI+XG4gICAgICA8aW9uLXJvdyBjbGFzcz1cImlvbi1qdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgIDxpbWcgOnNyYz1cInJlcXVpcmUoJy4uL2ltYWdlcy9uZXRzLnBuZycpXCIgLz5cbiAgICAgIDwvaW9uLXJvdz5cblxuICAgICAgPGlvbi1yb3cgY2xhc3M9XCJpb24tanVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICA8aWNvbi1jb2wgc2l6ZT1cIjlcIiBjbGFzcz1cInBhZ2VIZWFkZXJcIj4gTG9naW4gPC9pY29uLWNvbD5cbiAgICAgIDwvaW9uLXJvdz5cblxuICAgICAgPCEtLSB1c2VybmFtZSAtLT5cbiAgICAgIDxpb24taXRlbSBmaWxsPVwic29saWRcIiByZWY9XCJpdGVtXCI+XG4gICAgICAgIDwhLS0gPGlvbi1pbnB1dCA6Y2xlYXJJbnB1dD1cInRydWVcIiBwbGFjZWhvbGRlcj1cIlVzZXJuYW1lOlwiIHR5cGU9XCJlbWFpbFwiIEBpb25JbnB1dD1cInZhbGlkYXRlXCI+PC9pb24taW5wdXQ+IC0tPlxuICAgICAgICA8aW9uLWlucHV0XG4gICAgICAgICAgOmNsZWFySW5wdXQ9XCJ0cnVlXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlVzZXJuYW1lXCJcbiAgICAgICAgICB2LW1vZGVsPVwidXNlcm5hbWVcIlxuICAgICAgICA+PC9pb24taW5wdXQ+XG4gICAgICA8L2lvbi1pdGVtPlxuICAgICAgXG4gICAgICA8IS0tIHBhc3N3b3JkIC0tPlxuICAgICAgPGlvbi1pdGVtPlxuICAgICAgICA8aW9uLWlucHV0XG4gICAgICAgICAgOmNsZWFySW5wdXQ9XCJ0cnVlXCJcbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIlxuICAgICAgICAgIHYtbW9kZWw9XCJwYXNzd29yZFwiXG4gICAgICAgID48L2lvbi1pbnB1dD5cbiAgICAgIDwvaW9uLWl0ZW0+XG4gICAgICBcbiAgICAgIDxpb24tcm93IGNsYXNzPVwiaW9uLXBhZGRpbmctdG9wXCI+XG4gICAgICAgIDxpb24tY29sPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJteUxpbmUgaW9uLWp1c3RpZnktY29udGVudC1zdGFydFwiPlxuICAgICAgICAgICAgPGlvbi1pdGVtIGxpbmVzPVwibm9uZVwiPlxuICAgICAgICAgICAgICA8aW9uLWNoZWNrYm94PjwvaW9uLWNoZWNrYm94PlxuICAgICAgICAgICAgICA8aW9uLWxhYmVsPiBSZW1lbWJlciBtZTwvaW9uLWxhYmVsPlxuICAgICAgICAgICAgPC9pb24taXRlbT5cbiAgICAgICAgICAgIDwhLS0gPGlvbi1idXR0b24gY2xhc3M9XCJoeXBlcmxpbmtCdXR0b25cIiA+Rm9yZ290IFBhc3N3b3JkPC9pb24tYnV0dG9uPiAtLT5cbiAgICAgICAgICAgIDxhIGZsb2F0LXJpZ2h0IGNsYXNzPVwibXlMaW5lMlwiIGhyZWY9XCIvZm9yZ290UGFzc3dvcmRcIj5Gb3Jnb3QgcGFzc3dvcmQ/PC9hPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2lvbi1jb2w+XG4gICAgICA8L2lvbi1yb3c+XG5cbiAgICAgIDxpb24tcm93IGNsYXNzPVwiaW9uLXBhZGRpbmctdG9wXCI+XG4gICAgICAgIDxpb24tY29sPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpb24tdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIvcmVnaXN0ZXJcIj4gRG8gbm90IGhhdmUgYW4gYWNjb3VudD8gU2lnbiB1cCBub3chIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9pb24tY29sPlxuICAgICAgPC9pb24tcm93PlxuICAgICAgXG4gICAgICA8IS0tIGxvZ2luIC0tPlxuICAgICAgPGlvbi1yb3cgY2xhc3M9XCJpb24tcGFkZGluZy10b3AgaW9uLWp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgPGlvbi1idXR0b24gc2hhcGU9XCJyb3VuZFwiIEBjbGljaz1cInZhbGlkYXRlTG9naW4oKVwiPkxvZ2luPC9pb24tYnV0dG9uPlxuICAgICAgPC9pb24tcm93PlxuICAgICAgPCEtLSBsb2dpbiBlcnJvciBtZXNzYWdlIC0tPlxuICBcblxuICAgICAgPCEtLSBQYXNzd29yZCBlcnJvciBtZXNzYWdlIC0tPlxuICAgICAgPGlvbi1pdGVtIGxpbmVzPVwibm9uZVwiPlxuICAgICAgICAgIDxpb24tbm90ZSBjb2xvcj1cImRhbmdlclwiPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGkgdi1pZj1cInVzZXJuYW1lRXJyb3IgIT0gJycgXCI+e3sgdXNlcm5hbWVFcnJvciB9fTwvbGk+XG4gICAgICAgICAgICAgIDxsaSB2LWlmPVwicGFzc3dvcmRFcnJvciAhPSAnJyBcIj57eyBwYXNzd29yZEVycm9yIH19PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9pb24tbm90ZT5cbiAgICAgIDwvaW9uLWl0ZW0+XG5cbiAgICAgIDwhLS0gdXNlcm5hbWUgZXJyb3IgbWVzc2FnZSAtLT5cbiAgICAgIDwhLS0gPGlvbi1pdGVtIGxpbmVzPVwibm9uZVwiIHYtaWY9XCJcIj5cbiAgICAgICAgICA8aW9uLW5vdGUgY29sb3I9XCJkYW5nZXJcIj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgPGxpPnt7IHVzZXJuYW1lRXJyb3IgfX08L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2lvbi1ub3RlPlxuICAgICAgPC9pb24taXRlbT4gLS0+XG5cblxuICAgICAgPGlvbi1pdGVtIGxpbmVzPVwibm9uZVwiPlxuICAgICAgICAgIDxpb24tbm90ZSBjb2xvcj1cImRhbmdlclwiPlxuICAgICAgICAgICAgPHVsIGlkPVwiaGlcIj5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9pb24tbm90ZT5cbiAgICAgIDwvaW9uLWl0ZW0+XG5cbiAgICA8L2lvbi1ncmlkPlxuICA8L2Jhc2UtbGF5b3V0PlxuPC90ZW1wbGF0ZT4gXG5cbjxzY3JpcHQ+XG5pbXBvcnQge1xuICBJb25Sb3csXG4gIElvbklucHV0LFxuICBJb25JdGVtLFxuICBJb25CdXR0b24sXG4gIElvbkNoZWNrYm94LFxuICBJb25MYWJlbCxcbiAgSW9uTm90ZSxcbiAgSW9uQ29sLFxuICBJb25HcmlkXG59IGZyb20gXCJAaW9uaWMvdnVlXCI7IC8vIElvbkNvbCwgSW9uTGlzdFxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICAgIElvblJvdyxcbiAgICBJb25HcmlkLFxuICAgIElvbkNvbCxcbiAgICBJb25Ob3RlLFxuICAgIElvbklucHV0LFxuICAgIElvbkl0ZW0sXG4gICAgSW9uQnV0dG9uLFxuICAgIElvbkNoZWNrYm94LFxuICAgIElvbkxhYmVsLFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VybmFtZTogXCJcIixcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgICAgcGFzc3dvcmRFcnJvcjogXCJcIixcbiAgICAgIHVzZXJuYW1lRXJyb3I6IFwiXCIsXG4gICAgICBsb2dpbkVycm9yOiBcIlwiLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpbml0KCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyRGF0YVwiLCBcIlwiKTtcbiAgICB9LFxuICAgIHZhbGlkYXRlTG9naW4oKSB7XG4gICAgICBsZXQgZGF0YSA9IFwiXCI7XG4gICAgICBsZXQgY29uZmlnID0ge307XG5cbiAgICAgIGlmKHRoaXMudXNlcm5hbWUgIT0gXCJcIiAmJiB0aGlzLnBhc3N3b3JkICE9IFwiXCIpe1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInVzZXJuYW1lIGFuZCBwYXNzd29yZCBhdmFpbFwiKVxuICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIFwidXNlcm5hbWVcIjogdGhpcy51c2VybmFtZSxcbiAgICAgICAgICBcInBhc3N3b3JkXCI6IHRoaXMucGFzc3dvcmRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY29udGFpbnMgdGhlIGNvbmZpZ3VyYXRpb24gdGhhdCB3YXMgc2VudCBhbG9uZyB3aXRoIHRoZSByZXF1ZXN0XG4gICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo1MDAyL3VzZXJsb2dpbicsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb3V0ZXIgPSB0aGlzLiRyb3V0ZXI7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSAgYXhpb3MoY29uZmlnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyRGF0YVwiLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhLmRhdGEpKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICByb3V0ZXIucHVzaChcInRhYnNcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBcIkluY29ycmVjdCBsb2dpbiBkZXRhaWxzLiBQbGVhc2UgdHJ5IGFnYWluXCJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhpXCIpLmlubmVyVGV4dCA9IGVycm9yXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIGVycm9yXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnVzZXJuYW1lID09ICcnKSB7XG4gICAgICAgICAgdGhpcy51c2VybmFtZUVycm9yID0gXCJVc2VybmFtZSBjYW5ub3QgYmUgZW1wdHlcIjtcbiAgICAgICAgfSBcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgPT0gJycpe1xuICAgICAgICAgIHRoaXMucGFzc3dvcmRFcnJvciA9IFwiUGFzc3dvcmQgY2Fubm90IGJlIGVtcHR5XCI7XG4gICAgICAgIH1cbiAgICAgIH0gICAgICBcbiAgICB9LFxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuaW5pdCgpXG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pb24tY29udGVudCB7XG4gIC0tb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuaW1nIHtcbiAgLyogLS1wYWRkaW5nLXRvcDogMTAwcHg7ICB0aGlzIGlzIGZvciBpb24gY29udGVudCovXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcbiAgd2lkdGg6IDI5MHB4O1xufVxuLnBhZ2VIZWFkZXIge1xuICBwYWRkaW5nLXRvcDogNjBweDtcbiAgcGFkZGluZy1ib3R0b206IDYwcHg7XG4gIGZvbnQtc2l6ZTogMzVweDtcbiAgY29sb3I6ICM0ODQ3NDc7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG59XG5cbmlvbi1jaGVja2JveCB7XG4gIC0tc2l6ZTogMTRweDtcbn1cblxuLm15TGluZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIC8qIGZvbnQtc2l6ZTogMTRweDsgKi9cbn1cblxuLm15TGluZTIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAvKiBwYWRkaW5nLWxlZnQ6IDEwcHg7ICovXG59XG5cbi8qIC5oeXBlcmxpbmtCdXR0b257XG4gIC0tY29sb3I6IGJsYWNrO1xuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAtLXNpemU6IDEwcHg7XG4gIGZvbnQtc2l6ZTogMTRweFxuICBcbn0gKi9cbjwvc3R5bGU+XG48IS0tIHB1cnBvc2UgZmlsdGVyaW5nOiBmb2N1cyAtLT5cbjwhLS0gcHVycG9zZSBtYXJrZXRpbmc6IGF0dHJhY3QgLS0+XG48IS0tIHB1cnBvc2Ugc2FsZXM6IGNvbnZlcnQgY3VzdG9tZXJzIC0tPlxuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ODM0ZGFiOCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc4MzRkYWI4JnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL25pa2tpL0RvY3VtZW50cy9HaXRIdWIvSFVBVEhVQVQvSFVBVC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTc4MzRkYWI4XCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCI8dGVtcGxhdGU+XG4gIDxiYXNlLWxheW91dFxuICAgIHBhZ2VUaXRsZT1cIk15IEJvb2tpbmdzXCJcbiAgICBuZWVkQmFja0J1dHRvbj1cInlcIlxuICAgIHBhZ2VUb0dvQmFjaz1cIi90YWJzL3Byb2ZpbGVcIlxuICAgIG5lZWRUb29sQmFyPVwieVwiXG4gID5cbiAgICA8aW9uLXNlYXJjaGJhcj48L2lvbi1zZWFyY2hiYXI+XG4gICAgPGlvbi1jYXJkIHYtZm9yPVwiZWFjaEJvb2tpbmcgaW4gYm9va2luZ0RldGFpbHNcIiA6a2V5PVwiZWFjaEJvb2tpbmdcIj5cbiAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvaW9uLmpwZ1wiIC8+XG4gICAgICA8aW9uLWdyaWQ+XG4gICAgICAgIDxpb24tY2FyZC1oZWFkZXI+XG4gICAgICAgICAgPGlvbi1yb3c+XG4gICAgICAgICAgICA8aW9uLWNvbD5cbiAgICAgICAgICAgICAgPGlvbi1jYXJkLXN1YnRpdGxlXG4gICAgICAgICAgICAgICAgPkJvb2tpbmcgUmVmOjx1PlxuICAgICAgICAgICAgICAgICAge3sgZWFjaEJvb2tpbmcuYm9va2luZ1JlZiB9fVxuICAgICAgICAgICAgICAgIDwvdT48L2lvbi1jYXJkLXN1YnRpdGxlXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGlvbi1yb3cgY2xhc3M9XCJpb24tcGFkZGluZy10b3AgaW9uLWp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgPGlvbi1idXR0b24gc2hhcGU9XCJyb3VuZFwiIEBjbGljaz1cImVkaXRCb29raW5nKClcIj5FZGl0PC9pb24tYnV0dG9uPlxuICAgICAgPC9pb24tcm93PlxuICAgICAgIDxpb24tcm93IGNsYXNzPVwiaW9uLXBhZGRpbmctdG9wIGlvbi1qdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgIDxpb24tYnV0dG9uIHNoYXBlPVwicm91bmRcIiBAY2xpY2s9XCJkZWxldGVCb29raW5nKGVhY2hCb29raW5nLmJvb2tpbmdJRClcIiBjb2xvcj1cImRhbmdlclwiID5EZWxldGU8L2lvbi1idXR0b24+XG4gICAgICA8L2lvbi1yb3c+XG4gICAgICAgICAgICA8L2lvbi1jb2w+XG4gICAgICAgICAgPC9pb24tcm93PlxuICAgICAgICAgIDxpb24tcm93PlxuICAgICAgICAgICAgPGlvbi1jb2w+XG4gICAgICAgICAgICAgIDxpb24tY2FyZC1zdWJ0aXRsZVxuICAgICAgICAgICAgICAgID5TdGFydCBEYXRlOiB7eyBlYWNoQm9va2luZy5zdGFydERhdGUgfX08L2lvbi1jYXJkLXN1YnRpdGxlXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgIFxuICAgICAgICAgICAgICA8aW9uLWNhcmQtc3VidGl0bGU+RW5kIERhdGU6IHt7IGVhY2hCb29raW5nLmVuZERhdGUgfX08L2lvbi1jYXJkLXN1YnRpdGxlPlxuICAgICAgICAgICAgPC9pb24tY29sPlxuICAgICAgICAgICAgPGlvbi1jb2w+XG4gICAgICAgICAgICAgIDxpb24tY2FyZC1zdWJ0aXRsZVxuICAgICAgICAgICAgICAgID5TdGFydCBUaW1lOiB7eyBlYWNoQm9va2luZy5zdGFydFRpbWUgfX08L2lvbi1jYXJkLXN1YnRpdGxlXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxpb24tY2FyZC1zdWJ0aXRsZT5FbmQgVGltZTp7eyBlYWNoQm9va2luZy5lbmRUaW1lIH19PC9pb24tY2FyZC1zdWJ0aXRsZT5cbiAgICAgICAgICAgIDwvaW9uLWNvbD5cbiAgICAgICAgICAgIDxpb24tY29sPlxuICAgICAgICAgICAgICA8aW9uLWl0ZW0gbGluZXM9XCJub25lXCI+XG4gICAgICAgICAgICAgICAgPGlvbi1iYWRnZSBjb2xvcj1cInN1Y2Nlc3NcIiBzbG90PVwiZW5kXCI+e3tcbiAgICAgICAgICAgICAgICAgIGVhY2hCb29raW5nLnN0YXR1c1xuICAgICAgICAgICAgICAgIH19PC9pb24tYmFkZ2U+XG4gICAgICAgICAgICAgIDwvaW9uLWl0ZW0+XG4gICAgICAgICAgICA8L2lvbi1jb2w+XG4gICAgICAgICAgPC9pb24tcm93PlxuICAgICAgICAgIDxpb24tcm93PlxuICAgICAgICAgICAgPGlvbi1jb2w+XG4gICAgICAgICAgICAgIDxpb24tY2FyZC10aXRsZT57eyBlYWNoQm9va2luZy5ib29raW5nTG9jYXRpb24gfX08L2lvbi1jYXJkLXRpdGxlPlxuICAgICAgICAgICAgICA8IS0tIDxpb24tY2FyZC1zdWJ0aXRsZT57e1xuICAgICAgICAgICAgICAgIGVhY2hCb29raW5nLmxvY2F0aW9uTmFtZVxuICAgICAgICAgICAgICB9fTwvaW9uLWNhcmQtc3VidGl0bGU+IC0tPlxuICAgICAgICAgICAgPC9pb24tY29sPlxuICAgICAgICAgICAgPGlvbi1jb2w+XG4gICAgICAgICAgICAgIDxpb24taXRlbSBsaW5lcz1cIm5vbmVcIj5cbiAgICAgICAgICAgICAgICA8aW9uLWJ1dHRvbiBmaWxsPVwib3V0bGluZVwiIHNsb3Q9XCJlbmRcIj5EaXJlY3Rpb25zPC9pb24tYnV0dG9uPlxuICAgICAgICAgICAgICA8L2lvbi1pdGVtPlxuICAgICAgICAgICAgPC9pb24tY29sPlxuICAgICAgICAgIDwvaW9uLXJvdz5cbiAgICAgICAgPC9pb24tY2FyZC1oZWFkZXI+XG4gICAgICA8L2lvbi1ncmlkPlxuICAgIDwvaW9uLWNhcmQ+XG4gIDwvYmFzZS1sYXlvdXQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHtcbiAgSW9uQ2FyZCxcbiAgSW9uQ2FyZEhlYWRlcixcbiAgSW9uQ2FyZFN1YnRpdGxlLFxuICBJb25DYXJkVGl0bGUsXG4gIElvblNlYXJjaGJhcixcbiAgSW9uQmFkZ2Vcbn0gZnJvbSBcIkBpb25pYy92dWVcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGFycm93QmFjaywgaG9tZSwgc3RhciB9IGZyb20gXCJpb25pY29ucy9pY29uc1wiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gICAgSW9uQ2FyZCxcbiAgICBJb25DYXJkSGVhZGVyLFxuICAgIElvbkNhcmRTdWJ0aXRsZSxcbiAgICBJb25DYXJkVGl0bGUsXG4gICAgSW9uU2VhcmNoYmFyLFxuICAgIElvbkJhZGdlXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvb2tpbmdEZXRhaWxzOiBbXSxcbiAgICAgIC8vIHBhc3N3b3JkRXJyb3JzOiBBcnJheTxzdHJpbmc+KCksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlbGV0ZUJvb2tpbmcoYm9va2luZ0lEKSB7XG4gICAgICBjb25zdCB1cmwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMS9ib29raW5ncy9cIiArIGJvb2tpbmdJRDsgLy8gaGFyZGNvZGVkXG4gICAgICBjb25zb2xlLmxvZyh1cmwpXG4gICAgICBheGlvc1xuICAgICAgICAuZGVsZXRlKHVybClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG4gICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICAgIFxuICAgIH0sXG4gICAgZ2V0QWxsQm9va2luZ3MoKSB7XG4gICAgICBjb25zdCB1cmwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMS9ib29raW5nc1wiOyAvLyBoYXJkY29kZWRcbiAgICAgIGF4aW9zXG4gICAgICAgIC5nZXQodXJsKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhLmJvb2tpbmdzO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgICAgZm9yIChjb25zdCBlYWNoQm9va2luZyBvZiBkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydERhdGVUaW1lID0gbmV3IERhdGUoZWFjaEJvb2tpbmcuc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZU9ubHkgPVxuICAgICAgICAgICAgICBzdGFydERhdGVUaW1lLmdldERhdGUoKSArXG4gICAgICAgICAgICAgIFwiL1wiICtcbiAgICAgICAgICAgICAgc3RhcnREYXRlVGltZS5nZXRNb250aCgpICtcbiAgICAgICAgICAgICAgMSArXG4gICAgICAgICAgICAgIFwiL1wiICtcbiAgICAgICAgICAgICAgc3RhcnREYXRlVGltZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lT25seSA9XG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZVRpbWUuZ2V0SG91cnMoKSArIFwiOlwiICsgc3RhcnREYXRlVGltZS5nZXRNaW51dGVzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVuZERhdGVUaW1lID0gbmV3IERhdGUoZWFjaEJvb2tpbmcuZW5kVGltZSk7XG4gICAgICAgICAgICBjb25zdCBlbmREYXRlT25seSA9XG4gICAgICAgICAgICAgIGVuZERhdGVUaW1lLmdldERhdGUoKSArXG4gICAgICAgICAgICAgIFwiL1wiICtcbiAgICAgICAgICAgICAgZW5kRGF0ZVRpbWUuZ2V0TW9udGgoKSArXG4gICAgICAgICAgICAgIDEgK1xuICAgICAgICAgICAgICBcIi9cIiArXG4gICAgICAgICAgICAgIGVuZERhdGVUaW1lLmdldEZ1bGxZZWFyKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVuZFRpbWVPbmx5ID1cbiAgICAgICAgICAgICAgZW5kRGF0ZVRpbWUuZ2V0SG91cnMoKSArIFwiOlwiICsgZW5kRGF0ZVRpbWUuZ2V0TWludXRlcygpO1xuXG4gICAgICAgICAgICB0aGlzLmJvb2tpbmdEZXRhaWxzLnB1c2goe1xuICAgICAgICAgICAgICBib29raW5nRGF0ZTogZWFjaEJvb2tpbmcuYm9va2luZ0RhdGUsXG4gICAgICAgICAgICAgIGJvb2tpbmdJRDogZWFjaEJvb2tpbmcuYm9va2luZ0lELFxuICAgICAgICAgICAgICBib29raW5nTG9jYXRpb246IGVhY2hCb29raW5nLmJvb2tpbmdMb2NhdGlvbixcbiAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBlYWNoQm9va2luZy5sb2NhdGlvbk5hbWUsXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlT25seSxcbiAgICAgICAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWVPbmx5LFxuICAgICAgICAgICAgICBlbmREYXRlOiBlbmREYXRlT25seSxcbiAgICAgICAgICAgICAgZW5kVGltZTogZW5kVGltZU9ubHksXG4gICAgICAgICAgICAgIHN0YXR1czogZWFjaEJvb2tpbmcuc3RhdHVzLFxuICAgICAgICAgICAgICBib29raW5nUmVmOiBlYWNoQm9va2luZy5ib29raW5nUmVmLFxuICAgICAgICAgICAgICBpbWFnZTogZWFjaEJvb2tpbmcuaW1hZ2UsXG4gICAgICAgICAgICAgIG1heENhcGFjaXR5OiBlYWNoQm9va2luZy5tYXhDYXBhY2l0eSxcbiAgICAgICAgICAgICAgY3VycmVudENhcGFjaXR5OiBlYWNoQm9va2luZy5jdXJyZW50Q2FwYWNpdHksXG4gICAgICAgICAgICAgIC8vIGltYWdlOiBlYWNoQm9va2luZy5pbWFnZSxcbiAgICAgICAgICAgICAgdXNlcklEOiBlYWNoQm9va2luZy51c2VySUQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5ib29raW5nRGV0YWlscyk7XG4gICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhkYXRhW2ldKVxuICAgICAgICAgIC8vICAgdGhpcy5ib29raW5nRGV0YWlsc1tpXSA9XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG5cbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLmdldEFsbEJvb2tpbmdzKCk7XG4gIH0sXG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLyogaU9TIHBsYWNlcyB0aGUgc3VidGl0bGUgYWJvdmUgdGhlIHRpdGxlICovXG5cbmlvbi1jYXJkLWhlYWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogY29sdW1uLXJldmVyc2U7XG59XG5cbmlvbi1pbWc6OnBhcnQoaW1hZ2UpIHtcbiAgd2lkdGg6IDEwMCU7XG4gIC8qIG9yIHdoYXRldmVyIHZhbHVlICovXG4gIC8qIHlvdSBjYW4gc2V0IHRoZSBoZWlnaHQgdmFsdWUgdG9vICovXG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vdmlld0Jvb2tpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNhYmY3YmU1JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdmlld0Jvb2tpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3ZpZXdCb29raW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vdmlld0Jvb2tpbmcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9M2FiZjdiZTUmc2NvcGVkPXRydWUmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvVXNlcnMvbmlra2kvRG9jdW1lbnRzL0dpdEh1Yi9IVUFUSFVBVC9IVUFUL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fc2NvcGVJZCcsXCJkYXRhLXYtM2FiZjdiZTVcIl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKFwiZGF0YS12LTJjYmY3ZjUwXCIpLG49bigpLF9wb3BTY29wZUlkKCksbilcbmNvbnN0IF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovIF93aXRoU2NvcGVJZCgoKSA9PiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImJyXCIsIG51bGwsIG51bGwsIC0xKSlcbmNvbnN0IF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovIF93aXRoU2NvcGVJZCgoKSA9PiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImJyXCIsIG51bGwsIG51bGwsIC0xKSlcbmNvbnN0IF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovIF93aXRoU2NvcGVJZCgoKSA9PiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImJyXCIsIG51bGwsIG51bGwsIC0xKSlcbmNvbnN0IF9ob2lzdGVkXzQgPSAvKiNfX1BVUkVfXyovIF93aXRoU2NvcGVJZCgoKSA9PiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImgzXCIsIHtcbiAgY2xhc3M6IFwiaW9uLXBhZGRpbmctdG9wXCIsXG4gIHN0eWxlOiB7XCJjb2xvclwiOlwicmVkXCIsXCJmb250LXdlaWdodFwiOlwiYm9sZFwifVxufSwgXCIqTm8gcmVmdW5kIGFmdGVyIGJ1eWluZ1wiLCAtMSkpXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eDogYW55LF9jYWNoZTogYW55LCRwcm9wczogYW55LCRzZXR1cDogYW55LCRkYXRhOiBhbnksJG9wdGlvbnM6IGFueSkge1xuICBjb25zdCBfY29tcG9uZW50X2lvbl9jYXJkX3RpdGxlID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tY2FyZC10aXRsZVwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fY2FyZF9oZWFkZXIgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1jYXJkLWhlYWRlclwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fY2FyZF9jb250ZW50ID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tY2FyZC1jb250ZW50XCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1idXR0b25cIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2NhcmQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1jYXJkXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2Jhc2VfbGF5b3V0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJiYXNlLWxheW91dFwiKSFcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfYmFzZV9sYXlvdXQsIHtcbiAgICBwYWdlVGl0bGU6IFwiQnV5IFN1YnNjcmlwdGlvblwiLFxuICAgIHBhZ2VUb0dvQmFjazogXCIvdGFicy9cIixcbiAgICBuZWVkQmFja0J1dHRvbjogXCJ5XCIsXG4gICAgbmVlZFRvb2xCYXI6IFwieVwiXG4gIH0sIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY2FyZCwgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2NhcmRfaGVhZGVyLCBudWxsLCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9jYXJkX3RpdGxlLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIlByZW1pdW0gUGxhblwiKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9jYXJkX2NvbnRlbnQsIG51bGwsIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIiBGcmVlIDIgaG91ciBwYXJraW5nXCIpLFxuICAgICAgICAgICAgICBfaG9pc3RlZF8xLFxuICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIEZyZWUgcGFya2luZyBvbmNlIGEgbW9udGhcIiksXG4gICAgICAgICAgICAgIF9ob2lzdGVkXzIsXG4gICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCIgUGF5IHBhcmtpbmcgZmVlcyBhdCB0aGUgZW5kIG9mIHRoZSBtb250aFwiKSxcbiAgICAgICAgICAgICAgX2hvaXN0ZWRfMyxcbiAgICAgICAgICAgICAgX2hvaXN0ZWRfNFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2J1dHRvbiwge1xuICAgICAgICAgICAgZXhwYW5kOiBcImZ1bGxcIixcbiAgICAgICAgICAgIHNoYXBlOiBcInJvdW5kXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCIgQnV5XCIpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0pKVxufSIsImltcG9ydCB7IHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVuZGVyU2xvdCBhcyBfcmVuZGVyU2xvdCB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHg6IGFueSxfY2FjaGU6IGFueSwkcHJvcHM6IGFueSwkc2V0dXA6IGFueSwkZGF0YTogYW55LCRvcHRpb25zOiBhbnkpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fYmFja19idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1iYWNrLWJ1dHRvblwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fYnV0dG9ucyA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWJ1dHRvbnNcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX3RpdGxlID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tdGl0bGVcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX3Rvb2xiYXIgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi10b29sYmFyXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9oZWFkZXIgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1oZWFkZXJcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2NvbnRlbnQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1jb250ZW50XCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9wYWdlID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tcGFnZVwiKSFcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfaW9uX3BhZ2UsIG51bGwsIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faGVhZGVyLCBudWxsLCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAoX2N0eC5uZWVkVG9vbEJhcilcbiAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfaW9uX3Rvb2xiYXIsIHsga2V5OiAwIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAoX2N0eC5uZWVkQmFja0J1dHRvbilcbiAgICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9pb25fYnV0dG9ucywge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogXCJzdGFydFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fYmFja19idXR0b24sIHsgXCJkZWZhdWx0LWhyZWZcIjogX2N0eC5wYWdlVG9Hb0JhY2sgfSwgbnVsbCwgOCwgW1wiZGVmYXVsdC1ocmVmXCJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl90aXRsZSwgeyBjbGFzczogXCJpb24tdGV4dC1jZW50ZXJcIiB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX2N0eC5wYWdlVGl0bGUpLCAxKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9KSxcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9jb250ZW50LCB7IGNsYXNzOiBcImlvbi1wYWRkaW5nXCIgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAzXG4gIH0pKVxufSIsIlxuaW1wb3J0IHtcbiAgSW9uUGFnZSxcbiAgSW9uSGVhZGVyLFxuICBJb25UaXRsZSxcbiAgSW9uQ29udGVudCxcbiAgSW9uVG9vbGJhcixcbiAgSW9uQnV0dG9ucyxcbiAgSW9uQmFja0J1dHRvblxufSBmcm9tIFwiQGlvbmljL3Z1ZVwiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBwcm9wczoge1xuICAgIHBhZ2VUaXRsZTogU3RyaW5nLFxuICAgIG5lZWRCYWNrQnV0dG9uOiBTdHJpbmcsXG4gICAgcGFnZVRvR29CYWNrOiBTdHJpbmcsXG4gICAgbmVlZFRvb2xCYXIgOiBTdHJpbmdcbiAgfSxcbiAgY29tcG9uZW50czoge1xuICAgIElvblBhZ2UsXG4gICAgSW9uSGVhZGVyLFxuICAgIElvblRpdGxlLFxuICAgIElvbkNvbnRlbnQsXG4gICAgSW9uVG9vbGJhcixcbiAgICBJb25CdXR0b25zLFxuICAgIElvbkJhY2tCdXR0b25cbiAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vYmFzZUxheW91dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzZhMzM5ZjImdHM9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2Jhc2VMYXlvdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2VMYXlvdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL25pa2tpL0RvY3VtZW50cy9HaXRIdWIvSFVBVEhVQVQvSFVBVC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsIlxuaW1wb3J0IHsgSW9uQ2FyZCwgSW9uQ2FyZEhlYWRlciwgSW9uQ2FyZFRpdGxlLCBJb25JY29uIH0gZnJvbSBcIkBpb25pYy92dWVcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBCYXNlTGF5b3V0IGZyb20gXCIuLi9jb21wb25lbnRzL2Jhc2VMYXlvdXQudnVlXCI7XG4vLyBpbXBvcnQgeyBhcnJvd0JhY2ssIGhvbWUsIHN0YXIgfSBmcm9tICdpb25pY29ucy9pY29ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBJb25DYXJkLFxuICAgIElvbkNhcmRIZWFkZXIsXG4gICAgSW9uQ2FyZFRpdGxlLFxuICAgIEJhc2VMYXlvdXQsXG4gIH0sXG59KTtcbiIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL2J1eVN1YnNjcmlwdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmNiZjdmNTAmc2NvcGVkPXRydWUmdHM9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2J1eVN1YnNjcmlwdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vYnV5U3Vic2NyaXB0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10c1wiXG5cbmltcG9ydCBcIi4vYnV5U3Vic2NyaXB0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJjYmY3ZjUwJnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL25pa2tpL0RvY3VtZW50cy9HaXRIdWIvSFVBVEhVQVQvSFVBVC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTJjYmY3ZjUwXCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eDogYW55LF9jYWNoZTogYW55LCRwcm9wczogYW55LCRzZXR1cDogYW55LCRkYXRhOiBhbnksJG9wdGlvbnM6IGFueSkge1xuICBjb25zdCBfY29tcG9uZW50X2lvbl90aXRsZSA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLXRpdGxlXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl90b29sYmFyID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tdG9vbGJhclwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25faGVhZGVyID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24taGVhZGVyXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9zZWFyY2hiYXIgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1zZWFyY2hiYXJcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2ltZyA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWltZ1wiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fY2FyZF90aXRsZSA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWNhcmQtdGl0bGVcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2NhcmRfc3VidGl0bGUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1jYXJkLXN1YnRpdGxlXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9jYXJkX2hlYWRlciA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWNhcmQtaGVhZGVyXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9jYXJkID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tY2FyZFwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fY29udGVudCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWNvbnRlbnRcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX3BhZ2UgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1wYWdlXCIpIVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9pb25fcGFnZSwgeyBjbGFzczogXCJpb24tcGFkZGluZ1wiIH0sIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY29udGVudCwgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2hlYWRlciwgbnVsbCwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fdG9vbGJhciwgbnVsbCwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl90aXRsZSwge1xuICAgICAgICAgICAgICAgICAgICBzaXplOiBcImxhcmdlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImlvbi10ZXh0LWNlbnRlclwiXG4gICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiTmVhcmJ5IE1lXCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9zZWFyY2hiYXIpLFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9jYXJkLCBudWxsLCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbWcsIHsgc3JjOiBcImFzc2V0cy9pbWFnZXMvaW9uLmpwZ1wiIH0pLFxuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY2FyZF9oZWFkZXIsIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY2FyZF90aXRsZSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIklvbiBPcmNoYXJkXCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9jYXJkX3N1YnRpdGxlLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiNDAwIGxvdHMgTGVmdFwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY2FyZCwgbnVsbCwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faW1nLCB7IHNyYzogXCJhc3NldHMvaW1hZ2VzL3dpc21hLmpwZWdcIiB9KSxcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2NhcmRfaGVhZGVyLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2NhcmRfdGl0bGUsIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJXaXNtYSBhdHJpYVwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fY2FyZF9zdWJ0aXRsZSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIjIzMCBsb3RzIExlZnRcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxXG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIF86IDFcbiAgICAgIH0pXG4gICAgXSksXG4gICAgXzogMVxuICB9KSlcbn0iLCJcbiAgICBpbXBvcnQgeyBJb25DYXJkLCBJb25DYXJkSGVhZGVyLCBJb25DYXJkU3VidGl0bGUsIElvbkNhcmRUaXRsZSwgSW9uU2VhcmNoYmFyfSBmcm9tICdAaW9uaWMvdnVlJztcbiAgICBpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuICBcbiAgICBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgICAgY29tcG9uZW50czogeyBJb25DYXJkLCBJb25DYXJkSGVhZGVyLCBJb25DYXJkU3VidGl0bGUsIElvbkNhcmRUaXRsZSwgSW9uU2VhcmNoYmFyIH0sXG4gICAgfSk7XG4gICIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL25lYXJieW1lUGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzdhYmU1NTImc2NvcGVkPXRydWUmdHM9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL25lYXJieW1lUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vbmVhcmJ5bWVQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10c1wiXG5cbmltcG9ydCBcIi4vbmVhcmJ5bWVQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM3YWJlNTUyJnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL25pa2tpL0RvY3VtZW50cy9HaXRIdWIvSFVBVEhVQVQvSFVBVC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTM3YWJlNTUyXCJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKFwiZGF0YS12LTUzMmE2ODgwXCIpLG49bigpLF9wb3BTY29wZUlkKCksbilcbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJzcmNcIl1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4OiBhbnksX2NhY2hlOiBhbnksJHByb3BzOiBhbnksJHNldHVwOiBhbnksJGRhdGE6IGFueSwkb3B0aW9uczogYW55KSB7XG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX3JvdyA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLXJvd1wiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pY29uX2NvbCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaWNvbi1jb2xcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2xhYmVsID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tbGFiZWxcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2lucHV0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24taW5wdXRcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2l0ZW0gPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1pdGVtXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9ub3RlID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tbm90ZVwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tYnV0dG9uXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9saXN0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tbGlzdFwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fZ3JpZCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWdyaWRcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfYmFzZV9sYXlvdXQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImJhc2UtbGF5b3V0XCIpIVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9iYXNlX2xheW91dCwgbnVsbCwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9ncmlkLCBudWxsLCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fcm93LCB7IGNsYXNzOiBcImlvbi1qdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCIgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoJy4uL2ltYWdlcy9uZXRzLnBuZycpXG4gICAgICAgICAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzEpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fcm93LCB7IGNsYXNzOiBcImlvbi1qdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCIgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pY29uX2NvbCwge1xuICAgICAgICAgICAgICAgIHNpemU6IFwiOVwiLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBcInBhZ2VIZWFkZXJcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIiBSZWdpc3RyYXRpb24gXCIpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2xpc3QsIG51bGwsIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGFiZWwsIHsgcG9zaXRpb246IFwic3RhY2tlZFwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJVc2VybmFtZTpcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2lucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2xlYXItaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC51c2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudDogYW55KSA9PiAoKF9jdHgudXNlck5hbWUpID0gJGV2ZW50KSksXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9ICgkZXZlbnQ6IGFueSkgPT4gKF9jdHgudmFsaWRhdGVVc2VybmFtZShfY3R4LnVzZXJOYW1lKSkpXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChfY3R4LmlzVXNlcm5hbWVWYWxpZCA9PSAyKVxuICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfaW9uX2l0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICBsaW5lczogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9ub3RlLCB7IGNvbG9yOiBcImRhbmdlclwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIllvdXIgdXNlcm5hbWUgaXMgdG9vIGxvbmchXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpLFxuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faXRlbSwgbnVsbCwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9sYWJlbCwgeyBwb3NpdGlvbjogXCJzdGFja2VkXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIk5hbWU6XCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBcImNsZWFyLWlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IF9jdHgubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKCRldmVudDogYW55KSA9PiAoKF9jdHgubmFtZSkgPSAkZXZlbnQpKSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gKCRldmVudDogYW55KSA9PiAoX2N0eC52YWxpZGF0ZU5hbWUoX2N0eC5uYW1lKSkpXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChfY3R4LmlzTmFtZVZhbGlkID09IDIpXG4gICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9pb25faXRlbSwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiBcIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX25vdGUsIHsgY29sb3I6IFwiZGFuZ2VyXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiWW91ciBuYW1lIGlzIHRvbyBsb25nIVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGFiZWwsIHsgcG9zaXRpb246IFwic3RhY2tlZFwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJFbWFpbDpcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2lucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2xlYXItaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBfY3R4LmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSAoJGV2ZW50OiBhbnkpID0+ICgoX2N0eC5lbWFpbCkgPSAkZXZlbnQpKSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVs1XSB8fCAoX2NhY2hlWzVdID0gKCRldmVudDogYW55KSA9PiAoX2N0eC52YWxpZGF0ZUVtYWlsKF9jdHguZW1haWwpKSlcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcIm1vZGVsVmFsdWVcIl0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKF9jdHguaXNFbWFpbFZhbGlkID09IDIpXG4gICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9pb25faXRlbSwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDIsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiBcIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX25vdGUsIHsgY29sb3I6IFwiZGFuZ2VyXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiSW52YWxpZCBlbWFpbCFcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJcIiwgdHJ1ZSksXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pdGVtLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2xhYmVsLCB7IHBvc2l0aW9uOiBcInN0YWNrZWRcIiB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiUGFzc3dvcmQ6XCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBcImNsZWFyLWlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gKCRldmVudDogYW55KSA9PiAoKF9jdHgucGFzc3dvcmQpID0gJGV2ZW50KSksXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBfY2FjaGVbN10gfHwgKF9jYWNoZVs3XSA9ICgkZXZlbnQ6IGFueSkgPT4gKF9jdHgudmFsaWRhdGVQYXNzd29yZChfY3R4LnBhc3N3b3JkKSkpXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChfY3R4LnBhc3N3b3JkRXJyb3JzLmxlbmd0aCAhPSAwKVxuICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfaW9uX2l0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAzLFxuICAgICAgICAgICAgICAgICAgICBsaW5lczogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9ub3RlLCB7IGNvbG9yOiBcImRhbmdlclwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfY3R4LnBhc3N3b3JkRXJyb3JzLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcInVsXCIsIHsga2V5OiBlcnJvciB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwibGlcIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZyhlcnJvciksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGFiZWwsIHsgcG9zaXRpb246IFwic3RhY2tlZFwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJSZWNvbmZpcm0gcGFzc3dvcmQ6XCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBcImNsZWFyLWlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5yZWNvbmZpcm1QYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVs4XSB8fCAoX2NhY2hlWzhdID0gKCRldmVudDogYW55KSA9PiAoKF9jdHgucmVjb25maXJtUGFzc3dvcmQpID0gJGV2ZW50KSksXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBfY2FjaGVbOV0gfHwgKF9jYWNoZVs5XSA9ICgkZXZlbnQ6IGFueSkgPT4gKF9jdHgudmFsaWRhdGVSZWNvbmZpcm1QYXNzd29yZChfY3R4LnJlY29uZmlybVBhc3N3b3JkKSkpXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChfY3R4LmlzUmVjb25maXJtUGFzc3dvcmRWYWxpZCA9PSAyKVxuICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfaW9uX2l0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiA0LFxuICAgICAgICAgICAgICAgICAgICBsaW5lczogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9ub3RlLCB7IGNvbG9yOiBcImRhbmdlclwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIllvdXIgcGFzc3dvcmQgZG8gbm90IG1hdGNoIVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGFiZWwsIHsgcG9zaXRpb246IFwic3RhY2tlZFwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJQaG9uZSBudW1iZXI6XCIpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBcImNsZWFyLWlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGVsXCIsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IF9jdHgucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbMTBdIHx8IChfY2FjaGVbMTBdID0gKCRldmVudDogYW55KSA9PiAoKF9jdHgucGhvbmVOdW1iZXIpID0gJGV2ZW50KSksXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBfY2FjaGVbMTFdIHx8IChfY2FjaGVbMTFdID0gKCRldmVudDogYW55KSA9PiAoX2N0eC52YWxpZGF0ZVBob25lKF9jdHgucGhvbmVOdW1iZXIpKSlcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcIm1vZGVsVmFsdWVcIl0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKF9jdHguaXNQaG9uZVZhbGlkID09IDIpXG4gICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9pb25faXRlbSwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiBcIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX25vdGUsIHsgY29sb3I6IFwiZGFuZ2VyXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiSW52YWxpZCBwaG9uZSBudW1iZXIhXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpLFxuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fcm93LCB7IGNsYXNzOiBcImlvbi1wYWRkaW5nLXRvcCBpb24tanVzdGlmeS1jb250ZW50LWNlbnRlclwiIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fYnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlOiBcInJvdW5kXCIsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfY3R4LmRpc2FibGVkUmVnaXN0ZXJCdXR0b249PTEsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jdHgucmVnaXN0ZXJVc2VyXG4gICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiUmVnaXN0ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0sIDgsIFtcImRpc2FibGVkXCIsIFwib25DbGlja1wiXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0pKVxufSIsIlxuaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJAaW9uaWMvY29yZS9kaXN0L3R5cGVzL2NvbXBvbmVudHMvbGlzdC9saXN0XCI7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuXG5pbXBvcnQge1xuICBJb25Sb3csXG4gIElvbklucHV0LFxuICBJb25JdGVtLFxuICBJb25CdXR0b24sXG4gIElvbkxhYmVsLFxuICBJb25Ob3RlLFxufSBmcm9tIFwiQGlvbmljL3Z1ZVwiO1xuaW1wb3J0IHsgY29uc3RydWN0IH0gZnJvbSBcImlvbmljb25zL2ljb25zXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCgge1xuICBjb21wb25lbnRzOiB7XG4gICAgSW9uUm93LFxuICAgIElvbklucHV0LFxuICAgIElvbkl0ZW0sXG4gICAgSW9uQnV0dG9uLFxuICAgIElvbkxhYmVsLFxuICAgIElvbk5vdGUsXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJOYW1lOiBcIlwiLFxuICAgICAgbmFtZTogXCJcIixcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICByZWNvbmZpcm1QYXNzd29yZDogXCJcIixcbiAgICAgIHBob25lTnVtYmVyOiBcIlwiLFxuXG4gICAgICAvLyBpZiB1c2luZyBib29sZWFuLCB0aGUgZXJyb3IgbXNncyB3aWxsIGFwcGVhciB3aGVuIHVzZXIgZmlyc3QgbG9hZC5cbiAgICAgIC8vIDAgPSBuZXV0cmFsIChmaXJzdCBsb2FkKSwgMSA9IHZhbGlkIChhY2NlcHQgZmllbGQpLCAyID0gbm90IHZhbGlkIChlcnJvciBtZXNzYWdlKVxuICAgICAgaXNVc2VybmFtZVZhbGlkOiAwLFxuICAgICAgaXNOYW1lVmFsaWQ6IDAsXG4gICAgICBpc0VtYWlsVmFsaWQ6IDAsXG4gICAgICBpc1JlY29uZmlybVBhc3N3b3JkVmFsaWQ6IDAsXG4gICAgICBpc1Bob25lVmFsaWQ6IDAsXG4gICAgICBcbiAgICAgIC8vcGFzc3dvcmQgbmVlZCBhIGxpc3Qgc2luY2UgdGhlcmUgYXJlIG11bHRpcGxlIHJlcXVpcmVtbnRzIHRvIGEgcGFzc3dvcmQsXG4gICAgICBwYXNzd29yZEVycm9yczogQXJyYXk8c3RyaW5nPigpLFxuXG4gICAgICBkaXNhYmxlZFJlZ2lzdGVyQnV0dG9uOiAxLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB2YWxpZGF0ZUVtYWlsKGVtYWlsOiBzdHJpbmcpIHtcbiAgICAgIC8vdXNlciBlbnRlciB2YWxpZCBhZGRyZXNzICh3aXRoIGEgQClcbiAgICAgIGlmIChlbWFpbC5tYXRjaChcIkBcIikpIHtcbiAgICAgICAgdGhpcy5pc0VtYWlsVmFsaWQgPSAxO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQnV0dG9uKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNFbWFpbFZhbGlkID0gMjtcbiAgICAgIH1cbiAgICAgIC8vICBjb3BpZWQgZnJvbSBpb25pYyB3ZWJzaXRlLCBub3Qgc3VyZSB3aGF0IGl0IGlzIGJ1dCBpIHRoaW5rIGl0cyBAIGluIGNvbXB1dGVyIGxhbmd1YWdlLiBzYW1lIGFzIGNvbnNvbGUubG9nKGVtYWlsLm1hdGNoKCdAJykpXG4gICAgICAvLyBjb25zb2xlLmxvZyhlbWFpbC5tYXRjaCgvXig/PS57MSwyNTR9JCkoPz0uezEsNjR9QClbYS16QS1aMC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtekEtWjAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC8pKVxuICAgIH0sXG4gICAgdmFsaWRhdGVVc2VybmFtZSh1c2VybmFtZTogc3RyaW5nKSB7XG4gICAgICAvL3ZhbGlkIHBhdGguIHVzZXJuYW1lIGxlc3MgdGhhbiAxMjggY2hhcmFjdGVyc1xuICAgICAgaWYgKHVzZXJuYW1lLmxlbmd0aCA8IDEyOCkge1xuICAgICAgICB0aGlzLmlzVXNlcm5hbWVWYWxpZCA9IDE7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdXR0b24oKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc1VzZXJuYW1lVmFsaWQgPSAyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGVOYW1lKG5hbWU6IHN0cmluZykge1xuICAgICAgLy92YWxpZCBwYXRoLiBuYW1lIGxlc3MgdGhhbiAxMjggY2hhcmFjdGVyc1xuICAgICAgaWYgKG5hbWUubGVuZ3RoIDwgMTI4KSB7XG4gICAgICAgIHRoaXMuaXNOYW1lVmFsaWQgPSAxO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQnV0dG9uKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNOYW1lVmFsaWQgPSAyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGVQYXNzd29yZChwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkRXJyb3JzID0gQXJyYXk8c3RyaW5nPigpOyAvLyBlbXB0eSBhcnJheSB0byBkZWxldGUgYWxsIGVycm9yc1xuICAgICAgLy8gZXJyb3IgaWYgcGFzc3dvcmQgaXMgdG9vIHNob3J0XG4gICAgICBpZiAocGFzc3dvcmQubGVuZ3RoIDwgOCkge1xuICAgICAgICB0aGlzLnBhc3N3b3JkRXJyb3JzLnB1c2goXG4gICAgICAgICAgXCJQYXNzd29yZCBsZW5ndGggbXVzdCBiZSBtb3JlIHRoYW4gOCBjaGFyYWN0ZXJzXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGF0IGxlYXN0IGEgbG93ZXIgbGV0dGVyIGluIHBhc3N3b3JkXG4gICAgICBjb25zdCBjYXBzQWxsUGFzc3dvcmQgPSBwYXNzd29yZC50b1VwcGVyQ2FzZSgpXG4gICAgICBpZiAocGFzc3dvcmQgPT0gY2Fwc0FsbFBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMucGFzc3dvcmRFcnJvcnMucHVzaChcbiAgICAgICAgICBcIlBhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCBhIGxvd2VyIGxldHRlclwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhdCBsZWFzdCBhIGNhcGl0YWwgbGV0dGVyIGluIHBhc3N3b3JkXG4gICAgICBjb25zdCBsb3dlckFsbFBhc3N3b3JkID0gcGFzc3dvcmQudG9Mb3dlckNhc2UoKVxuICAgICAgaWYgKHBhc3N3b3JkID09IGxvd2VyQWxsUGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5wYXNzd29yZEVycm9ycy5wdXNoKFxuICAgICAgICAgIFwiUGFzc3dvcmQgbXVzdCBoYXZlIGF0IGxlYXN0IGFuIHVwcGVyIGxldHRlclwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlZ2lzdGVyQnV0dG9uKClcbiAgICB9LFxuICAgIHZhbGlkYXRlUmVjb25maXJtUGFzc3dvcmQocmVjb25maXJtUGFzc3dvcmQ6IHN0cmluZykge1xuICAgICAgLy92YWxpZCBwYXRoLiByZWNvbmZpcm0gcGFzc3dvcmQgc2FtZSBhcyBwYXNzd29yZFxuICAgICAgaWYgKHJlY29uZmlybVBhc3N3b3JkID09IHRoaXMucGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5pc1JlY29uZmlybVBhc3N3b3JkVmFsaWQgPSAxO1xuICAgICAgICAvL2lzc3VlIGlmIHVzZXIgZW50ZXIgcmVjb25maXJtIHBhc3N3b3JkIGZpcnN0LCB0aGVuIGVudGVyIHBhc3N3b3JkLlxuICAgICAgICAvLyBldmVuIGlmIHNhbWUgcGFzc3dvcmRzLCB3aWxsIGhhdmUgXG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdXR0b24oKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc1JlY29uZmlybVBhc3N3b3JkVmFsaWQgPSAyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGVQaG9uZShwaG9uZU51bTogc3RyaW5nKSB7XG4gICAgICAvL3ZhbGlkIHBhdGguIHBob25lIG51bWJlciBpcyA4IG51bWJlcnNcbiAgICAgIGlmIChwaG9uZU51bS5sZW5ndGggPT0gOCkge1xuICAgICAgICB0aGlzLmlzUGhvbmVWYWxpZCA9IDE7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdXR0b24oKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc1Bob25lVmFsaWQgPSAyO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVnaXN0ZXJCdXR0b24oKSB7XG4gICAgICAvLyBvbmx5IGxldCB1c2VyIHJlZ2lzdGVyIGlmIHRoZXkgYXJlIG5vIGVycm9ycyAgXG4gICAgICBpZiAodGhpcy5pc1Bob25lVmFsaWQgPT0gMSAmJiB0aGlzLmlzUmVjb25maXJtUGFzc3dvcmRWYWxpZCA9PSAxICYmIHRoaXMuaXNOYW1lVmFsaWQgPT0gMSAmJiB0aGlzLmlzRW1haWxWYWxpZCA9PSAxKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRSZWdpc3RlckJ1dHRvbiA9IDAgXG4gICAgICB9XG4gICAgfSxcbiAgICByZWdpc3RlclVzZXIoKSB7XG4gICAgICBjb25zdCB1cmwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMi91c2Vyc1wiOyAvLyBoYXJkY29kZWRcbiAgICAgICAgYXhpb3NcbiAgICAgICAgICAucG9zdCh1cmwsIHtcbiAgICAgICAgICAgIGVtYWlsOiB0aGlzLmVtYWlsLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgcGhvbmVOdW06IHRoaXMucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VyTmFtZSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSlcbiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgICAgfSlcbiAgICB9XG4gIH1cbn0pO1xuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vcmVnaXN0ZXJQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MzJhNjg4MCZzY29wZWQ9dHJ1ZSZ0cz10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vcmVnaXN0ZXJQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9yZWdpc3RlclBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcblxuaW1wb3J0IFwiLi9yZWdpc3RlclBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTMyYTY4ODAmc2NvcGVkPXRydWUmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvVXNlcnMvbmlra2kvRG9jdW1lbnRzL0dpdEh1Yi9IVUFUSFVBVC9IVUFUL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fc2NvcGVJZCcsXCJkYXRhLXYtNTMyYTY4ODBcIl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHVucmVmIGFzIF91bnJlZiwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogXCJpb24tdGV4dC1jZW50ZXIgaW9uLXBhZGRpbmctdG9wXCIgfVxuXG5pbXBvcnQgeyBJb25QYWdlLCBJb25IZWFkZXIsIElvblRvb2xiYXIsIElvblRpdGxlLCBJb25Db250ZW50LCBJb25HcmlkLCBJb25DYXJkLCBJb25JY29uLCBJb25Sb3csIElvbkNvbCwgSW9uQnV0dG9uIH0gZnJvbSAnQGlvbmljL3Z1ZSc7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgYWRkLCBjYXJkLCBob21lLCBzdGFyLCB3YWxsZXQgfSBmcm9tICdpb25pY29ucy9pY29ucyc7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4vLyAgICAgY29tcG9uZW50czogeyBJb25QYWdlLCBJb25Db250ZW50LCBJb25IZWFkZXIsIElvblRpdGxlLCBJb25Ub29sYmFyLCBJb25HcmlkLCBJb25DYXJkLCBJb25JY29uLCBJb25Sb3csIElvbkNvbCwgSW9uQnV0dG9uIH0sXG4vLyB9KTtcblxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6ICd2aWV3UHJvZmlsZScsXG4gIHNldHVwKF9fcHJvcHMpIHtcblxuXG5yZXR1cm4gKF9jdHg6IGFueSxfY2FjaGU6IGFueSkgPT4ge1xuICBjb25zdCBfY29tcG9uZW50X2lvbl9sYWJlbCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWxhYmVsXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9pbnB1dCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWlucHV0XCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9pdGVtID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24taXRlbVwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fbGlzdCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiaW9uLWxpc3RcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfYmFzZV9sYXlvdXQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImJhc2UtbGF5b3V0XCIpIVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9iYXNlX2xheW91dCwgbnVsbCwge1xuICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uUGFnZSksIG51bGwsIHtcbiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoSW9uSGVhZGVyKSwgbnVsbCwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvblRvb2xiYXIpLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF91bnJlZihJb25UaXRsZSksIHsgY2xhc3M6IFwiaW9uLXRleHQtY2VudGVyXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIkVkaXQgUHJvZmlsZVwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkNvbnRlbnQpLCB7IGNsYXNzOiBcImlvbi1wYWRkaW5nXCIgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGlzdCwgeyBsaW5lczogXCJub25lXCIgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pdGVtLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fbGFiZWwsIHsgcG9zaXRpb246IFwic3RhY2tlZFwiIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIkVtYWlsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xlYXItaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIkVudGVyIG5ldyBlbWFpbFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9sYWJlbCwgeyBwb3NpdGlvbjogXCJzdGFja2VkXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiUGhvbmUgTnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xlYXItb24tZWRpdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgbmV3IHBob25lIG51bWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2l0ZW0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9sYWJlbCwgeyBwb3NpdGlvbjogXCJzdGFja2VkXCIgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiUGFzc3dvcmRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgbmV3IHBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkNvbnRlbnQpLCB7IGNsYXNzOiBcImlvbi1wYWRkaW5nXCIgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfMSwgW1xuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX3VucmVmKElvbkJ1dHRvbiksIHtcbiAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogXCJyb3VuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZDogXCJibG9ja1wiXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIFNhdmUgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogMVxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfOiAxXG4gIH0pKVxufVxufVxuXG59KSIsImltcG9ydCBzY3JpcHQgZnJvbSBcIi4vdmlld1Byb2ZpbGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdmlld1Byb2ZpbGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIlxuXG5pbXBvcnQgXCIuL3ZpZXdQcm9maWxlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTkyNzg2MDFjJmxhbmc9Y3NzXCJcblxuY29uc3QgX19leHBvcnRzX18gPSBzY3JpcHQ7XG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICA8aDI+QnVzaW5lc3MgQW5hbHl0aWNzIC0gTnVtYmVyIG9mIGJvb2tpbmdzIHBlciBsb2NhdGlvbjwvaDI+XG4gICAgICA8IS0tIDxHQ2hhcnRcbiAgICAgICAgdHlwZT1cIkNvbHVtbkNoYXJ0XCJcbiAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zXCJcbiAgICAgICAgOmRhdGE9XCJkYXRhXCJcbiAgICAgIC8+IC0tPlxuICAgICAgXG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gICBcbiAgPHNjcmlwdD5cbiAgLy8gaW1wb3J0IHsgR0NoYXJ0IH0gZnJvbSBcInZ1ZS1nb29nbGUtY2hhcnRzXCI7XG4gIGltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbiAgaW1wb3J0IHtJb25Sb3csfSBmcm9tIFwiQGlvbmljL3Z1ZVwiO1xuICBpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuICBcbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6IFwiQmFyQ2hhcnRcIixcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAvLyBHQ2hhcnRcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgIFsnQ2FycGFyayBOYW1lJywgJ05vLiBvZiBCb29raW5ncyddXG4gICAgICAgICAgLy8gIFsnSU9OIE9yY2hhcmQnLCAyNV0sXG4gICAgICAgICAgLy8gIFsnUGxhemEgU2luZ2FwdXJhJywgMzBdLFxuICAgICAgICBdLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgd2lkdGg6IDEwMDAsXG4gICAgICAgICAgaGVpZ2h0OiA1MDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKXtcbiAgICAgIHRoaXMuZ2V0Qm9va2luZ3MoKVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgZ2V0Qm9va2luZ3MoKSB7XG4gICAgICAgIGxldCBib29raW5nRGF0YSA9IFtdO1xuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMS9ib29raW5nc1wiO1xuXG4gICAgICAgIGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGJvb2tpbmdEYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhLmJvb2tpbmdzO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGJvb2tpbmdEYXRhKVxuICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBib29raW5nRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYm9va2luZ0RhdGFbaV1bJ2Jvb2tpbmdMb2NhdGlvbiddKVxuICAgICAgICAgICAgdGhpcy5kYXRhLnB1c2goW2Jvb2tpbmdEYXRhW2ldWydib29raW5nTG9jYXRpb24nXSxib29raW5nRGF0YVtpXVsnY3VycmVudENhcGFjaXR5J11dKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYm9va2luZ0RhdGFcbiAgICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9O1xuICA8L3NjcmlwdD4iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9CYXJDaGFydC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjY1MmY3YzJcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9CYXJDaGFydC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFyQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL1VzZXJzL25pa2tpL0RvY3VtZW50cy9HaXRIdWIvSFVBVEhVQVQvSFVBVC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl1dKVxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfaG9pc3RlZF8xID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJiclwiLCBudWxsLCBudWxsLCAtMSlcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4OiBhbnksX2NhY2hlOiBhbnksJHByb3BzOiBhbnksJHNldHVwOiBhbnksJGRhdGE6IGFueSwkb3B0aW9uczogYW55KSB7XG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2lucHV0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24taW5wdXRcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2l0ZW0gPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1pdGVtXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9ub3RlID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tbm90ZVwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tYnV0dG9uXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9yb3cgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1yb3dcIikhXG4gIGNvbnN0IF9jb21wb25lbnRfaW9uX2dyaWQgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1ncmlkXCIpIVxuICBjb25zdCBfY29tcG9uZW50X2lvbl9jb250ZW50ID0gX3Jlc29sdmVDb21wb25lbnQoXCJpb24tY29udGVudFwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9pb25fbW9kYWwgPSBfcmVzb2x2ZUNvbXBvbmVudChcImlvbi1tb2RhbFwiKSFcbiAgY29uc3QgX2NvbXBvbmVudF9iYXNlX2xheW91dCA9IF9yZXNvbHZlQ29tcG9uZW50KFwiYmFzZS1sYXlvdXRcIikhXG5cbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2Jhc2VfbGF5b3V0LCB7XG4gICAgcGFnZVRpdGxlOiBcIkZvcmdvdCBQYXNzd29yZFwiLFxuICAgIG5lZWRUb29sQmFyOiBcInlcIixcbiAgICBuZWVkQmFja0J1dHRvbjogXCJ5XCIsXG4gICAgcGFnZVRvR29CYWNrOiBcIi9cIlxuICB9LCB7XG4gICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2dyaWQsIHsgY2xhc3M6IFwiaW9uLXBhZGRpbmdcIiB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIEVudGVyIHRoZSBlbWFpbCBhc3NvY2lhdGVkIHdpdGggeW91ciBhY2NvdW50IGFuZCB3ZSB3aWxsIHNlbmQgeW91IGEgbGluayB0byByZXNldCB5b3VyIGFjY291bnQ6IFwiKSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faXRlbSwge1xuICAgICAgICAgICAgZmlsbDogXCJzb2xpZFwiLFxuICAgICAgICAgICAgcmVmOiBcIml0ZW1cIixcbiAgICAgICAgICAgIGNsYXNzOiBcImlvbi1wYWRkaW5nLXRvcFwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faW5wdXQsIHtcbiAgICAgICAgICAgICAgICBjbGVhcklucHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIkVtYWlsXCIsXG4gICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX2N0eC5lbWFpbCxcbiAgICAgICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoJGV2ZW50OiBhbnkpID0+ICgoX2N0eC5lbWFpbCkgPSAkZXZlbnQpKVxuICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxXG4gICAgICAgICAgfSwgNTEyKSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25faXRlbSwgeyBsaW5lczogXCJub25lXCIgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAoX2N0eC5pc0VtYWlsVmFsaWQgPT0gMilcbiAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2lvbl9ub3RlLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJJbnZhbGlkIGVtYWlsIVwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpLFxuICAgICAgICAgICAgICAoX2N0eC5lbWFpbE5vRXhpc3QgPT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2lvbl9ub3RlLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJZb3VyIGVtYWlsIGRvZXMgbm90IGV4aXN0IGluIG91ciBkYXRhYmFzZVwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9pb25fcm93LCB7IGNsYXNzOiBcImlvbi1wYWRkaW5nLXRvcCBpb24tanVzdGlmeS1jb250ZW50LWNlbnRlclwiIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2J1dHRvbiwge1xuICAgICAgICAgICAgICAgIHNoYXBlOiBcInJvdW5kXCIsXG4gICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAoJGV2ZW50OiBhbnkpID0+IChfY3R4LmZvcmdvdFBhc3N3b3JkKF9jdHguZW1haWwpKSlcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJDb250aW51ZVwiKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9KSxcbiAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9tb2RhbCwge1xuICAgICAgICBcImlzLW9wZW5cIjogX2N0eC5zdWNjZXNzT3BlbixcbiAgICAgICAgY2xhc3M6IFwiaW9uLXBhZGRpbmdcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfaW9uX2NvbnRlbnQsIHsgY2xhc3M6IFwiaW9uLXBhZGRpbmctdG9wIGlvbi1wYWRkaW5nXCIgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIEFuIGVtYWlsIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQgaGFzIGJlZW4gc2VudCB0byB0aGUgZW1haWwuIERvIGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIG9uIHRoZSBlbWFpbC4gXCIpLFxuICAgICAgICAgICAgICBfaG9pc3RlZF8xLFxuICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiIEJyaW5naW5nIHlvdSBiYWNrIHRvIExvZ2luIHBhZ2UuLi4uLiBcIiksXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2lvbl9idXR0b24sIHtcbiAgICAgICAgICAgICAgICBzaGFwZTogXCJyb3VuZFwiLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKCRldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBfY3R4LnJvdXRlVG9Mb2dpblBhZ2UoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBleHBhbmQ6IFwiYmxvY2tcIixcbiAgICAgICAgICAgICAgICBzaXplOiBcImxhcmdlXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJMb2dpblwiKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9LCA4LCBbXCJpcy1vcGVuXCJdKVxuICAgIF0pLFxuICAgIF86IDFcbiAgfSkpXG59IiwiXG5pbXBvcnQgeyBJb25JbnB1dCwgSW9uSXRlbSxJb25Nb2RhbCwgSW9uQ29udGVudCB9IGZyb20gXCJAaW9uaWMvdnVlXCI7IC8vIElvbkNvbCwgSW9uTGlzdFxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gICAgSW9uSW5wdXQsXG4gICAgICAgIElvbkl0ZW0sXG4gICAgICAgIElvbk1vZGFsLFxuICAgIElvbkNvbnRlbnRcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW1haWw6IFwiXCIsXG4gICAgICAgIGlzRW1haWxWYWxpZDogMCxcbiAgICAgICAgc3VjY2Vzc09wZW46IGZhbHNlLFxuICAgICAgZW1haWxOb0V4aXN0IDogZmFsc2UsXG4gICAgfTtcbiAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHJvdXRlVG9Mb2dpblBhZ2UoKSB7XG4gICAgICAgICAgICB0aGlzLiRyb3V0ZXJcbiAgICAgICAgICAgIC5wdXNoKHtcbiAgICAgICAgICAgICAgcGF0aDogXCIvXCIsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSxcbiAgICAgc2V0U3VjY2Vzc09wZW4ob3BlbjogYm9vbGVhbikge1xuICAgICAgICAgdGhpcy5zdWNjZXNzT3BlbiA9IG9wZW47XG4gICAgICAgdGhpcy4kcm91dGVyXG4gICAgICAgICAgICAucHVzaCh7XG4gICAgICAgICAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLmdvKDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSxcbiAgICBmb3Jnb3RQYXNzd29yZChlbWFpbDogc3RyaW5nKSB7XG4gICAgICBpZiAoZW1haWwubWF0Y2goXCJAXCIpKSB7XG4gICAgICAgIHRoaXMuaXNFbWFpbFZhbGlkID0gMTtcbiAgICAgICAgY29uc3QgZW1haWxOYW1lT25seSA9IHRoaXMuZW1haWwuc3BsaXQoXCJAXCIpWzBdO1xuICAgICAgICBjb25zdCBlbWFpbEFjY291bnRPbmx5ID0gdGhpcy5lbWFpbC5zcGxpdChcIkBcIilbMV07XG5cbiAgICAgICAgY29uc3QgdXJsID1cbiAgICAgICAgICBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMi9jaGVja1VzZXJFeGlzdD9lbWFpbD1cIiArXG4gICAgICAgICAgZW1haWxOYW1lT25seSArXG4gICAgICAgICAgXCImYWNjb3VudD1cIiArXG4gICAgICAgICAgZW1haWxBY2NvdW50T25seTtcbiAgICAgICAgXG4gICAgICAgIGF4aW9zLmdldCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VNZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuICAgICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UgPT0gXCJVc2VyIGV4aXN0c1wiKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3VjY2Vzc09wZW4gPSB0cnVlXG4gICAgICAgICAgICAgIGNvbnN0IHRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRTdWNjZXNzT3BlbihmYWxzZSksIDIwMDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UgPT0gXCJVc2VyIG5vdCBmb3VuZFwiKSB7XG4gICAgICAgICAgICAgIHRoaXMuZW1haWxOb0V4aXN0ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0VtYWlsVmFsaWQgPSAyO1xuICAgICAgfVxuICAgIH0sXG4gICBcbiAgfSxcblxufSk7XG4iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9mb3Jnb3RQYXNzd29yZFBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRmZjYxZGUyJnRzPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9mb3Jnb3RQYXNzd29yZFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2ZvcmdvdFBhc3N3b3JkUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvVXNlcnMvbmlra2kvRG9jdW1lbnRzL0dpdEh1Yi9IVUFUSFVBVC9IVUFUL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXV0pXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgY3JlYXRlUm91dGVyLCBjcmVhdGVXZWJIaXN0b3J5IH0gZnJvbSAnQGlvbmljL3Z1ZS1yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVSZWNvcmRSYXcgfSBmcm9tICd2dWUtcm91dGVyJztcbmltcG9ydCBUYWJzUGFnZSBmcm9tICcuLi92aWV3cy9Cb3R0b21UYWJzLnZ1ZSc7XG5pbXBvcnQgTG9naW5QYWdlIGZyb20gJy4uL3ZpZXdzL0xvZ2luUGFnZS52dWUnO1xuaW1wb3J0IHZpZXdCb29raW5nIGZyb20gJy4uL3ZpZXdzL3ZpZXdCb29raW5nLnZ1ZSc7XG5pbXBvcnQgYnV5U3Vic2NyaXB0aW9uIGZyb20gJy4uL3ZpZXdzL2J1eVN1YnNjcmlwdGlvbi52dWUnO1xuaW1wb3J0IG5lYXJieW1lUGFnZSBmcm9tICcuLi92aWV3cy9uZWFyYnltZVBhZ2UudnVlJztcbmltcG9ydCByZWdpc3RlciBmcm9tICcuLi92aWV3cy9yZWdpc3RlclBhZ2UudnVlJztcbmltcG9ydCB2aWV3UHJvZmlsZSBmcm9tICcuLi92aWV3cy92aWV3UHJvZmlsZS52dWUnO1xuaW1wb3J0IEJhckNoYXJ0IGZyb20gJy4uL3ZpZXdzL0JhckNoYXJ0LnZ1ZSc7XG5pbXBvcnQgZm9yZ290UGFzc3dvcmQgZnJvbSAnLi4vdmlld3MvZm9yZ290UGFzc3dvcmRQYWdlLnZ1ZSc7XG5cbmNvbnN0IHJvdXRlczogQXJyYXk8Um91dGVSZWNvcmRSYXc+ID0gW1xuICB7XG4gICAgcGF0aDogJy8nLFxuICAgIGNvbXBvbmVudDogTG9naW5QYWdlXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL3RhYnMvJyxcbiAgICBjb21wb25lbnQ6IFRhYnNQYWdlLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIHBhdGg6ICcnLFxuICAgICAgICByZWRpcmVjdDogJy90YWJzL2hvbWUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXRoOiAnaG9tZScsXG4gICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL0hvbWVQYWdlLnZ1ZScpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXRoOiAnd2FsbGV0JyxcbiAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3Mvd2FsbGV0UGFnZS52dWUnKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJ3BsYW5zJyxcbiAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvcGxhbnNQYWdlLnZ1ZScpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXRoOiAnbWFwJyxcbiAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvbWFwUGFnZS52dWUnKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJ3Byb2ZpbGUnLFxuICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9wcm9maWxlUGFnZS52dWUnKVxuICAgICAgfSxcbiAgICBdXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL3ZpZXdCb29raW5nJyxcbiAgICBjb21wb25lbnQ6IHZpZXdCb29raW5nXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL25lYXJieW1lJyxcbiAgICBjb21wb25lbnQ6IG5lYXJieW1lUGFnZVxuICB9LFxuICB7XG4gICAgcGF0aDogJy9idXlTdWJzY3JpcHRpb24nLFxuICAgIGNvbXBvbmVudDogYnV5U3Vic2NyaXB0aW9uXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL3JlZ2lzdGVyJyxcbiAgICBjb21wb25lbnQ6IHJlZ2lzdGVyXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL3ZpZXdQcm9maWxlJyxcbiAgICBjb21wb25lbnQ6IHZpZXdQcm9maWxlXG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL0JhckNoYXJ0JyxcbiAgICBjb21wb25lbnQ6IEJhckNoYXJ0XG4gIH0sXG4gIHtcbiAgICBwYXRoOiAnL2ZvcmdvdFBhc3N3b3JkJyxcbiAgICBjb21wb25lbnQ6IGZvcmdvdFBhc3N3b3JkXG4gIH0sXG5dXG5cbmNvbnN0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcih7XG4gIGhpc3Rvcnk6IGNyZWF0ZVdlYkhpc3RvcnkocHJvY2Vzcy5lbnYuQkFTRV9VUkwpLFxuICByb3V0ZXNcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlclxuIiwiaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJ1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnXG5pbXBvcnQgcm91dGVyIGZyb20gJy4vcm91dGVyJztcblxuaW1wb3J0IHsgSW9uaWNWdWUgfSBmcm9tICdAaW9uaWMvdnVlJztcblxuLyogQ29yZSBDU1MgcmVxdWlyZWQgZm9yIElvbmljIGNvbXBvbmVudHMgdG8gd29yayBwcm9wZXJseSAqL1xuaW1wb3J0ICdAaW9uaWMvdnVlL2Nzcy9jb3JlLmNzcyc7XG5cbi8qIEJhc2ljIENTUyBmb3IgYXBwcyBidWlsdCB3aXRoIElvbmljICovXG5pbXBvcnQgJ0Bpb25pYy92dWUvY3NzL25vcm1hbGl6ZS5jc3MnO1xuaW1wb3J0ICdAaW9uaWMvdnVlL2Nzcy9zdHJ1Y3R1cmUuY3NzJztcbmltcG9ydCAnQGlvbmljL3Z1ZS9jc3MvdHlwb2dyYXBoeS5jc3MnO1xuXG4vKiBPcHRpb25hbCBDU1MgdXRpbHMgdGhhdCBjYW4gYmUgY29tbWVudGVkIG91dCAqL1xuaW1wb3J0ICdAaW9uaWMvdnVlL2Nzcy9wYWRkaW5nLmNzcyc7XG5pbXBvcnQgJ0Bpb25pYy92dWUvY3NzL2Zsb2F0LWVsZW1lbnRzLmNzcyc7XG5pbXBvcnQgJ0Bpb25pYy92dWUvY3NzL3RleHQtYWxpZ25tZW50LmNzcyc7XG5pbXBvcnQgJ0Bpb25pYy92dWUvY3NzL3RleHQtdHJhbnNmb3JtYXRpb24uY3NzJztcbmltcG9ydCAnQGlvbmljL3Z1ZS9jc3MvZmxleC11dGlscy5jc3MnO1xuaW1wb3J0ICdAaW9uaWMvdnVlL2Nzcy9kaXNwbGF5LmNzcyc7XG5cbi8qIFRoZW1lIHZhcmlhYmxlcyAqL1xuaW1wb3J0ICcuL3RoZW1lL3ZhcmlhYmxlcy5jc3MnO1xuXG5pbXBvcnQgYmFzZUxheW91dCBmcm9tICcuL2NvbXBvbmVudHMvYmFzZUxheW91dC52dWUnO1xuXG5pbXBvcnQgVnVlR29vZ2xlTWFwcyBmcm9tICdAZmF3bWkvdnVlLWdvb2dsZS1tYXBzJ1xuY29uc3QgYXBwID0gY3JlYXRlQXBwKEFwcClcbiAgLnVzZShJb25pY1Z1ZSlcbiAgLnVzZShyb3V0ZXIpXG4gIC51c2UoVnVlR29vZ2xlTWFwcywge1xuICAgIGxvYWQ6IHtcbiAgICAgICAga2V5OiAnQUl6YVN5QUpYR3g3VDJ5cHQ1RXc1LTlTYkRUV0Y5Z3Fsb1FVSndJJyxcbiAgICB9LFxufSk7XG5cbiAgYXBwLmNvbXBvbmVudCgnYmFzZS1sYXlvdXQnLGJhc2VMYXlvdXQpXG4gIFxucm91dGVyLmlzUmVhZHkoKS50aGVuKCgpID0+IHtcbiAgYXBwLm1vdW50KCcjYXBwJyk7XG59KTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwianMvXCIgKyBjaHVua0lkICsgXCItbGVnYWN5LlwiICsge1wiNzhcIjpcIjA0YmVkMmY0XCIsXCIxNjJcIjpcImZmZjNmYjljXCIsXCIyMDRcIjpcIjFiOGVkZmNlXCIsXCIzMTFcIjpcImVhOTk1ZDc2XCIsXCIzMzhcIjpcIjQ3YTMxMGVlXCIsXCI0MjJcIjpcIjUxMzM0MDM1XCIsXCI1NzZcIjpcIjc1OTNhOGRkXCIsXCI3NTNcIjpcIjc0MDI3YTEzXCIsXCI3NzVcIjpcIjI5ZjY5YTczXCIsXCI3NzdcIjpcIjY2OGU3MzUxXCIsXCI4MTRcIjpcIjdiNzBlZDQ4XCIsXCI4MjNcIjpcImIyY2Y4NmI3XCIsXCI4NjBcIjpcIjBmOWY0ZmU3XCIsXCI5OTBcIjpcIjdjOGI0NzE4XCJ9W2NodW5rSWRdICsgXCIuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcImNzcy9cIiArIGNodW5rSWQgKyBcIi5cIiArIHtcIjE2MlwiOlwiNDM4YjhhZjhcIixcIjIwNFwiOlwiZjRhNzU5NjVcIixcIjc1M1wiOlwiOTk4ZmU5MTlcIixcIjg2MFwiOlwiYjI5NmI3N2FcIn1bY2h1bmtJZF0gKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiSFVBVDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fTtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7IiwiaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xudmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRpZiAob2xkVGFnKSB7XG5cdFx0b2xkVGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpbmtUYWcsIG9sZFRhZy5uZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0fVxuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCBudWxsLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgQ1NTIGNodW5rc1xudmFyIGluc3RhbGxlZENzc0NodW5rcyA9IHtcblx0MTQzOiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYubWluaUNzcyA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHR2YXIgY3NzQ2h1bmtzID0ge1wiMTYyXCI6MSxcIjIwNFwiOjEsXCI3NTNcIjoxLFwiODYwXCI6MX07XG5cdGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSkgcHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0pO1xuXHRlbHNlIGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSAhPT0gMCAmJiBjc3NDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IGxvYWRTdHlsZXNoZWV0KGNodW5rSWQpLnRoZW4oKCkgPT4ge1xuXHRcdFx0aW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHR9LCAoZSkgPT4ge1xuXHRcdFx0ZGVsZXRlIGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXTtcblx0XHRcdHRocm93IGU7XG5cdFx0fSkpO1xuXHR9XG59O1xuXG4vLyBubyBobXIiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTQzOiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtIVUFUXCJdID0gc2VsZltcIndlYnBhY2tDaHVua0hVQVRcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs5OThdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg0NjcxKSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbIndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dCIsInJlcSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImUiLCJFcnJvciIsImNvZGUiLCJrZXlzIiwiaWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiX2RlZmluZUNvbXBvbmVudCIsIl9fbmFtZSIsInNldHVwIiwiX19wcm9wcyIsIl9jdHgiLCJfY2FjaGUiLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUJsb2NrIiwiX3VucmVmIiwiSW9uUGFnZSIsImRlZmF1bHQiLCJfd2l0aEN0eCIsIl9jcmVhdGVWTm9kZSIsIklvbkFwcCIsIklvblJvdXRlck91dGxldCIsIl8iLCJfX2V4cG9ydHNfXyIsIklvblRhYnMiLCJJb25UYWJCYXIiLCJzbG90IiwiSW9uVGFiQnV0dG9uIiwidGFiIiwiaHJlZiIsIklvbkljb24iLCJpY29uIiwiaG9tZSIsIklvbkxhYmVsIiwiX2NyZWF0ZVRleHRWTm9kZSIsImNhcmQiLCJhbGJ1bXMiLCJtYXAiLCJwZXJzb24iLCJjbGFzcyIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfY29tcG9uZW50X2Jhc2VfbGF5b3V0IiwiX2NvbXBvbmVudF9pb25fZ3JpZCIsIl9jb21wb25lbnRfaW9uX3JvdyIsInNyYyIsInJlcXVpcmUiLCJfY29tcG9uZW50X2ljb25fY29sIiwic2l6ZSIsIl9jb21wb25lbnRfaW9uX2l0ZW0iLCJmaWxsIiwicmVmIiwiX2NvbXBvbmVudF9pb25faW5wdXQiLCJjbGVhcklucHV0IiwicGxhY2Vob2xkZXIiLCJ0eXBlIiwiX2NvbXBvbmVudF9pb25fY29sIiwiX2hvaXN0ZWRfMiIsImxpbmVzIiwiX2NvbXBvbmVudF9pb25fY2hlY2tib3giLCJfY29tcG9uZW50X2lvbl9sYWJlbCIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwiX2NvbXBvbmVudF9pb25fYnV0dG9uIiwic2hhcGUiLCJvbkNsaWNrIiwiX2NvbXBvbmVudF9pb25fbm90ZSIsImNvbG9yIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ob2lzdGVkXzciLCJkZWZpbmVDb21wb25lbnQiLCJjb21wb25lbnRzIiwiSW9uUm93IiwiSW9uR3JpZCIsIklvbkNvbCIsIklvbk5vdGUiLCJJb25JbnB1dCIsIklvbkl0ZW0iLCJJb25CdXR0b24iLCJJb25DaGVja2JveCIsImRhdGEiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicGFzc3dvcmRFcnJvciIsInVzZXJuYW1lRXJyb3IiLCJsb2dpbkVycm9yIiwibWV0aG9kcyIsImluaXQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidmFsaWRhdGVMb2dpbiIsImNvbmZpZyIsInRoaXMiLCJKU09OIiwic3RyaW5naWZ5IiwibWV0aG9kIiwibW9kZSIsInVybCIsImhlYWRlcnMiLCJyb3V0ZXIiLCIkcm91dGVyIiwicmVzcG9uc2UiLCJheGlvcyIsInB1c2giLCJjYXRjaCIsImVycm9yIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVyVGV4dCIsImNvbnNvbGUiLCJsb2ciLCJtb3VudGVkIiwicmVuZGVyIiwicGFnZVRpdGxlIiwibmVlZEJhY2tCdXR0b24iLCJwYWdlVG9Hb0JhY2siLCJuZWVkVG9vbEJhciIsIl9jb21wb25lbnRfaW9uX3NlYXJjaGJhciIsIl9GcmFnbWVudCIsImVhY2hCb29raW5nIiwiX2NvbXBvbmVudF9pb25fY2FyZCIsImtleSIsIl9ob2lzdGVkXzEiLCJfY29tcG9uZW50X2lvbl9jYXJkX2hlYWRlciIsIl9jb21wb25lbnRfaW9uX2NhcmRfc3VidGl0bGUiLCJib29raW5nUmVmIiwiYm9va2luZ0lEIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJfY29tcG9uZW50X2lvbl9iYWRnZSIsInN0YXR1cyIsIl9jb21wb25lbnRfaW9uX2NhcmRfdGl0bGUiLCJib29raW5nTG9jYXRpb24iLCJJb25DYXJkIiwiSW9uQ2FyZEhlYWRlciIsIklvbkNhcmRTdWJ0aXRsZSIsIklvbkNhcmRUaXRsZSIsIklvblNlYXJjaGJhciIsIklvbkJhZGdlIiwiYm9va2luZ0RldGFpbHMiLCJkZWxldGVCb29raW5nIiwibG9jYXRpb24iLCJyZWxvYWQiLCJtZXNzYWdlIiwiZ2V0QWxsQm9va2luZ3MiLCJib29raW5ncyIsInN0YXJ0RGF0ZVRpbWUiLCJEYXRlIiwic3RhcnREYXRlT25seSIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwic3RhcnRUaW1lT25seSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImVuZERhdGVUaW1lIiwiZW5kRGF0ZU9ubHkiLCJlbmRUaW1lT25seSIsImJvb2tpbmdEYXRlIiwibG9jYXRpb25OYW1lIiwiaW1hZ2UiLCJtYXhDYXBhY2l0eSIsImN1cnJlbnRDYXBhY2l0eSIsInVzZXJJRCIsIl93aXRoU2NvcGVJZCIsIm4iLCJfcHVzaFNjb3BlSWQiLCJfcG9wU2NvcGVJZCIsInN0eWxlIiwiJHByb3BzIiwiJHNldHVwIiwiJGRhdGEiLCIkb3B0aW9ucyIsIl9yZXNvbHZlQ29tcG9uZW50IiwiX2NvbXBvbmVudF9pb25fY2FyZF9jb250ZW50IiwiZXhwYW5kIiwiX2NvbXBvbmVudF9pb25fYmFja19idXR0b24iLCJfY29tcG9uZW50X2lvbl9idXR0b25zIiwiX2NvbXBvbmVudF9pb25fdGl0bGUiLCJfY29tcG9uZW50X2lvbl90b29sYmFyIiwiX2NvbXBvbmVudF9pb25faGVhZGVyIiwiX2NvbXBvbmVudF9pb25fY29udGVudCIsIl9jb21wb25lbnRfaW9uX3BhZ2UiLCJfY3JlYXRlQ29tbWVudFZOb2RlIiwiX3RvRGlzcGxheVN0cmluZyIsIl9yZW5kZXJTbG90IiwiJHNsb3RzIiwicHJvcHMiLCJTdHJpbmciLCJJb25IZWFkZXIiLCJJb25UaXRsZSIsIklvbkNvbnRlbnQiLCJJb25Ub29sYmFyIiwiSW9uQnV0dG9ucyIsIklvbkJhY2tCdXR0b24iLCJCYXNlTGF5b3V0IiwiX2NvbXBvbmVudF9pb25faW1nIiwiX2NvbXBvbmVudF9pb25fbGlzdCIsInBvc2l0aW9uIiwibW9kZWxWYWx1ZSIsInVzZXJOYW1lIiwiJGV2ZW50Iiwib25DaGFuZ2UiLCJ2YWxpZGF0ZVVzZXJuYW1lIiwiaXNVc2VybmFtZVZhbGlkIiwibmFtZSIsInZhbGlkYXRlTmFtZSIsImlzTmFtZVZhbGlkIiwiZW1haWwiLCJ2YWxpZGF0ZUVtYWlsIiwiaXNFbWFpbFZhbGlkIiwidmFsaWRhdGVQYXNzd29yZCIsInBhc3N3b3JkRXJyb3JzIiwibGVuZ3RoIiwiX3JlbmRlckxpc3QiLCJyZWNvbmZpcm1QYXNzd29yZCIsInZhbGlkYXRlUmVjb25maXJtUGFzc3dvcmQiLCJpc1JlY29uZmlybVBhc3N3b3JkVmFsaWQiLCJwaG9uZU51bWJlciIsInZhbGlkYXRlUGhvbmUiLCJpc1Bob25lVmFsaWQiLCJkaXNhYmxlZCIsImRpc2FibGVkUmVnaXN0ZXJCdXR0b24iLCJyZWdpc3RlclVzZXIiLCJBcnJheSIsIm1hdGNoIiwicmVnaXN0ZXJCdXR0b24iLCJjYXBzQWxsUGFzc3dvcmQiLCJ0b1VwcGVyQ2FzZSIsImxvd2VyQWxsUGFzc3dvcmQiLCJ0b0xvd2VyQ2FzZSIsInBob25lTnVtIiwicGF0aCIsIm9wdGlvbnMiLCJ3aWR0aCIsImhlaWdodCIsImdldEJvb2tpbmdzIiwiYm9va2luZ0RhdGEiLCJpIiwiX2NvbXBvbmVudF9pb25fbW9kYWwiLCJlbWFpbE5vRXhpc3QiLCJmb3Jnb3RQYXNzd29yZCIsInN1Y2Nlc3NPcGVuIiwicm91dGVUb0xvZ2luUGFnZSIsIklvbk1vZGFsIiwiZ28iLCJzZXRTdWNjZXNzT3BlbiIsIm9wZW4iLCJlbWFpbE5hbWVPbmx5Iiwic3BsaXQiLCJlbWFpbEFjY291bnRPbmx5IiwicmVzcG9uc2VNZXNzYWdlIiwic2V0VGltZW91dCIsInJvdXRlcyIsImNvbXBvbmVudCIsIkxvZ2luUGFnZSIsIlRhYnNQYWdlIiwiY2hpbGRyZW4iLCJyZWRpcmVjdCIsInZpZXdCb29raW5nIiwibmVhcmJ5bWVQYWdlIiwiYnV5U3Vic2NyaXB0aW9uIiwicmVnaXN0ZXIiLCJ2aWV3UHJvZmlsZSIsIkJhckNoYXJ0IiwiY3JlYXRlUm91dGVyIiwiaGlzdG9yeSIsImNyZWF0ZVdlYkhpc3RvcnkiLCJwcm9jZXNzIiwiYXBwIiwiY3JlYXRlQXBwIiwiQXBwIiwidXNlIiwiSW9uaWNWdWUiLCJWdWVHb29nbGVNYXBzIiwibG9hZCIsImJhc2VMYXlvdXQiLCJtb3VudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwiZGVmZXJyZWQiLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwiT2JqZWN0IiwiZXZlcnkiLCJzcGxpY2UiLCJyIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiY2h1bmtJZCIsImFsbCIsInJlZHVjZSIsInByb21pc2VzIiwidSIsIm1pbmlDc3NGIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIndpbmRvdyIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJsIiwiZG9uZSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JFYWNoIiwiYmluZCIsInRhcmdldCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJwIiwiY3JlYXRlU3R5bGVzaGVldCIsImZ1bGxocmVmIiwib2xkVGFnIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsIm9uTGlua0NvbXBsZXRlIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJlcnIiLCJyZXF1ZXN0IiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJmaW5kU3R5bGVzaGVldCIsImV4aXN0aW5nTGlua1RhZ3MiLCJ0YWciLCJkYXRhSHJlZiIsImV4aXN0aW5nU3R5bGVUYWdzIiwibG9hZFN0eWxlc2hlZXQiLCJpbnN0YWxsZWRDc3NDaHVua3MiLCJtaW5pQ3NzIiwiY3NzQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsImxvYWRpbmdFbmRlZCIsInJlYWxTcmMiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==