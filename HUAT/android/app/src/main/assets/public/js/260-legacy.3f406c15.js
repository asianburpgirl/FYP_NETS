"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[260],{1260:(t,o,a)=>{a.r(o),a.d(o,{default:()=>h});var e=a(6252);const n=(0,e._)("div",null,[(0,e._)("h2",null,"Percentage of bookings according to locations")],-1);function s(t,o,a,s,r,i){const l=(0,e.up)("base-layout");return(0,e.wg)(),(0,e.j4)(l,{needToolBar:"y"},{default:(0,e.w5)((()=>[n])),_:1})}a(7658);var r=a(8945);const i=(0,e.aZ)({name:"GoogleCharts",components:{},data(){return{PieChartData:[["Bookings","Percentage of bookings"]],ColumnChartData:[["Year","Season Parking","Hourly Parking"],["2014",1e3,400],["2015",1170,460],["2016",660,1120],["2017",1030,540]],PieChartoptions:{chart:{title:"Percentage of bookings according to locations",pieHole:.4},width:1e3,height:400},ColumnChartOptions:{chart:{title:"Percentage of bookings according to locations",pieHole:.4},width:1e3,height:400},userData:{}}},methods:{loadUserData(){this.userData=JSON.parse(localStorage.getItem("userData")||"{}")},getCharts(){let t=[];const o="http://localhost:5001/bookings";r.Z.get(o).then((o=>{t=o.data.data.bookings;for(let a=0;a<t.length;a++)this.PieChartData.push([t[a]["bookingLocation"],t[a]["bookingID"]]);return t})).catch((t=>{console.log(t.message)}))}},mounted(){this.loadUserData(),this.getCharts()}});var l=a(3744);const c=(0,l.Z)(i,[["render",s]]),h=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvMjYwLWxlZ2FjeS4zZjQwNmMxNS5qcyIsIm1hcHBpbmdzIjoiNklBRUEsTUFBTUEsR0FBMEJDLEVBQUFBLEVBQUFBLEdBQW9CLE1BQU8sS0FBTSxFQUNsREEsRUFBQUEsRUFBQUEsR0FBb0IsS0FBTSxLQUFNLG1EQUMzQyxHQUVFLFNBQVVDLEVBQU9DLEVBQVVDLEVBQVlDLEVBQVlDLEVBQVlDLEVBQVdDLEdBQzlFLE1BQU1DLEdBQXlCQyxFQUFBQSxFQUFBQSxJQUFrQixlQUVqRCxPQUFRQyxFQUFBQSxFQUFBQSxPQUFjQyxFQUFBQSxFQUFBQSxJQUFhSCxFQUF3QixDQUFFSSxZQUFhLEtBQU8sQ0FDL0VDLFNBQVNDLEVBQUFBLEVBQUFBLEtBQVMsSUFBTSxDQUN0QmYsS0FFRmdCLEVBQUcsR0FFUCxDLHNCQ1ZBLFNBQWVDLEVBQUFBLEVBQUFBLElBQWdCLENBQzdCQyxLQUFNLGVBQ05DLFdBQVksQ0FDVixFQUVGQyxPQUNFLE1BQU8sQ0FDTEMsYUFBYyxDQUNaLENBQUMsV0FBWSwyQkFFZkMsZ0JBQWlCLENBQ2YsQ0FBQyxPQUFRLGlCQUFrQixrQkFDM0IsQ0FBQyxPQUFRLElBQU0sS0FDZixDQUFDLE9BQVEsS0FBTSxLQUNmLENBQUMsT0FBUSxJQUFLLE1BQ2QsQ0FBQyxPQUFRLEtBQU0sTUFFakJDLGdCQUFpQixDQUNmQyxNQUFPLENBQ0xDLE1BQU8sZ0RBQ1BDLFFBQVMsSUFFWEMsTUFBTyxJQUNQQyxPQUFRLEtBRVZDLG1CQUFvQixDQUNsQkwsTUFBTyxDQUNMQyxNQUFPLGdEQUNQQyxRQUFTLElBRVhDLE1BQU8sSUFDUEMsT0FBUSxLQUVWRSxTQUFVLENBQUMsRUFFZixFQUNBQyxRQUFTLENBQ1BDLGVBQ0VDLEtBQUtILFNBQVdJLEtBQUtDLE1BQU1DLGFBQWFDLFFBQVEsYUFBZSxLQUNqRSxFQUNBQyxZQUNFLElBQUlDLEVBQWMsR0FFbEIsTUFBTUMsRUFBTSxpQ0FDWkMsRUFBQUEsRUFBQUEsSUFBVUQsR0FDVEUsTUFBS0MsSUFDSkosRUFBY0ksRUFBU3ZCLEtBQUtBLEtBQUt3QixTQUVqQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSU4sRUFBWU8sT0FBUUQsSUFDdENaLEtBQUtaLGFBQWEwQixLQUFLLENBQUNSLEVBQVlNLEdBQUcsbUJBQW1CTixFQUFZTSxHQUFHLGVBRTNFLE9BQU9OLENBQVcsSUFHbkJTLE9BQU1DLElBQ0xDLFFBQVFDLElBQUlGLEVBQU1HLFFBQVEsR0FFOUIsR0FHRkMsVUFDRXBCLEtBQUtELGVBQ0xDLEtBQUtLLFdBQ1AsSSxjQy9ERixNQUFNZ0IsR0FBMkIsT0FBZ0IsRUFBUSxDQUFDLENBQUMsU0FBU3BELEtBRXBFLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9IVUFULy4vc3JjL3ZpZXdzL0hvbWVQYWdlLnZ1ZT9hZWI2Iiwid2VicGFjazovL0hVQVQvLi9zcmMvdmlld3MvSG9tZVBhZ2UudnVlP2Q4M2EiLCJ3ZWJwYWNrOi8vSFVBVC8uL3NyYy92aWV3cy9Ib21lUGFnZS52dWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX2hvaXN0ZWRfMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIG51bGwsIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJoMlwiLCBudWxsLCBcIlBlcmNlbnRhZ2Ugb2YgYm9va2luZ3MgYWNjb3JkaW5nIHRvIGxvY2F0aW9uc1wiKVxuXSwgLTEpXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eDogYW55LF9jYWNoZTogYW55LCRwcm9wczogYW55LCRzZXR1cDogYW55LCRkYXRhOiBhbnksJG9wdGlvbnM6IGFueSkge1xuICBjb25zdCBfY29tcG9uZW50X2Jhc2VfbGF5b3V0ID0gX3Jlc29sdmVDb21wb25lbnQoXCJiYXNlLWxheW91dFwiKSFcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfYmFzZV9sYXlvdXQsIHsgbmVlZFRvb2xCYXI6IFwieVwiIH0sIHtcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfaG9pc3RlZF8xXG4gICAgXSksXG4gICAgXzogMVxuICB9KSlcbn0iLCJcclxuLy8gaW1wb3J0IHsgR0NoYXJ0IH0gZnJvbSBcInZ1ZS1nb29nbGUtY2hhcnRzXCI7XHJcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XHJcbiAgbmFtZTogXCJHb29nbGVDaGFydHNcIixcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICAvLyBHQ2hhcnRcclxuICB9LFxyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBQaWVDaGFydERhdGE6IFtcclxuICAgICAgICBbJ0Jvb2tpbmdzJywgJ1BlcmNlbnRhZ2Ugb2YgYm9va2luZ3MnXVxyXG4gICAgICBdLFxyXG4gICAgICBDb2x1bW5DaGFydERhdGE6IFtcclxuICAgICAgICBbJ1llYXInLCAnU2Vhc29uIFBhcmtpbmcnLCAnSG91cmx5IFBhcmtpbmcnXSxcclxuICAgICAgICBbJzIwMTQnLCAxMDAwLCA0MDBdLFxyXG4gICAgICAgIFsnMjAxNScsIDExNzAsIDQ2MF0sXHJcbiAgICAgICAgWycyMDE2JywgNjYwLCAxMTIwXSxcclxuICAgICAgICBbJzIwMTcnLCAxMDMwLCA1NDBdLFxyXG4gICAgICBdLFxyXG4gICAgICBQaWVDaGFydG9wdGlvbnM6IHtcclxuICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgdGl0bGU6IFwiUGVyY2VudGFnZSBvZiBib29raW5ncyBhY2NvcmRpbmcgdG8gbG9jYXRpb25zXCIsXHJcbiAgICAgICAgICBwaWVIb2xlOiAwLjQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB3aWR0aDogMTAwMCxcclxuICAgICAgICBoZWlnaHQ6IDQwMFxyXG4gICAgICB9LFxyXG4gICAgICBDb2x1bW5DaGFydE9wdGlvbnM6IHtcclxuICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgdGl0bGU6IFwiUGVyY2VudGFnZSBvZiBib29raW5ncyBhY2NvcmRpbmcgdG8gbG9jYXRpb25zXCIsXHJcbiAgICAgICAgICBwaWVIb2xlOiAwLjQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB3aWR0aDogMTAwMCxcclxuICAgICAgICBoZWlnaHQ6IDQwMFxyXG4gICAgICB9LFxyXG4gICAgICB1c2VyRGF0YToge31cclxuICAgIH1cclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGxvYWRVc2VyRGF0YSgpIHtcclxuICAgICAgdGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyRGF0YVwiKSB8fCAne30nKTtcclxuICAgIH0sXHJcbiAgICBnZXRDaGFydHMoKSB7XHJcbiAgICAgIGxldCBib29raW5nRGF0YSA9IFtdO1xyXG5cclxuICAgICAgY29uc3QgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjUwMDEvYm9va2luZ3NcIjtcclxuICAgICAgYXhpb3MuZ2V0KHVybClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGJvb2tpbmdEYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhLmJvb2tpbmdzO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJvb2tpbmdEYXRhKVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9va2luZ0RhdGEubGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgICB0aGlzLlBpZUNoYXJ0RGF0YS5wdXNoKFtib29raW5nRGF0YVtpXVsnYm9va2luZ0xvY2F0aW9uJ10sYm9va2luZ0RhdGFbaV1bJ2Jvb2tpbmdJRCddXSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJvb2tpbmdEYXRhXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5kYXRhLmJvb2tpbmdzKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gQ2FsbHMgZnVuY3Rpb24gb24gcGFnZSBsb2FkXHJcbiAgbW91bnRlZCgpe1xyXG4gICAgdGhpcy5sb2FkVXNlckRhdGEoKTtcclxuICAgIHRoaXMuZ2V0Q2hhcnRzKCk7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vSG9tZVBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNkMzliMTM4JnRzPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Ib21lUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vSG9tZVBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiQzpcXFxcd2FtcDY0XFxcXEZZUF9ORVRTXFxcXEhVQVRcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1sb2FkZXJcXFxcZGlzdFxcXFxleHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdXSlcblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iXSwibmFtZXMiOlsiX2hvaXN0ZWRfMSIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJyZW5kZXIiLCJfY3R4IiwiX2NhY2hlIiwiJHByb3BzIiwiJHNldHVwIiwiJGRhdGEiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRfYmFzZV9sYXlvdXQiLCJfcmVzb2x2ZUNvbXBvbmVudCIsIl9vcGVuQmxvY2siLCJfY3JlYXRlQmxvY2siLCJuZWVkVG9vbEJhciIsImRlZmF1bHQiLCJfd2l0aEN0eCIsIl8iLCJkZWZpbmVDb21wb25lbnQiLCJuYW1lIiwiY29tcG9uZW50cyIsImRhdGEiLCJQaWVDaGFydERhdGEiLCJDb2x1bW5DaGFydERhdGEiLCJQaWVDaGFydG9wdGlvbnMiLCJjaGFydCIsInRpdGxlIiwicGllSG9sZSIsIndpZHRoIiwiaGVpZ2h0IiwiQ29sdW1uQ2hhcnRPcHRpb25zIiwidXNlckRhdGEiLCJtZXRob2RzIiwibG9hZFVzZXJEYXRhIiwidGhpcyIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJnZXRDaGFydHMiLCJib29raW5nRGF0YSIsInVybCIsImF4aW9zIiwidGhlbiIsInJlc3BvbnNlIiwiYm9va2luZ3MiLCJpIiwibGVuZ3RoIiwicHVzaCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsIm1vdW50ZWQiLCJfX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=