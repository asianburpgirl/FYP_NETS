"use strict";(self["webpackChunkHUAT"]=self["webpackChunkHUAT"]||[]).push([[162],{1162:(l,e,u)=>{u.r(e),u.d(e,{default:()=>s});var a=u(6252);const n=l=>((0,a.dD)("data-v-44d2cb09"),l=l(),(0,a.Cn)(),l),t=n((()=>(0,a._)("br",null,null,-1))),d=n((()=>(0,a._)("br",null,null,-1))),r=(0,a.aZ)({__name:"plansPage",setup(l){return(l,e)=>{const u=(0,a.up)("ion-card-title"),n=(0,a.up)("ion-card-subtitle"),r=(0,a.up)("ion-card-header"),i=(0,a.up)("ion-grid"),o=(0,a.up)("ion-card"),s=(0,a.up)("ion-button"),f=(0,a.up)("ion-item"),p=(0,a.up)("base-layout");return(0,a.wg)(),(0,a.j4)(p,{pageTitle:"Subscription Plans",pageToGoBack:"/tabs/",needToolBar:"y"},{default:(0,a.w5)((()=>[(0,a.Wm)(o,null,{default:(0,a.w5)((()=>[(0,a.Wm)(i,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Basic Plan")])),_:1}),(0,a.Wm)(n,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Free 1 hour parking")])),_:1}),(0,a.Wm)(n,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Free parking on birthday")])),_:1}),t,(0,a.Wm)(n,{align:"right"},{default:(0,a.w5)((()=>[(0,a.Uk)("Valid till 25/9/23")])),_:1})])),_:1})])),_:1})])),_:1}),(0,a.Wm)(o,null,{default:(0,a.w5)((()=>[(0,a.Wm)(i,null,{default:(0,a.w5)((()=>[(0,a.Wm)(r,null,{default:(0,a.w5)((()=>[(0,a.Wm)(u,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Premium Plan")])),_:1}),(0,a.Wm)(n,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Free 2 hour parking")])),_:1}),(0,a.Wm)(n,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Free parking once a month")])),_:1}),(0,a.Wm)(n,null,{default:(0,a.w5)((()=>[(0,a.Uk)("Pay parking fees at the end of the month")])),_:1}),d,(0,a.Wm)(f,{lines:"none"},{default:(0,a.w5)((()=>[(0,a.Wm)(s,{slot:"end",color:"success",size:"large",href:"/buySubscription"},{default:(0,a.w5)((()=>[(0,a.Uk)("Buy")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})}}});var i=u(3744);const o=(0,i.Z)(r,[["__scopeId","data-v-44d2cb09"]]),s=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,